{"ast":null,"code":"/**\r\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\r\n * @author Toru Nagashima\r\n */\n\"use strict\";\n\nconst util = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/block-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      missing: \"Requires a space {{location}} '{{token}}'.\",\n      extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\n    }\n  },\n\n  create(context) {\n    const always = context.options[0] !== \"never\",\n          messageId = always ? \"missing\" : \"extra\",\n          sourceCode = context.getSourceCode();\n    /**\r\n     * Gets the open brace token from a given node.\r\n     * @param {ASTNode} node A BlockStatement/StaticBlock/SwitchStatement node to get.\r\n     * @returns {Token} The token of the open brace.\r\n     */\n\n    function getOpenBrace(node) {\n      if (node.type === \"SwitchStatement\") {\n        if (node.cases.length > 0) {\n          return sourceCode.getTokenBefore(node.cases[0]);\n        }\n\n        return sourceCode.getLastToken(node, 1);\n      }\n\n      if (node.type === \"StaticBlock\") {\n        return sourceCode.getFirstToken(node, {\n          skip: 1\n        }); // skip the `static` token\n      } // \"BlockStatement\"\n\n\n      return sourceCode.getFirstToken(node);\n    }\n    /**\r\n     * Checks whether or not:\r\n     *   - given tokens are on same line.\r\n     *   - there is/isn't a space between given tokens.\r\n     * @param {Token} left A token to check.\r\n     * @param {Token} right The token which is next to `left`.\r\n     * @returns {boolean}\r\n     *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\r\n     *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\r\n     *    If given tokens are not on same line, it's always `true`.\r\n     */\n\n\n    function isValid(left, right) {\n      return !util.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === always;\n    }\n    /**\r\n     * Checks and reports invalid spacing style inside braces.\r\n     * @param {ASTNode} node A BlockStatement/StaticBlock/SwitchStatement node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkSpacingInsideBraces(node) {\n      // Gets braces and the first/last token of content.\n      const openBrace = getOpenBrace(node);\n      const closeBrace = sourceCode.getLastToken(node);\n      const firstToken = sourceCode.getTokenAfter(openBrace, {\n        includeComments: true\n      });\n      const lastToken = sourceCode.getTokenBefore(closeBrace, {\n        includeComments: true\n      }); // Skip if the node is invalid or empty.\n\n      if (openBrace.type !== \"Punctuator\" || openBrace.value !== \"{\" || closeBrace.type !== \"Punctuator\" || closeBrace.value !== \"}\" || firstToken === closeBrace) {\n        return;\n      } // Skip line comments for option never\n\n\n      if (!always && firstToken.type === \"Line\") {\n        return;\n      } // Check.\n\n\n      if (!isValid(openBrace, firstToken)) {\n        let loc = openBrace.loc;\n\n        if (messageId === \"extra\") {\n          loc = {\n            start: openBrace.loc.end,\n            end: firstToken.loc.start\n          };\n        }\n\n        context.report({\n          node,\n          loc,\n          messageId,\n          data: {\n            location: \"after\",\n            token: openBrace.value\n          },\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextBefore(firstToken, \" \");\n            }\n\n            return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n          }\n\n        });\n      }\n\n      if (!isValid(lastToken, closeBrace)) {\n        let loc = closeBrace.loc;\n\n        if (messageId === \"extra\") {\n          loc = {\n            start: lastToken.loc.end,\n            end: closeBrace.loc.start\n          };\n        }\n\n        context.report({\n          node,\n          loc,\n          messageId,\n          data: {\n            location: \"before\",\n            token: closeBrace.value\n          },\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextAfter(lastToken, \" \");\n            }\n\n            return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n          }\n\n        });\n      }\n    }\n\n    return {\n      BlockStatement: checkSpacingInsideBraces,\n      StaticBlock: checkSpacingInsideBraces,\n      SwitchStatement: checkSpacingInsideBraces\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/block-spacing.js"],"names":["util","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","missing","extra","create","context","always","options","messageId","sourceCode","getSourceCode","getOpenBrace","node","cases","length","getTokenBefore","getLastToken","getFirstToken","skip","isValid","left","right","isTokenOnSameLine","isSpaceBetweenTokens","checkSpacingInsideBraces","openBrace","closeBrace","firstToken","getTokenAfter","includeComments","lastToken","value","loc","start","end","report","data","location","token","fix","fixer","insertTextBefore","removeRange","range","insertTextAfter","BlockStatement","StaticBlock","SwitchStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst util = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/block-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            { enum: [\"always\", \"never\"] }\r\n        ],\r\n\r\n        messages: {\r\n            missing: \"Requires a space {{location}} '{{token}}'.\",\r\n            extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const always = (context.options[0] !== \"never\"),\r\n            messageId = always ? \"missing\" : \"extra\",\r\n            sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Gets the open brace token from a given node.\r\n         * @param {ASTNode} node A BlockStatement/StaticBlock/SwitchStatement node to get.\r\n         * @returns {Token} The token of the open brace.\r\n         */\r\n        function getOpenBrace(node) {\r\n            if (node.type === \"SwitchStatement\") {\r\n                if (node.cases.length > 0) {\r\n                    return sourceCode.getTokenBefore(node.cases[0]);\r\n                }\r\n                return sourceCode.getLastToken(node, 1);\r\n            }\r\n\r\n            if (node.type === \"StaticBlock\") {\r\n                return sourceCode.getFirstToken(node, { skip: 1 }); // skip the `static` token\r\n            }\r\n\r\n            // \"BlockStatement\"\r\n            return sourceCode.getFirstToken(node);\r\n        }\r\n\r\n        /**\r\n         * Checks whether or not:\r\n         *   - given tokens are on same line.\r\n         *   - there is/isn't a space between given tokens.\r\n         * @param {Token} left A token to check.\r\n         * @param {Token} right The token which is next to `left`.\r\n         * @returns {boolean}\r\n         *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\r\n         *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\r\n         *    If given tokens are not on same line, it's always `true`.\r\n         */\r\n        function isValid(left, right) {\r\n            return (\r\n                !util.isTokenOnSameLine(left, right) ||\r\n                sourceCode.isSpaceBetweenTokens(left, right) === always\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Checks and reports invalid spacing style inside braces.\r\n         * @param {ASTNode} node A BlockStatement/StaticBlock/SwitchStatement node to check.\r\n         * @returns {void}\r\n         */\r\n        function checkSpacingInsideBraces(node) {\r\n\r\n            // Gets braces and the first/last token of content.\r\n            const openBrace = getOpenBrace(node);\r\n            const closeBrace = sourceCode.getLastToken(node);\r\n            const firstToken = sourceCode.getTokenAfter(openBrace, { includeComments: true });\r\n            const lastToken = sourceCode.getTokenBefore(closeBrace, { includeComments: true });\r\n\r\n            // Skip if the node is invalid or empty.\r\n            if (openBrace.type !== \"Punctuator\" ||\r\n                openBrace.value !== \"{\" ||\r\n                closeBrace.type !== \"Punctuator\" ||\r\n                closeBrace.value !== \"}\" ||\r\n                firstToken === closeBrace\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            // Skip line comments for option never\r\n            if (!always && firstToken.type === \"Line\") {\r\n                return;\r\n            }\r\n\r\n            // Check.\r\n            if (!isValid(openBrace, firstToken)) {\r\n                let loc = openBrace.loc;\r\n\r\n                if (messageId === \"extra\") {\r\n                    loc = {\r\n                        start: openBrace.loc.end,\r\n                        end: firstToken.loc.start\r\n                    };\r\n                }\r\n\r\n                context.report({\r\n                    node,\r\n                    loc,\r\n                    messageId,\r\n                    data: {\r\n                        location: \"after\",\r\n                        token: openBrace.value\r\n                    },\r\n                    fix(fixer) {\r\n                        if (always) {\r\n                            return fixer.insertTextBefore(firstToken, \" \");\r\n                        }\r\n\r\n                        return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\r\n                    }\r\n                });\r\n            }\r\n            if (!isValid(lastToken, closeBrace)) {\r\n                let loc = closeBrace.loc;\r\n\r\n                if (messageId === \"extra\") {\r\n                    loc = {\r\n                        start: lastToken.loc.end,\r\n                        end: closeBrace.loc.start\r\n                    };\r\n                }\r\n                context.report({\r\n                    node,\r\n                    loc,\r\n                    messageId,\r\n                    data: {\r\n                        location: \"before\",\r\n                        token: closeBrace.value\r\n                    },\r\n                    fix(fixer) {\r\n                        if (always) {\r\n                            return fixer.insertTextAfter(lastToken, \" \");\r\n                        }\r\n\r\n                        return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            BlockStatement: checkSpacingInsideBraces,\r\n            StaticBlock: checkSpacingInsideBraces,\r\n            SwitchStatement: checkSpacingInsideBraces\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}