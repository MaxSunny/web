{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\r\n * @author James Allardice\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker\n} = require(\"eslint-utils\");\n\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\"];\n/**\r\n * Returns the name of the node to report\r\n * @param {ASTNode} node A node to report\r\n * @returns {string} name to report\r\n */\n\nfunction getReportNodeName(node) {\n  if (node.type === \"ChainExpression\") {\n    return getReportNodeName(node.expression);\n  }\n\n  if (node.type === \"MemberExpression\") {\n    return getPropertyName(node);\n  }\n\n  return node.name;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling global object properties as functions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-obj-calls\"\n    },\n    schema: [],\n    messages: {\n      unexpectedCall: \"'{{name}}' is not a function.\",\n      unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n    }\n  },\n\n  create(context) {\n    return {\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {};\n\n        for (const g of nonCallableGlobals) {\n          traceMap[g] = {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          };\n        }\n\n        for (const {\n          node,\n          path\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const name = getReportNodeName(node.callee);\n          const ref = path[0];\n          const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n          context.report({\n            node,\n            messageId,\n            data: {\n              name,\n              ref\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-obj-calls.js"],"names":["CALL","CONSTRUCT","ReferenceTracker","require","getPropertyName","getStaticPropertyName","nonCallableGlobals","getReportNodeName","node","type","expression","name","module","exports","meta","docs","description","recommended","url","schema","messages","unexpectedCall","unexpectedRefCall","create","context","Program","scope","getScope","tracker","traceMap","g","path","iterateGlobalReferences","callee","ref","messageId","report","data"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAM;AAAEA,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA;AAAnB,IAAwCC,OAAO,CAAC,cAAD,CAArD;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BE,qBAArD,C,CAEA;AACA;AACA;;;AAEA,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,SAA5B,CAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,MAAIA,IAAI,CAACC,IAAL,KAAc,iBAAlB,EAAqC;AACjC,WAAOF,iBAAiB,CAACC,IAAI,CAACE,UAAN,CAAxB;AACH;;AACD,MAAIF,IAAI,CAACC,IAAL,KAAc,kBAAlB,EAAsC;AAClC,WAAOL,eAAe,CAACI,IAAD,CAAtB;AACH;;AACD,SAAOA,IAAI,CAACG,IAAZ;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFL,IAAAA,IAAI,EAAE,SADJ;AAGFM,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wDADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,cAAc,EAAE,+BADV;AAENC,MAAAA,iBAAiB,EAAE;AAFb;AAXR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AACHC,MAAAA,OAAO,GAAG;AACN,cAAMC,KAAK,GAAGF,OAAO,CAACG,QAAR,EAAd;AACA,cAAMC,OAAO,GAAG,IAAI1B,gBAAJ,CAAqBwB,KAArB,CAAhB;AACA,cAAMG,QAAQ,GAAG,EAAjB;;AAEA,aAAK,MAAMC,CAAX,IAAgBxB,kBAAhB,EAAoC;AAChCuB,UAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc;AACV,aAAC9B,IAAD,GAAQ,IADE;AAEV,aAACC,SAAD,GAAa;AAFH,WAAd;AAIH;;AAED,aAAK,MAAM;AAAEO,UAAAA,IAAF;AAAQuB,UAAAA;AAAR,SAAX,IAA6BH,OAAO,CAACI,uBAAR,CAAgCH,QAAhC,CAA7B,EAAwE;AACpE,gBAAMlB,IAAI,GAAGJ,iBAAiB,CAACC,IAAI,CAACyB,MAAN,CAA9B;AACA,gBAAMC,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAhB;AACA,gBAAMI,SAAS,GAAGxB,IAAI,KAAKuB,GAAT,GAAe,gBAAf,GAAkC,mBAApD;AAEAV,UAAAA,OAAO,CAACY,MAAR,CAAe;AAAE5B,YAAAA,IAAF;AAAQ2B,YAAAA,SAAR;AAAmBE,YAAAA,IAAI,EAAE;AAAE1B,cAAAA,IAAF;AAAQuB,cAAAA;AAAR;AAAzB,WAAf;AACH;AACJ;;AApBE,KAAP;AAsBH;;AA1CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\r\n * @author James Allardice\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst { CALL, CONSTRUCT, ReferenceTracker } = require(\"eslint-utils\");\r\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName;\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\"];\r\n\r\n/**\r\n * Returns the name of the node to report\r\n * @param {ASTNode} node A node to report\r\n * @returns {string} name to report\r\n */\r\nfunction getReportNodeName(node) {\r\n    if (node.type === \"ChainExpression\") {\r\n        return getReportNodeName(node.expression);\r\n    }\r\n    if (node.type === \"MemberExpression\") {\r\n        return getPropertyName(node);\r\n    }\r\n    return node.name;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow calling global object properties as functions\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-obj-calls\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedCall: \"'{{name}}' is not a function.\",\r\n            unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n            Program() {\r\n                const scope = context.getScope();\r\n                const tracker = new ReferenceTracker(scope);\r\n                const traceMap = {};\r\n\r\n                for (const g of nonCallableGlobals) {\r\n                    traceMap[g] = {\r\n                        [CALL]: true,\r\n                        [CONSTRUCT]: true\r\n                    };\r\n                }\r\n\r\n                for (const { node, path } of tracker.iterateGlobalReferences(traceMap)) {\r\n                    const name = getReportNodeName(node.callee);\r\n                    const ref = path[0];\r\n                    const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\r\n\r\n                    context.report({ node, messageId, data: { name, ref } });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}