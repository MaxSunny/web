{"ast":null,"code":"/**\r\n * @fileoverview Tracks performance of individual rules.\r\n * @author Brandon Mills\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\n/**\r\n * Align the string to left\r\n * @param {string} str string to evaluate\r\n * @param {int} len length of the string\r\n * @param {string} ch delimiter character\r\n * @returns {string} modified string\r\n * @private\r\n */\n\nfunction alignLeft(str, len, ch) {\n  return str + new Array(len - str.length + 1).join(ch || \" \");\n}\n/* istanbul ignore next */\n\n/**\r\n * Align the string to right\r\n * @param {string} str string to evaluate\r\n * @param {int} len length of the string\r\n * @param {string} ch delimiter character\r\n * @returns {string} modified string\r\n * @private\r\n */\n\n\nfunction alignRight(str, len, ch) {\n  return new Array(len - str.length + 1).join(ch || \" \") + str;\n} //------------------------------------------------------------------------------\n// Module definition\n//------------------------------------------------------------------------------\n\n\nconst enabled = !!process.env.TIMING;\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\nconst ALIGN = [alignLeft, alignRight, alignRight];\n/**\r\n * Decide how many rules to show in the output list.\r\n * @returns {number} the number of rules to show\r\n */\n\nfunction getListSize() {\n  const MINIMUM_SIZE = 10;\n\n  if (typeof process.env.TIMING !== \"string\") {\n    return MINIMUM_SIZE;\n  }\n\n  if (process.env.TIMING.toLowerCase() === \"all\") {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n  return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n}\n/* istanbul ignore next */\n\n/**\r\n * display the data\r\n * @param {Object} data Data object to be displayed\r\n * @returns {void} prints modified string with console.log\r\n * @private\r\n */\n\n\nfunction display(data) {\n  let total = 0;\n  const rows = Object.keys(data).map(key => {\n    const time = data[key];\n    total += time;\n    return [key, time];\n  }).sort((a, b) => b[1] - a[1]).slice(0, getListSize());\n  rows.forEach(row => {\n    row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n    row[1] = row[1].toFixed(3);\n  });\n  rows.unshift(HEADERS);\n  const widths = [];\n  rows.forEach(row => {\n    const len = row.length;\n\n    for (let i = 0; i < len; i++) {\n      const n = row[i].length;\n\n      if (!widths[i] || n > widths[i]) {\n        widths[i] = n;\n      }\n    }\n  });\n  const table = rows.map(row => row.map((cell, index) => ALIGN[index](cell, widths[index])).join(\" | \"));\n  table.splice(1, 0, widths.map((width, index) => {\n    const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\n    return ALIGN[index](\":\", width + extraAlignment, \"-\");\n  }).join(\"|\"));\n  console.log(table.join(\"\\n\")); // eslint-disable-line no-console -- Debugging function\n}\n/* istanbul ignore next */\n\n\nmodule.exports = function () {\n  const data = Object.create(null);\n  /**\r\n   * Time the run\r\n   * @param {any} key key from the data object\r\n   * @param {Function} fn function to be called\r\n   * @returns {Function} function to be executed\r\n   * @private\r\n   */\n\n  function time(key, fn) {\n    if (typeof data[key] === \"undefined\") {\n      data[key] = 0;\n    }\n\n    return function () {\n      let t = process.hrtime();\n      fn(...arguments);\n      t = process.hrtime(t);\n      data[key] += t[0] * 1e3 + t[1] / 1e6;\n    };\n  }\n\n  if (enabled) {\n    process.on(\"exit\", () => {\n      display(data);\n    });\n  }\n\n  return {\n    time,\n    enabled,\n    getListSize\n  };\n}();","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/linter/timing.js"],"names":["alignLeft","str","len","ch","Array","length","join","alignRight","enabled","process","env","TIMING","HEADERS","ALIGN","getListSize","MINIMUM_SIZE","toLowerCase","Number","POSITIVE_INFINITY","TIMING_ENV_VAR_AS_INTEGER","parseInt","display","data","total","rows","Object","keys","map","key","time","sort","a","b","slice","forEach","row","push","toFixed","unshift","widths","i","n","table","cell","index","splice","width","extraAlignment","console","log","module","exports","create","fn","t","hrtime","on"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Tracks performance of individual rules.\r\n * @author Brandon Mills\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Align the string to left\r\n * @param {string} str string to evaluate\r\n * @param {int} len length of the string\r\n * @param {string} ch delimiter character\r\n * @returns {string} modified string\r\n * @private\r\n */\r\nfunction alignLeft(str, len, ch) {\r\n    return str + new Array(len - str.length + 1).join(ch || \" \");\r\n}\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Align the string to right\r\n * @param {string} str string to evaluate\r\n * @param {int} len length of the string\r\n * @param {string} ch delimiter character\r\n * @returns {string} modified string\r\n * @private\r\n */\r\nfunction alignRight(str, len, ch) {\r\n    return new Array(len - str.length + 1).join(ch || \" \") + str;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Module definition\r\n//------------------------------------------------------------------------------\r\n\r\nconst enabled = !!process.env.TIMING;\r\n\r\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\r\nconst ALIGN = [alignLeft, alignRight, alignRight];\r\n\r\n/**\r\n * Decide how many rules to show in the output list.\r\n * @returns {number} the number of rules to show\r\n */\r\nfunction getListSize() {\r\n    const MINIMUM_SIZE = 10;\r\n\r\n    if (typeof process.env.TIMING !== \"string\") {\r\n        return MINIMUM_SIZE;\r\n    }\r\n\r\n    if (process.env.TIMING.toLowerCase() === \"all\") {\r\n        return Number.POSITIVE_INFINITY;\r\n    }\r\n\r\n    const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\r\n\r\n    return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\r\n}\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * display the data\r\n * @param {Object} data Data object to be displayed\r\n * @returns {void} prints modified string with console.log\r\n * @private\r\n */\r\nfunction display(data) {\r\n    let total = 0;\r\n    const rows = Object.keys(data)\r\n        .map(key => {\r\n            const time = data[key];\r\n\r\n            total += time;\r\n            return [key, time];\r\n        })\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, getListSize());\r\n\r\n    rows.forEach(row => {\r\n        row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\r\n        row[1] = row[1].toFixed(3);\r\n    });\r\n\r\n    rows.unshift(HEADERS);\r\n\r\n    const widths = [];\r\n\r\n    rows.forEach(row => {\r\n        const len = row.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            const n = row[i].length;\r\n\r\n            if (!widths[i] || n > widths[i]) {\r\n                widths[i] = n;\r\n            }\r\n        }\r\n    });\r\n\r\n    const table = rows.map(row => (\r\n        row\r\n            .map((cell, index) => ALIGN[index](cell, widths[index]))\r\n            .join(\" | \")\r\n    ));\r\n\r\n    table.splice(1, 0, widths.map((width, index) => {\r\n        const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\r\n\r\n        return ALIGN[index](\":\", width + extraAlignment, \"-\");\r\n    }).join(\"|\"));\r\n\r\n    console.log(table.join(\"\\n\")); // eslint-disable-line no-console -- Debugging function\r\n}\r\n\r\n/* istanbul ignore next */\r\nmodule.exports = (function() {\r\n\r\n    const data = Object.create(null);\r\n\r\n    /**\r\n     * Time the run\r\n     * @param {any} key key from the data object\r\n     * @param {Function} fn function to be called\r\n     * @returns {Function} function to be executed\r\n     * @private\r\n     */\r\n    function time(key, fn) {\r\n        if (typeof data[key] === \"undefined\") {\r\n            data[key] = 0;\r\n        }\r\n\r\n        return function(...args) {\r\n            let t = process.hrtime();\r\n\r\n            fn(...args);\r\n            t = process.hrtime(t);\r\n            data[key] += t[0] * 1e3 + t[1] / 1e6;\r\n        };\r\n    }\r\n\r\n    if (enabled) {\r\n        process.on(\"exit\", () => {\r\n            display(data);\r\n        });\r\n    }\r\n\r\n    return {\r\n        time,\r\n        enabled,\r\n        getListSize\r\n    };\r\n\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}