{"ast":null,"code":"/**\r\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\r\n * @author Michael Ficarra\r\n */\n\"use strict\";\n/**\r\n * Determines if a variable safely shadows undefined.\r\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\r\n * as the global).\r\n * @param {eslintScope.Variable} variable The variable to check\r\n * @returns {boolean} true if this variable safely shadows `undefined`\r\n */\n\nfunction safelyShadowsUndefined(variable) {\n  return variable.name === \"undefined\" && variable.references.every(ref => !ref.isWrite()) && variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow identifiers from shadowing restricted names\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-shadow-restricted-names\"\n    },\n    schema: [],\n    messages: {\n      shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\n    return {\n      \"VariableDeclaration, :function, CatchClause\"(node) {\n        for (const variable of context.getDeclaredVariables(node)) {\n          if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\n            context.report({\n              node: variable.defs[0].name,\n              messageId: \"shadowingRestrictedName\",\n              data: {\n                name: variable.name\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-shadow-restricted-names.js"],"names":["safelyShadowsUndefined","variable","name","references","every","ref","isWrite","defs","def","node","type","init","module","exports","meta","docs","description","recommended","url","schema","messages","shadowingRestrictedName","create","context","RESTRICTED","Set","getDeclaredVariables","length","has","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,sBAAT,CAAgCC,QAAhC,EAA0C;AACtC,SAAOA,QAAQ,CAACC,IAAT,KAAkB,WAAlB,IACHD,QAAQ,CAACE,UAAT,CAAoBC,KAApB,CAA0BC,GAAG,IAAI,CAACA,GAAG,CAACC,OAAJ,EAAlC,CADG,IAEHL,QAAQ,CAACM,IAAT,CAAcH,KAAd,CAAoBI,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,IAAT,KAAkB,oBAAlB,IAA0CF,GAAG,CAACC,IAAJ,CAASE,IAAT,KAAkB,IAAvF,CAFJ;AAGH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFJ,IAAAA,IAAI,EAAE,YADJ;AAGFK,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sDADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,uBAAuB,EAAE;AADnB;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAGZ,UAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,WAAD,EAAc,KAAd,EAAqB,UAArB,EAAiC,WAAjC,EAA8C,MAA9C,CAAR,CAAnB;AAEA,WAAO;AACH,oDAA8ChB,IAA9C,EAAoD;AAChD,aAAK,MAAMR,QAAX,IAAuBsB,OAAO,CAACG,oBAAR,CAA6BjB,IAA7B,CAAvB,EAA2D;AACvD,cAAIR,QAAQ,CAACM,IAAT,CAAcoB,MAAd,GAAuB,CAAvB,IAA4BH,UAAU,CAACI,GAAX,CAAe3B,QAAQ,CAACC,IAAxB,CAA5B,IAA6D,CAACF,sBAAsB,CAACC,QAAD,CAAxF,EAAoG;AAChGsB,YAAAA,OAAO,CAACM,MAAR,CAAe;AACXpB,cAAAA,IAAI,EAAER,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBL,IADZ;AAEX4B,cAAAA,SAAS,EAAE,yBAFA;AAGXC,cAAAA,IAAI,EAAE;AACF7B,gBAAAA,IAAI,EAAED,QAAQ,CAACC;AADb;AAHK,aAAf;AAOH;AACJ;AACJ;;AAbE,KAAP;AAgBH;;AAtCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\r\n * @author Michael Ficarra\r\n */\r\n\"use strict\";\r\n\r\n/**\r\n * Determines if a variable safely shadows undefined.\r\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\r\n * as the global).\r\n * @param {eslintScope.Variable} variable The variable to check\r\n * @returns {boolean} true if this variable safely shadows `undefined`\r\n */\r\nfunction safelyShadowsUndefined(variable) {\r\n    return variable.name === \"undefined\" &&\r\n        variable.references.every(ref => !ref.isWrite()) &&\r\n        variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow identifiers from shadowing restricted names\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-shadow-restricted-names\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n\r\n        const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\r\n\r\n        return {\r\n            \"VariableDeclaration, :function, CatchClause\"(node) {\r\n                for (const variable of context.getDeclaredVariables(node)) {\r\n                    if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\r\n                        context.report({\r\n                            node: variable.defs[0].name,\r\n                            messageId: \"shadowingRestrictedName\",\r\n                            data: {\r\n                                name: variable.name\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}