{"ast":null,"code":"/**\r\n * @fileoverview Warn when using template string syntax in regular strings\r\n * @author Jeroen Engels\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow template literal placeholder syntax in regular strings\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-template-curly-in-string\"\n    },\n    schema: [],\n    messages: {\n      unexpectedTemplateExpression: \"Unexpected template string expression.\"\n    }\n  },\n\n  create(context) {\n    const regex = /\\$\\{[^}]+\\}/u;\n    return {\n      Literal(node) {\n        if (typeof node.value === \"string\" && regex.test(node.value)) {\n          context.report({\n            node,\n            messageId: \"unexpectedTemplateExpression\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-template-curly-in-string.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpectedTemplateExpression","create","context","regex","Literal","node","value","test","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,iEADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,4BAA4B,EAAE;AADxB;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,KAAK,GAAG,cAAd;AAEA,WAAO;AACHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AACV,YAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAAtB,IAAkCH,KAAK,CAACI,IAAN,CAAWF,IAAI,CAACC,KAAhB,CAAtC,EAA8D;AAC1DJ,UAAAA,OAAO,CAACM,MAAR,CAAe;AACXH,YAAAA,IADW;AAEXI,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AARE,KAAP;AAWH;;AA/BY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Warn when using template string syntax in regular strings\r\n * @author Jeroen Engels\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow template literal placeholder syntax in regular strings\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-template-curly-in-string\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedTemplateExpression: \"Unexpected template string expression.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const regex = /\\$\\{[^}]+\\}/u;\r\n\r\n        return {\r\n            Literal(node) {\r\n                if (typeof node.value === \"string\" && regex.test(node.value)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedTemplateExpression\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}