{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of unnecessary semicolons\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary semicolons\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-extra-semi\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"Unnecessary semicolon.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Reports an unnecessary semicolon error.\r\n     * @param {Node|Token} nodeOrToken A node or a token to be reported.\r\n     * @returns {void}\r\n     */\n\n    function report(nodeOrToken) {\n      context.report({\n        node: nodeOrToken,\n        messageId: \"unexpected\",\n\n        fix(fixer) {\n          /*\r\n           * Expand the replacement range to include the surrounding\r\n           * tokens to avoid conflicting with semi.\r\n           * https://github.com/eslint/eslint/issues/7928\r\n           */\n          return new FixTracker(fixer, context.getSourceCode()).retainSurroundingTokens(nodeOrToken).remove(nodeOrToken);\n        }\n\n      });\n    }\n    /**\r\n     * Checks for a part of a class body.\r\n     * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\r\n     * @param {Token} firstToken The first token to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkForPartOfClassBody(firstToken) {\n      for (let token = firstToken; token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token); token = sourceCode.getTokenAfter(token)) {\n        if (astUtils.isSemicolonToken(token)) {\n          report(token);\n        }\n      }\n    }\n\n    return {\n      /**\r\n       * Reports this empty statement, except if the parent node is a loop.\r\n       * @param {Node} node A EmptyStatement node to be reported.\r\n       * @returns {void}\r\n       */\n      EmptyStatement(node) {\n        const parent = node.parent,\n              allowedParentTypes = [\"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"WhileStatement\", \"DoWhileStatement\", \"IfStatement\", \"LabeledStatement\", \"WithStatement\"];\n\n        if (allowedParentTypes.indexOf(parent.type) === -1) {\n          report(node);\n        }\n      },\n\n      /**\r\n       * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\r\n       * @param {Node} node A ClassBody node to check.\r\n       * @returns {void}\r\n       */\n      ClassBody(node) {\n        checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n      },\n\n      /**\r\n       * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\r\n       * @param {Node} node A MethodDefinition node of the start point.\r\n       * @returns {void}\r\n       */\n      \"MethodDefinition, PropertyDefinition, StaticBlock\"(node) {\n        checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-extra-semi.js"],"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","report","nodeOrToken","node","messageId","fix","fixer","retainSurroundingTokens","remove","checkForPartOfClassBody","firstToken","token","isClosingBraceToken","getTokenAfter","isSemicolonToken","EmptyStatement","parent","allowedParentTypes","indexOf","ClassBody","getFirstToken"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,iCADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,MATP;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASC,MAAT,CAAgBC,WAAhB,EAA6B;AACzBJ,MAAAA,OAAO,CAACG,MAAR,CAAe;AACXE,QAAAA,IAAI,EAAED,WADK;AAEXE,QAAAA,SAAS,EAAE,YAFA;;AAGXC,QAAAA,GAAG,CAACC,KAAD,EAAQ;AAEP;AACpB;AACA;AACA;AACA;AACoB,iBAAO,IAAIxB,UAAJ,CAAewB,KAAf,EAAsBR,OAAO,CAACE,aAAR,EAAtB,EACFO,uBADE,CACsBL,WADtB,EAEFM,MAFE,CAEKN,WAFL,CAAP;AAGH;;AAbU,OAAf;AAeH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASO,uBAAT,CAAiCC,UAAjC,EAA6C;AACzC,WAAK,IAAIC,KAAK,GAAGD,UAAjB,EACIC,KAAK,CAACvB,IAAN,KAAe,YAAf,IAA+B,CAACJ,QAAQ,CAAC4B,mBAAT,CAA6BD,KAA7B,CADpC,EAEIA,KAAK,GAAGZ,UAAU,CAACc,aAAX,CAAyBF,KAAzB,CAFZ,EAGE;AACE,YAAI3B,QAAQ,CAAC8B,gBAAT,CAA0BH,KAA1B,CAAJ,EAAsC;AAClCV,UAAAA,MAAM,CAACU,KAAD,CAAN;AACH;AACJ;AACJ;;AAED,WAAO;AAEH;AACZ;AACA;AACA;AACA;AACYI,MAAAA,cAAc,CAACZ,IAAD,EAAO;AACjB,cAAMa,MAAM,GAAGb,IAAI,CAACa,MAApB;AAAA,cACIC,kBAAkB,GAAG,CACjB,cADiB,EAEjB,gBAFiB,EAGjB,gBAHiB,EAIjB,gBAJiB,EAKjB,kBALiB,EAMjB,aANiB,EAOjB,kBAPiB,EAQjB,eARiB,CADzB;;AAYA,YAAIA,kBAAkB,CAACC,OAAnB,CAA2BF,MAAM,CAAC5B,IAAlC,MAA4C,CAAC,CAAjD,EAAoD;AAChDa,UAAAA,MAAM,CAACE,IAAD,CAAN;AACH;AACJ,OAvBE;;AAyBH;AACZ;AACA;AACA;AACA;AACYgB,MAAAA,SAAS,CAAChB,IAAD,EAAO;AACZM,QAAAA,uBAAuB,CAACV,UAAU,CAACqB,aAAX,CAAyBjB,IAAzB,EAA+B,CAA/B,CAAD,CAAvB,CADY,CACgD;AAC/D,OAhCE;;AAkCH;AACZ;AACA;AACA;AACA;AACY,0DAAoDA,IAApD,EAA0D;AACtDM,QAAAA,uBAAuB,CAACV,UAAU,CAACc,aAAX,CAAyBV,IAAzB,CAAD,CAAvB;AACH;;AAzCE,KAAP;AA4CH;;AAzGY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of unnecessary semicolons\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst FixTracker = require(\"./utils/fix-tracker\");\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow unnecessary semicolons\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\r\n        },\r\n\r\n        fixable: \"code\",\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Unnecessary semicolon.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Reports an unnecessary semicolon error.\r\n         * @param {Node|Token} nodeOrToken A node or a token to be reported.\r\n         * @returns {void}\r\n         */\r\n        function report(nodeOrToken) {\r\n            context.report({\r\n                node: nodeOrToken,\r\n                messageId: \"unexpected\",\r\n                fix(fixer) {\r\n\r\n                    /*\r\n                     * Expand the replacement range to include the surrounding\r\n                     * tokens to avoid conflicting with semi.\r\n                     * https://github.com/eslint/eslint/issues/7928\r\n                     */\r\n                    return new FixTracker(fixer, context.getSourceCode())\r\n                        .retainSurroundingTokens(nodeOrToken)\r\n                        .remove(nodeOrToken);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks for a part of a class body.\r\n         * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\r\n         * @param {Token} firstToken The first token to check.\r\n         * @returns {void}\r\n         */\r\n        function checkForPartOfClassBody(firstToken) {\r\n            for (let token = firstToken;\r\n                token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token);\r\n                token = sourceCode.getTokenAfter(token)\r\n            ) {\r\n                if (astUtils.isSemicolonToken(token)) {\r\n                    report(token);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n\r\n            /**\r\n             * Reports this empty statement, except if the parent node is a loop.\r\n             * @param {Node} node A EmptyStatement node to be reported.\r\n             * @returns {void}\r\n             */\r\n            EmptyStatement(node) {\r\n                const parent = node.parent,\r\n                    allowedParentTypes = [\r\n                        \"ForStatement\",\r\n                        \"ForInStatement\",\r\n                        \"ForOfStatement\",\r\n                        \"WhileStatement\",\r\n                        \"DoWhileStatement\",\r\n                        \"IfStatement\",\r\n                        \"LabeledStatement\",\r\n                        \"WithStatement\"\r\n                    ];\r\n\r\n                if (allowedParentTypes.indexOf(parent.type) === -1) {\r\n                    report(node);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\r\n             * @param {Node} node A ClassBody node to check.\r\n             * @returns {void}\r\n             */\r\n            ClassBody(node) {\r\n                checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\r\n            },\r\n\r\n            /**\r\n             * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\r\n             * @param {Node} node A MethodDefinition node of the start point.\r\n             * @returns {void}\r\n             */\r\n            \"MethodDefinition, PropertyDefinition, StaticBlock\"(node) {\r\n                checkForPartOfClassBody(sourceCode.getTokenAfter(node));\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}