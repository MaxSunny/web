{"ast":null,"code":"/**\r\n * @fileoverview Rule to check for jsdoc presence.\r\n * @author Gyandeep Singh\r\n * @deprecated in ESLint v5.10.0\r\n */\n\"use strict\";\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require JSDoc comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-jsdoc\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        require: {\n          type: \"object\",\n          properties: {\n            ClassDeclaration: {\n              type: \"boolean\",\n              default: false\n            },\n            MethodDefinition: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionDeclaration: {\n              type: \"boolean\",\n              default: true\n            },\n            ArrowFunctionExpression: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionExpression: {\n              type: \"boolean\",\n              default: false\n            }\n          },\n          additionalProperties: false,\n          default: {}\n        }\n      },\n      additionalProperties: false\n    }],\n    deprecated: true,\n    replacedBy: [],\n    messages: {\n      missingJSDocComment: \"Missing JSDoc comment.\"\n    }\n  },\n\n  create(context) {\n    const source = context.getSourceCode();\n    const DEFAULT_OPTIONS = {\n      FunctionDeclaration: true,\n      MethodDefinition: false,\n      ClassDeclaration: false,\n      ArrowFunctionExpression: false,\n      FunctionExpression: false\n    };\n    const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n    /**\r\n     * Report the error message\r\n     * @param {ASTNode} node node to report\r\n     * @returns {void}\r\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"missingJSDocComment\"\n      });\n    }\n    /**\r\n     * Check if the jsdoc comment is present or not.\r\n     * @param {ASTNode} node node to examine\r\n     * @returns {void}\r\n     */\n\n\n    function checkJsDoc(node) {\n      const jsdocComment = source.getJSDocComment(node);\n\n      if (!jsdocComment) {\n        report(node);\n      }\n    }\n\n    return {\n      FunctionDeclaration(node) {\n        if (options.FunctionDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      FunctionExpression(node) {\n        if (options.MethodDefinition && node.parent.type === \"MethodDefinition\" || options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || node.parent.type === \"Property\" && node === node.parent.value)) {\n          checkJsDoc(node);\n        }\n      },\n\n      ClassDeclaration(node) {\n        if (options.ClassDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n          checkJsDoc(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/require-jsdoc.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","require","ClassDeclaration","default","MethodDefinition","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","additionalProperties","deprecated","replacedBy","messages","missingJSDocComment","create","context","source","getSourceCode","DEFAULT_OPTIONS","options","Object","assign","report","node","messageId","checkJsDoc","jsdocComment","getJSDocComment","parent","value"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to check for jsdoc presence.\r\n * @author Gyandeep Singh\r\n * @deprecated in ESLint v5.10.0\r\n */\r\n\"use strict\";\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require JSDoc comments\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/require-jsdoc\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    require: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            ClassDeclaration: {\r\n                                type: \"boolean\",\r\n                                default: false\r\n                            },\r\n                            MethodDefinition: {\r\n                                type: \"boolean\",\r\n                                default: false\r\n                            },\r\n                            FunctionDeclaration: {\r\n                                type: \"boolean\",\r\n                                default: true\r\n                            },\r\n                            ArrowFunctionExpression: {\r\n                                type: \"boolean\",\r\n                                default: false\r\n                            },\r\n                            FunctionExpression: {\r\n                                type: \"boolean\",\r\n                                default: false\r\n                            }\r\n                        },\r\n                        additionalProperties: false,\r\n                        default: {}\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        deprecated: true,\r\n        replacedBy: [],\r\n\r\n        messages: {\r\n            missingJSDocComment: \"Missing JSDoc comment.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const source = context.getSourceCode();\r\n        const DEFAULT_OPTIONS = {\r\n            FunctionDeclaration: true,\r\n            MethodDefinition: false,\r\n            ClassDeclaration: false,\r\n            ArrowFunctionExpression: false,\r\n            FunctionExpression: false\r\n        };\r\n        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\r\n\r\n        /**\r\n         * Report the error message\r\n         * @param {ASTNode} node node to report\r\n         * @returns {void}\r\n         */\r\n        function report(node) {\r\n            context.report({ node, messageId: \"missingJSDocComment\" });\r\n        }\r\n\r\n        /**\r\n         * Check if the jsdoc comment is present or not.\r\n         * @param {ASTNode} node node to examine\r\n         * @returns {void}\r\n         */\r\n        function checkJsDoc(node) {\r\n            const jsdocComment = source.getJSDocComment(node);\r\n\r\n            if (!jsdocComment) {\r\n                report(node);\r\n            }\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration(node) {\r\n                if (options.FunctionDeclaration) {\r\n                    checkJsDoc(node);\r\n                }\r\n            },\r\n            FunctionExpression(node) {\r\n                if (\r\n                    (options.MethodDefinition && node.parent.type === \"MethodDefinition\") ||\r\n                    (options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || (node.parent.type === \"Property\" && node === node.parent.value)))\r\n                ) {\r\n                    checkJsDoc(node);\r\n                }\r\n            },\r\n            ClassDeclaration(node) {\r\n                if (options.ClassDeclaration) {\r\n                    checkJsDoc(node);\r\n                }\r\n            },\r\n            ArrowFunctionExpression(node) {\r\n                if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\r\n                    checkJsDoc(node);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}