{"ast":null,"code":"/**\r\n * @fileoverview Rule to define spacing before/after arrow function's arrow.\r\n * @author Jxck\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before and after the arrow in arrow functions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/arrow-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: true\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expectedBefore: \"Missing space before =>.\",\n      unexpectedBefore: \"Unexpected space before =>.\",\n      expectedAfter: \"Missing space after =>.\",\n      unexpectedAfter: \"Unexpected space after =>.\"\n    }\n  },\n\n  create(context) {\n    // merge rules with default\n    const rule = Object.assign({}, context.options[0]);\n    rule.before = rule.before !== false;\n    rule.after = rule.after !== false;\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Get tokens of arrow(`=>`) and before/after arrow.\r\n     * @param {ASTNode} node The arrow function node.\r\n     * @returns {Object} Tokens of arrow and before/after arrow.\r\n     */\n\n    function getTokens(node) {\n      const arrow = sourceCode.getTokenBefore(node.body, astUtils.isArrowToken);\n      return {\n        before: sourceCode.getTokenBefore(arrow),\n        arrow,\n        after: sourceCode.getTokenAfter(arrow)\n      };\n    }\n    /**\r\n     * Count spaces before/after arrow(`=>`) token.\r\n     * @param {Object} tokens Tokens before/after arrow.\r\n     * @returns {Object} count of space before/after arrow.\r\n     */\n\n\n    function countSpaces(tokens) {\n      const before = tokens.arrow.range[0] - tokens.before.range[1];\n      const after = tokens.after.range[0] - tokens.arrow.range[1];\n      return {\n        before,\n        after\n      };\n    }\n    /**\r\n     * Determines whether space(s) before after arrow(`=>`) is satisfy rule.\r\n     * if before/after value is `true`, there should be space(s).\r\n     * if before/after value is `false`, there should be no space.\r\n     * @param {ASTNode} node The arrow function node.\r\n     * @returns {void}\r\n     */\n\n\n    function spaces(node) {\n      const tokens = getTokens(node);\n      const countSpace = countSpaces(tokens);\n\n      if (rule.before) {\n        // should be space(s) before arrow\n        if (countSpace.before === 0) {\n          context.report({\n            node: tokens.before,\n            messageId: \"expectedBefore\",\n\n            fix(fixer) {\n              return fixer.insertTextBefore(tokens.arrow, \" \");\n            }\n\n          });\n        }\n      } else {\n        // should be no space before arrow\n        if (countSpace.before > 0) {\n          context.report({\n            node: tokens.before,\n            messageId: \"unexpectedBefore\",\n\n            fix(fixer) {\n              return fixer.removeRange([tokens.before.range[1], tokens.arrow.range[0]]);\n            }\n\n          });\n        }\n      }\n\n      if (rule.after) {\n        // should be space(s) after arrow\n        if (countSpace.after === 0) {\n          context.report({\n            node: tokens.after,\n            messageId: \"expectedAfter\",\n\n            fix(fixer) {\n              return fixer.insertTextAfter(tokens.arrow, \" \");\n            }\n\n          });\n        }\n      } else {\n        // should be no space after arrow\n        if (countSpace.after > 0) {\n          context.report({\n            node: tokens.after,\n            messageId: \"unexpectedAfter\",\n\n            fix(fixer) {\n              return fixer.removeRange([tokens.arrow.range[1], tokens.after.range[0]]);\n            }\n\n          });\n        }\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: spaces\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/arrow-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","expectedBefore","unexpectedBefore","expectedAfter","unexpectedAfter","create","context","rule","Object","assign","options","sourceCode","getSourceCode","getTokens","node","arrow","getTokenBefore","body","isArrowToken","getTokenAfter","countSpaces","tokens","range","spaces","countSpace","report","messageId","fix","fixer","insertTextBefore","removeRange","insertTextAfter","ArrowFunctionExpression"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to define spacing before/after arrow function's arrow.\r\n * @author Jxck\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce consistent spacing before and after the arrow in arrow functions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/arrow-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    before: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    },\r\n                    after: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            expectedBefore: \"Missing space before =>.\",\r\n            unexpectedBefore: \"Unexpected space before =>.\",\r\n\r\n            expectedAfter: \"Missing space after =>.\",\r\n            unexpectedAfter: \"Unexpected space after =>.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        // merge rules with default\r\n        const rule = Object.assign({}, context.options[0]);\r\n\r\n        rule.before = rule.before !== false;\r\n        rule.after = rule.after !== false;\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Get tokens of arrow(`=>`) and before/after arrow.\r\n         * @param {ASTNode} node The arrow function node.\r\n         * @returns {Object} Tokens of arrow and before/after arrow.\r\n         */\r\n        function getTokens(node) {\r\n            const arrow = sourceCode.getTokenBefore(node.body, astUtils.isArrowToken);\r\n\r\n            return {\r\n                before: sourceCode.getTokenBefore(arrow),\r\n                arrow,\r\n                after: sourceCode.getTokenAfter(arrow)\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Count spaces before/after arrow(`=>`) token.\r\n         * @param {Object} tokens Tokens before/after arrow.\r\n         * @returns {Object} count of space before/after arrow.\r\n         */\r\n        function countSpaces(tokens) {\r\n            const before = tokens.arrow.range[0] - tokens.before.range[1];\r\n            const after = tokens.after.range[0] - tokens.arrow.range[1];\r\n\r\n            return { before, after };\r\n        }\r\n\r\n        /**\r\n         * Determines whether space(s) before after arrow(`=>`) is satisfy rule.\r\n         * if before/after value is `true`, there should be space(s).\r\n         * if before/after value is `false`, there should be no space.\r\n         * @param {ASTNode} node The arrow function node.\r\n         * @returns {void}\r\n         */\r\n        function spaces(node) {\r\n            const tokens = getTokens(node);\r\n            const countSpace = countSpaces(tokens);\r\n\r\n            if (rule.before) {\r\n\r\n                // should be space(s) before arrow\r\n                if (countSpace.before === 0) {\r\n                    context.report({\r\n                        node: tokens.before,\r\n                        messageId: \"expectedBefore\",\r\n                        fix(fixer) {\r\n                            return fixer.insertTextBefore(tokens.arrow, \" \");\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n\r\n                // should be no space before arrow\r\n                if (countSpace.before > 0) {\r\n                    context.report({\r\n                        node: tokens.before,\r\n                        messageId: \"unexpectedBefore\",\r\n                        fix(fixer) {\r\n                            return fixer.removeRange([tokens.before.range[1], tokens.arrow.range[0]]);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (rule.after) {\r\n\r\n                // should be space(s) after arrow\r\n                if (countSpace.after === 0) {\r\n                    context.report({\r\n                        node: tokens.after,\r\n                        messageId: \"expectedAfter\",\r\n                        fix(fixer) {\r\n                            return fixer.insertTextAfter(tokens.arrow, \" \");\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n\r\n                // should be no space after arrow\r\n                if (countSpace.after > 0) {\r\n                    context.report({\r\n                        node: tokens.after,\r\n                        messageId: \"unexpectedAfter\",\r\n                        fix(fixer) {\r\n                            return fixer.removeRange([tokens.arrow.range[1], tokens.after.range[0]]);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            ArrowFunctionExpression: spaces\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}