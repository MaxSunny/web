{"ast":null,"code":"/**\r\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\r\n * @author Mathias Schreck <https://github.com/lo1tuma>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst QUOTE_SETTINGS = {\n  \"prefer-double\": {\n    quote: \"\\\"\",\n    description: \"singlequote\",\n\n    convert(str) {\n      return str.replace(/'/gu, \"\\\"\");\n    }\n\n  },\n  \"prefer-single\": {\n    quote: \"'\",\n    description: \"doublequote\",\n\n    convert(str) {\n      return str.replace(/\"/gu, \"'\");\n    }\n\n  }\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce the consistent use of either double or single quotes in JSX attributes\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/jsx-quotes\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"prefer-single\", \"prefer-double\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected usage of {{description}}.\"\n    }\n  },\n\n  create(context) {\n    const quoteOption = context.options[0] || \"prefer-double\",\n          setting = QUOTE_SETTINGS[quoteOption];\n    /**\r\n     * Checks if the given string literal node uses the expected quotes\r\n     * @param {ASTNode} node A string literal node.\r\n     * @returns {boolean} Whether or not the string literal used the expected quotes.\r\n     * @public\r\n     */\n\n    function usesExpectedQuotes(node) {\n      return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);\n    }\n\n    return {\n      JSXAttribute(node) {\n        const attributeValue = node.value;\n\n        if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n          context.report({\n            node: attributeValue,\n            messageId: \"unexpected\",\n            data: {\n              description: setting.description\n            },\n\n            fix(fixer) {\n              return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/jsx-quotes.js"],"names":["astUtils","require","QUOTE_SETTINGS","quote","description","convert","str","replace","module","exports","meta","type","docs","recommended","url","fixable","schema","enum","messages","unexpected","create","context","quoteOption","options","setting","usesExpectedQuotes","node","value","indexOf","isSurroundedBy","raw","JSXAttribute","attributeValue","isStringLiteral","report","messageId","data","fix","fixer","replaceText"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG;AACnB,mBAAiB;AACbC,IAAAA,KAAK,EAAE,IADM;AAEbC,IAAAA,WAAW,EAAE,aAFA;;AAGbC,IAAAA,OAAO,CAACC,GAAD,EAAM;AACT,aAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAAP;AACH;;AALY,GADE;AAQnB,mBAAiB;AACbJ,IAAAA,KAAK,EAAE,GADM;AAEbC,IAAAA,WAAW,EAAE,aAFA;;AAGbC,IAAAA,OAAO,CAACC,GAAD,EAAM;AACT,aAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,CAAP;AACH;;AALY;AARE,CAAvB,C,CAiBA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFR,MAAAA,WAAW,EAAE,gFADX;AAEFS,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,YATP;AAWFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,eAAlB;AADV,KADI,CAXN;AAgBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAhBR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,WAAW,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,eAA1C;AAAA,UACIC,OAAO,GAAGtB,cAAc,CAACoB,WAAD,CAD5B;AAGA;AACR;AACA;AACA;AACA;AACA;;AACQ,aAASG,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,aAAOA,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBJ,OAAO,CAACrB,KAA3B,MAAsC,CAAC,CAAvC,IAA4CH,QAAQ,CAAC6B,cAAT,CAAwBH,IAAI,CAACI,GAA7B,EAAkCN,OAAO,CAACrB,KAA1C,CAAnD;AACH;;AAED,WAAO;AACH4B,MAAAA,YAAY,CAACL,IAAD,EAAO;AACf,cAAMM,cAAc,GAAGN,IAAI,CAACC,KAA5B;;AAEA,YAAIK,cAAc,IAAIhC,QAAQ,CAACiC,eAAT,CAAyBD,cAAzB,CAAlB,IAA8D,CAACP,kBAAkB,CAACO,cAAD,CAArF,EAAuG;AACnGX,UAAAA,OAAO,CAACa,MAAR,CAAe;AACXR,YAAAA,IAAI,EAAEM,cADK;AAEXG,YAAAA,SAAS,EAAE,YAFA;AAGXC,YAAAA,IAAI,EAAE;AACFhC,cAAAA,WAAW,EAAEoB,OAAO,CAACpB;AADnB,aAHK;;AAMXiC,YAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,qBAAOA,KAAK,CAACC,WAAN,CAAkBP,cAAlB,EAAkCR,OAAO,CAACnB,OAAR,CAAgB2B,cAAc,CAACF,GAA/B,CAAlC,CAAP;AACH;;AARU,WAAf;AAUH;AACJ;;AAhBE,KAAP;AAkBH;;AAtDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\r\n * @author Mathias Schreck <https://github.com/lo1tuma>\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Constants\r\n//------------------------------------------------------------------------------\r\n\r\nconst QUOTE_SETTINGS = {\r\n    \"prefer-double\": {\r\n        quote: \"\\\"\",\r\n        description: \"singlequote\",\r\n        convert(str) {\r\n            return str.replace(/'/gu, \"\\\"\");\r\n        }\r\n    },\r\n    \"prefer-single\": {\r\n        quote: \"'\",\r\n        description: \"doublequote\",\r\n        convert(str) {\r\n            return str.replace(/\"/gu, \"'\");\r\n        }\r\n    }\r\n};\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce the consistent use of either double or single quotes in JSX attributes\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/jsx-quotes\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"prefer-single\", \"prefer-double\"]\r\n            }\r\n        ],\r\n        messages: {\r\n            unexpected: \"Unexpected usage of {{description}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const quoteOption = context.options[0] || \"prefer-double\",\r\n            setting = QUOTE_SETTINGS[quoteOption];\r\n\r\n        /**\r\n         * Checks if the given string literal node uses the expected quotes\r\n         * @param {ASTNode} node A string literal node.\r\n         * @returns {boolean} Whether or not the string literal used the expected quotes.\r\n         * @public\r\n         */\r\n        function usesExpectedQuotes(node) {\r\n            return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);\r\n        }\r\n\r\n        return {\r\n            JSXAttribute(node) {\r\n                const attributeValue = node.value;\r\n\r\n                if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\r\n                    context.report({\r\n                        node: attributeValue,\r\n                        messageId: \"unexpected\",\r\n                        data: {\r\n                            description: setting.description\r\n                        },\r\n                        fix(fixer) {\r\n                            return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}