{"ast":null,"code":"/**\r\n * @fileoverview A rule to warn against using arrow functions when they could be\r\n * confused with comparisons\r\n * @author Jxck <https://github.com/Jxck>\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils.js\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks whether or not a node is a conditional expression.\r\n * @param {ASTNode} node node to test\r\n * @returns {boolean} `true` if the node is a conditional expression.\r\n */\n\n\nfunction isConditional(node) {\n  return node && node.type === \"ConditionalExpression\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow arrow functions where they could be confused with comparisons\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-confusing-arrow\"\n    },\n    fixable: \"code\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowParens: {\n          type: \"boolean\",\n          default: true\n        },\n        onlyOneSimpleParam: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      confusing: \"Arrow function used ambiguously with a conditional expression.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowParens = config.allowParens || config.allowParens === void 0;\n    const onlyOneSimpleParam = config.onlyOneSimpleParam;\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Reports if an arrow function contains an ambiguous conditional.\r\n     * @param {ASTNode} node A node to check and report.\r\n     * @returns {void}\r\n     */\n\n    function checkArrowFunc(node) {\n      const body = node.body;\n\n      if (isConditional(body) && !(allowParens && astUtils.isParenthesised(sourceCode, body)) && !(onlyOneSimpleParam && !(node.params.length === 1 && node.params[0].type === \"Identifier\"))) {\n        context.report({\n          node,\n          messageId: \"confusing\",\n\n          fix(fixer) {\n            // if `allowParens` is not set to true don't bother wrapping in parens\n            return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\n          }\n\n        });\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: checkArrowFunc\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-confusing-arrow.js"],"names":["astUtils","require","isConditional","node","type","module","exports","meta","docs","description","recommended","url","fixable","schema","properties","allowParens","default","onlyOneSimpleParam","additionalProperties","messages","confusing","create","context","config","options","sourceCode","getSourceCode","checkArrowFunc","body","isParenthesised","params","length","report","messageId","fix","fixer","replaceText","getText","ArrowFunctionExpression"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAOA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,uBAA7B;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFH,IAAAA,IAAI,EAAE,YADJ;AAGFI,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wEADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,MATP;AAWFC,IAAAA,MAAM,EAAE,CAAC;AACLT,MAAAA,IAAI,EAAE,QADD;AAELU,MAAAA,UAAU,EAAE;AACRC,QAAAA,WAAW,EAAE;AAAEX,UAAAA,IAAI,EAAE,SAAR;AAAmBY,UAAAA,OAAO,EAAE;AAA5B,SADL;AAERC,QAAAA,kBAAkB,EAAE;AAAEb,UAAAA,IAAI,EAAE,SAAR;AAAmBY,UAAAA,OAAO,EAAE;AAA5B;AAFZ,OAFP;AAMLE,MAAAA,oBAAoB,EAAE;AANjB,KAAD,CAXN;AAoBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,SAAS,EAAE;AADL;AApBR,GADO;;AA0BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAArC;AACA,UAAMT,WAAW,GAAGQ,MAAM,CAACR,WAAP,IAAuBQ,MAAM,CAACR,WAAP,KAAuB,KAAK,CAAvE;AACA,UAAME,kBAAkB,GAAGM,MAAM,CAACN,kBAAlC;AACA,UAAMQ,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AAGA;AACR;AACA;AACA;AACA;;AACQ,aAASC,cAAT,CAAwBxB,IAAxB,EAA8B;AAC1B,YAAMyB,IAAI,GAAGzB,IAAI,CAACyB,IAAlB;;AAEA,UAAI1B,aAAa,CAAC0B,IAAD,CAAb,IACA,EAAEb,WAAW,IAAIf,QAAQ,CAAC6B,eAAT,CAAyBJ,UAAzB,EAAqCG,IAArC,CAAjB,CADA,IAEA,EAAEX,kBAAkB,IAAI,EAAEd,IAAI,CAAC2B,MAAL,CAAYC,MAAZ,KAAuB,CAAvB,IAA4B5B,IAAI,CAAC2B,MAAL,CAAY,CAAZ,EAAe1B,IAAf,KAAwB,YAAtD,CAAxB,CAFJ,EAEkG;AAC9FkB,QAAAA,OAAO,CAACU,MAAR,CAAe;AACX7B,UAAAA,IADW;AAEX8B,UAAAA,SAAS,EAAE,WAFA;;AAGXC,UAAAA,GAAG,CAACC,KAAD,EAAQ;AAEP;AACA,mBAAOpB,WAAW,IAAIoB,KAAK,CAACC,WAAN,CAAkBjC,IAAI,CAACyB,IAAvB,EAA8B,IAAGH,UAAU,CAACY,OAAX,CAAmBlC,IAAI,CAACyB,IAAxB,CAA8B,GAA/D,CAAtB;AACH;;AAPU,SAAf;AASH;AACJ;;AAED,WAAO;AACHU,MAAAA,uBAAuB,EAAEX;AADtB,KAAP;AAGH;;AA3DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview A rule to warn against using arrow functions when they could be\r\n * confused with comparisons\r\n * @author Jxck <https://github.com/Jxck>\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils.js\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks whether or not a node is a conditional expression.\r\n * @param {ASTNode} node node to test\r\n * @returns {boolean} `true` if the node is a conditional expression.\r\n */\r\nfunction isConditional(node) {\r\n    return node && node.type === \"ConditionalExpression\";\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow arrow functions where they could be confused with comparisons\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-confusing-arrow\"\r\n        },\r\n\r\n        fixable: \"code\",\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                allowParens: { type: \"boolean\", default: true },\r\n                onlyOneSimpleParam: { type: \"boolean\", default: false }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            confusing: \"Arrow function used ambiguously with a conditional expression.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const config = context.options[0] || {};\r\n        const allowParens = config.allowParens || (config.allowParens === void 0);\r\n        const onlyOneSimpleParam = config.onlyOneSimpleParam;\r\n        const sourceCode = context.getSourceCode();\r\n\r\n\r\n        /**\r\n         * Reports if an arrow function contains an ambiguous conditional.\r\n         * @param {ASTNode} node A node to check and report.\r\n         * @returns {void}\r\n         */\r\n        function checkArrowFunc(node) {\r\n            const body = node.body;\r\n\r\n            if (isConditional(body) &&\r\n                !(allowParens && astUtils.isParenthesised(sourceCode, body)) &&\r\n                !(onlyOneSimpleParam && !(node.params.length === 1 && node.params[0].type === \"Identifier\"))) {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"confusing\",\r\n                    fix(fixer) {\r\n\r\n                        // if `allowParens` is not set to true don't bother wrapping in parens\r\n                        return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            ArrowFunctionExpression: checkArrowFunc\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}