{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of duplicate keys in an object.\r\n * @author Ian Christian Myers\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst GET_KIND = /^(?:init|get)$/u;\nconst SET_KIND = /^(?:init|set)$/u;\n/**\r\n * The class which stores properties' information of an object.\r\n */\n\nclass ObjectInfo {\n  /**\r\n   * @param {ObjectInfo|null} upper The information of the outer object.\r\n   * @param {ASTNode} node The ObjectExpression node of this information.\r\n   */\n  constructor(upper, node) {\n    this.upper = upper;\n    this.node = node;\n    this.properties = new Map();\n  }\n  /**\r\n   * Gets the information of the given Property node.\r\n   * @param {ASTNode} node The Property node to get.\r\n   * @returns {{get: boolean, set: boolean}} The information of the property.\r\n   */\n\n\n  getPropertyInfo(node) {\n    const name = astUtils.getStaticPropertyName(node);\n\n    if (!this.properties.has(name)) {\n      this.properties.set(name, {\n        get: false,\n        set: false\n      });\n    }\n\n    return this.properties.get(name);\n  }\n  /**\r\n   * Checks whether the given property has been defined already or not.\r\n   * @param {ASTNode} node The Property node to check.\r\n   * @returns {boolean} `true` if the property has been defined.\r\n   */\n\n\n  isPropertyDefined(node) {\n    const entry = this.getPropertyInfo(node);\n    return GET_KIND.test(node.kind) && entry.get || SET_KIND.test(node.kind) && entry.set;\n  }\n  /**\r\n   * Defines the given property.\r\n   * @param {ASTNode} node The Property node to define.\r\n   * @returns {void}\r\n   */\n\n\n  defineProperty(node) {\n    const entry = this.getPropertyInfo(node);\n\n    if (GET_KIND.test(node.kind)) {\n      entry.get = true;\n    }\n\n    if (SET_KIND.test(node.kind)) {\n      entry.set = true;\n    }\n  }\n\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate keys in object literals\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-keys\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate key '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    let info = null;\n    return {\n      ObjectExpression(node) {\n        info = new ObjectInfo(info, node);\n      },\n\n      \"ObjectExpression:exit\"() {\n        info = info.upper;\n      },\n\n      Property(node) {\n        const name = astUtils.getStaticPropertyName(node); // Skip destructuring.\n\n        if (node.parent.type !== \"ObjectExpression\") {\n          return;\n        } // Skip if the name is not static.\n\n\n        if (name === null) {\n          return;\n        } // Reports if the name is defined already.\n\n\n        if (info.isPropertyDefined(node)) {\n          context.report({\n            node: info.node,\n            loc: node.key.loc,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        } // Update info.\n\n\n        info.defineProperty(node);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-dupe-keys.js"],"names":["astUtils","require","GET_KIND","SET_KIND","ObjectInfo","constructor","upper","node","properties","Map","getPropertyInfo","name","getStaticPropertyName","has","set","get","isPropertyDefined","entry","test","kind","defineProperty","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","info","ObjectExpression","Property","parent","report","loc","key","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,QAAQ,GAAG,iBAAjB;AACA,MAAMC,QAAQ,GAAG,iBAAjB;AAEA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;AAEb;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc;AACrB,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACH,IAAD,EAAO;AAClB,UAAMI,IAAI,GAAGX,QAAQ,CAACY,qBAAT,CAA+BL,IAA/B,CAAb;;AAEA,QAAI,CAAC,KAAKC,UAAL,CAAgBK,GAAhB,CAAoBF,IAApB,CAAL,EAAgC;AAC5B,WAAKH,UAAL,CAAgBM,GAAhB,CAAoBH,IAApB,EAA0B;AAAEI,QAAAA,GAAG,EAAE,KAAP;AAAcD,QAAAA,GAAG,EAAE;AAAnB,OAA1B;AACH;;AACD,WAAO,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,iBAAiB,CAACT,IAAD,EAAO;AACpB,UAAMU,KAAK,GAAG,KAAKP,eAAL,CAAqBH,IAArB,CAAd;AAEA,WACKL,QAAQ,CAACgB,IAAT,CAAcX,IAAI,CAACY,IAAnB,KAA4BF,KAAK,CAACF,GAAnC,IACCZ,QAAQ,CAACe,IAAT,CAAcX,IAAI,CAACY,IAAnB,KAA4BF,KAAK,CAACH,GAFvC;AAIH;AAED;AACJ;AACA;AACA;AACA;;;AACIM,EAAAA,cAAc,CAACb,IAAD,EAAO;AACjB,UAAMU,KAAK,GAAG,KAAKP,eAAL,CAAqBH,IAArB,CAAd;;AAEA,QAAIL,QAAQ,CAACgB,IAAT,CAAcX,IAAI,CAACY,IAAnB,CAAJ,EAA8B;AAC1BF,MAAAA,KAAK,CAACF,GAAN,GAAY,IAAZ;AACH;;AACD,QAAIZ,QAAQ,CAACe,IAAT,CAAcX,IAAI,CAACY,IAAnB,CAAJ,EAA8B;AAC1BF,MAAAA,KAAK,CAACH,GAAN,GAAY,IAAZ;AACH;AACJ;;AAtDY,C,CAyDjB;AACA;AACA;;AAEA;;;AACAO,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,4CADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,QAAIC,IAAI,GAAG,IAAX;AAEA,WAAO;AACHC,MAAAA,gBAAgB,CAAC5B,IAAD,EAAO;AACnB2B,QAAAA,IAAI,GAAG,IAAI9B,UAAJ,CAAe8B,IAAf,EAAqB3B,IAArB,CAAP;AACH,OAHE;;AAIH,gCAA0B;AACtB2B,QAAAA,IAAI,GAAGA,IAAI,CAAC5B,KAAZ;AACH,OANE;;AAQH8B,MAAAA,QAAQ,CAAC7B,IAAD,EAAO;AACX,cAAMI,IAAI,GAAGX,QAAQ,CAACY,qBAAT,CAA+BL,IAA/B,CAAb,CADW,CAGX;;AACA,YAAIA,IAAI,CAAC8B,MAAL,CAAYb,IAAZ,KAAqB,kBAAzB,EAA6C;AACzC;AACH,SANU,CAQX;;;AACA,YAAIb,IAAI,KAAK,IAAb,EAAmB;AACf;AACH,SAXU,CAaX;;;AACA,YAAIuB,IAAI,CAAClB,iBAAL,CAAuBT,IAAvB,CAAJ,EAAkC;AAC9B0B,UAAAA,OAAO,CAACK,MAAR,CAAe;AACX/B,YAAAA,IAAI,EAAE2B,IAAI,CAAC3B,IADA;AAEXgC,YAAAA,GAAG,EAAEhC,IAAI,CAACiC,GAAL,CAASD,GAFH;AAGXE,YAAAA,SAAS,EAAE,YAHA;AAIXC,YAAAA,IAAI,EAAE;AAAE/B,cAAAA;AAAF;AAJK,WAAf;AAMH,SArBU,CAuBX;;;AACAuB,QAAAA,IAAI,CAACd,cAAL,CAAoBb,IAApB;AACH;;AAjCE,KAAP;AAmCH;;AAvDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of duplicate keys in an object.\r\n * @author Ian Christian Myers\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst GET_KIND = /^(?:init|get)$/u;\r\nconst SET_KIND = /^(?:init|set)$/u;\r\n\r\n/**\r\n * The class which stores properties' information of an object.\r\n */\r\nclass ObjectInfo {\r\n\r\n    /**\r\n     * @param {ObjectInfo|null} upper The information of the outer object.\r\n     * @param {ASTNode} node The ObjectExpression node of this information.\r\n     */\r\n    constructor(upper, node) {\r\n        this.upper = upper;\r\n        this.node = node;\r\n        this.properties = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the information of the given Property node.\r\n     * @param {ASTNode} node The Property node to get.\r\n     * @returns {{get: boolean, set: boolean}} The information of the property.\r\n     */\r\n    getPropertyInfo(node) {\r\n        const name = astUtils.getStaticPropertyName(node);\r\n\r\n        if (!this.properties.has(name)) {\r\n            this.properties.set(name, { get: false, set: false });\r\n        }\r\n        return this.properties.get(name);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the given property has been defined already or not.\r\n     * @param {ASTNode} node The Property node to check.\r\n     * @returns {boolean} `true` if the property has been defined.\r\n     */\r\n    isPropertyDefined(node) {\r\n        const entry = this.getPropertyInfo(node);\r\n\r\n        return (\r\n            (GET_KIND.test(node.kind) && entry.get) ||\r\n            (SET_KIND.test(node.kind) && entry.set)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines the given property.\r\n     * @param {ASTNode} node The Property node to define.\r\n     * @returns {void}\r\n     */\r\n    defineProperty(node) {\r\n        const entry = this.getPropertyInfo(node);\r\n\r\n        if (GET_KIND.test(node.kind)) {\r\n            entry.get = true;\r\n        }\r\n        if (SET_KIND.test(node.kind)) {\r\n            entry.set = true;\r\n        }\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow duplicate keys in object literals\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-dupe-keys\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Duplicate key '{{name}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        let info = null;\r\n\r\n        return {\r\n            ObjectExpression(node) {\r\n                info = new ObjectInfo(info, node);\r\n            },\r\n            \"ObjectExpression:exit\"() {\r\n                info = info.upper;\r\n            },\r\n\r\n            Property(node) {\r\n                const name = astUtils.getStaticPropertyName(node);\r\n\r\n                // Skip destructuring.\r\n                if (node.parent.type !== \"ObjectExpression\") {\r\n                    return;\r\n                }\r\n\r\n                // Skip if the name is not static.\r\n                if (name === null) {\r\n                    return;\r\n                }\r\n\r\n                // Reports if the name is defined already.\r\n                if (info.isPropertyDefined(node)) {\r\n                    context.report({\r\n                        node: info.node,\r\n                        loc: node.key.loc,\r\n                        messageId: \"unexpected\",\r\n                        data: { name }\r\n                    });\r\n                }\r\n\r\n                // Update info.\r\n                info.defineProperty(node);\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}