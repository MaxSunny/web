{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require parenthesis around regex literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/wrap-regex\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node),\n              nodeType = token.type;\n\n        if (nodeType === \"RegularExpression\") {\n          const beforeToken = sourceCode.getTokenBefore(node);\n          const afterToken = sourceCode.getTokenAfter(node);\n          const ancestors = context.getAncestors();\n          const grandparent = ancestors[ancestors.length - 1];\n\n          if (grandparent.type === \"MemberExpression\" && grandparent.object === node && !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n            context.report({\n              node,\n              messageId: \"requireParens\",\n              fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/wrap-regex.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","fixable","messages","requireParens","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","nodeType","beforeToken","getTokenBefore","afterToken","getTokenAfter","ancestors","getAncestors","grandparent","length","object","value","report","messageId","fix","fixer","replaceText","getText"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2CADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAUFC,IAAAA,OAAO,EAAE,MAVP;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,aAAa,EAAE;AADT;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA,WAAO;AAEHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AACV,cAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAX,CAAyBF,IAAzB,CAAd;AAAA,cACIG,QAAQ,GAAGF,KAAK,CAACf,IADrB;;AAGA,YAAIiB,QAAQ,KAAK,mBAAjB,EAAsC;AAClC,gBAAMC,WAAW,GAAGP,UAAU,CAACQ,cAAX,CAA0BL,IAA1B,CAApB;AACA,gBAAMM,UAAU,GAAGT,UAAU,CAACU,aAAX,CAAyBP,IAAzB,CAAnB;AACA,gBAAMQ,SAAS,GAAGZ,OAAO,CAACa,YAAR,EAAlB;AACA,gBAAMC,WAAW,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAA7B;;AAEA,cAAID,WAAW,CAACxB,IAAZ,KAAqB,kBAArB,IAA2CwB,WAAW,CAACE,MAAZ,KAAuBZ,IAAlE,IACA,EAAEI,WAAW,IAAIA,WAAW,CAACS,KAAZ,KAAsB,GAArC,IAA4CP,UAA5C,IAA0DA,UAAU,CAACO,KAAX,KAAqB,GAAjF,CADJ,EAC2F;AACvFjB,YAAAA,OAAO,CAACkB,MAAR,CAAe;AACXd,cAAAA,IADW;AAEXe,cAAAA,SAAS,EAAE,eAFA;AAGXC,cAAAA,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBlB,IAAlB,EAAyB,IAAGH,UAAU,CAACsB,OAAX,CAAmBnB,IAAnB,CAAyB,GAArD;AAHH,aAAf;AAKH;AACJ;AACJ;;AArBE,KAAP;AAwBH;;AA7CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"require parenthesis around regex literals\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/wrap-regex\"\r\n        },\r\n\r\n        schema: [],\r\n        fixable: \"code\",\r\n\r\n        messages: {\r\n            requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n\r\n            Literal(node) {\r\n                const token = sourceCode.getFirstToken(node),\r\n                    nodeType = token.type;\r\n\r\n                if (nodeType === \"RegularExpression\") {\r\n                    const beforeToken = sourceCode.getTokenBefore(node);\r\n                    const afterToken = sourceCode.getTokenAfter(node);\r\n                    const ancestors = context.getAncestors();\r\n                    const grandparent = ancestors[ancestors.length - 1];\r\n\r\n                    if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\r\n                        !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"requireParens\",\r\n                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}