{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow unnecessary labels\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary labels\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-label\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpected: \"This label '{{name}}' is unnecessary.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\r\n     * Creates a new scope with a breakable statement.\r\n     * @param {ASTNode} node A node to create. This is a BreakableStatement.\r\n     * @returns {void}\r\n     */\n\n    function enterBreakableStatement(node) {\n      scopeInfo = {\n        label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\n        breakable: true,\n        upper: scopeInfo\n      };\n    }\n    /**\r\n     * Removes the top scope of the stack.\r\n     * @returns {void}\r\n     */\n\n\n    function exitBreakableStatement() {\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\r\n     * Creates a new scope with a labeled statement.\r\n     *\r\n     * This ignores it if the body is a breakable statement.\r\n     * In this case it's handled in the `enterBreakableStatement` function.\r\n     * @param {ASTNode} node A node to create. This is a LabeledStatement.\r\n     * @returns {void}\r\n     */\n\n\n    function enterLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = {\n          label: node.label,\n          breakable: false,\n          upper: scopeInfo\n        };\n      }\n    }\n    /**\r\n     * Removes the top scope of the stack.\r\n     *\r\n     * This ignores it if the body is a breakable statement.\r\n     * In this case it's handled in the `exitBreakableStatement` function.\r\n     * @param {ASTNode} node A node. This is a LabeledStatement.\r\n     * @returns {void}\r\n     */\n\n\n    function exitLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = scopeInfo.upper;\n      }\n    }\n    /**\r\n     * Reports a given control node if it's unnecessary.\r\n     * @param {ASTNode} node A node. This is a BreakStatement or a\r\n     *      ContinueStatement.\r\n     * @returns {void}\r\n     */\n\n\n    function reportIfUnnecessary(node) {\n      if (!node.label) {\n        return;\n      }\n\n      const labelNode = node.label;\n\n      for (let info = scopeInfo; info !== null; info = info.upper) {\n        if (info.breakable || info.label && info.label.name === labelNode.name) {\n          if (info.breakable && info.label && info.label.name === labelNode.name) {\n            context.report({\n              node: labelNode,\n              messageId: \"unexpected\",\n              data: labelNode,\n\n              fix(fixer) {\n                const breakOrContinueToken = sourceCode.getFirstToken(node);\n\n                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\n                  return null;\n                }\n\n                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\n              }\n\n            });\n          }\n\n          return;\n        }\n      }\n    }\n\n    return {\n      WhileStatement: enterBreakableStatement,\n      \"WhileStatement:exit\": exitBreakableStatement,\n      DoWhileStatement: enterBreakableStatement,\n      \"DoWhileStatement:exit\": exitBreakableStatement,\n      ForStatement: enterBreakableStatement,\n      \"ForStatement:exit\": exitBreakableStatement,\n      ForInStatement: enterBreakableStatement,\n      \"ForInStatement:exit\": exitBreakableStatement,\n      ForOfStatement: enterBreakableStatement,\n      \"ForOfStatement:exit\": exitBreakableStatement,\n      SwitchStatement: enterBreakableStatement,\n      \"SwitchStatement:exit\": exitBreakableStatement,\n      LabeledStatement: enterLabeledStatement,\n      \"LabeledStatement:exit\": exitLabeledStatement,\n      BreakStatement: reportIfUnnecessary,\n      ContinueStatement: reportIfUnnecessary\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-extra-label.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","fixable","messages","unexpected","create","context","sourceCode","getSourceCode","scopeInfo","enterBreakableStatement","node","label","parent","breakable","upper","exitBreakableStatement","enterLabeledStatement","isBreakableStatement","body","exitLabeledStatement","reportIfUnnecessary","labelNode","info","name","report","messageId","data","fix","fixer","breakOrContinueToken","getFirstToken","commentsExistBetween","removeRange","range","WhileStatement","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement","LabeledStatement","BreakStatement","ContinueStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow unnecessary labels\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow unnecessary labels\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-extra-label\"\r\n        },\r\n\r\n        schema: [],\r\n        fixable: \"code\",\r\n\r\n        messages: {\r\n            unexpected: \"This label '{{name}}' is unnecessary.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        let scopeInfo = null;\r\n\r\n        /**\r\n         * Creates a new scope with a breakable statement.\r\n         * @param {ASTNode} node A node to create. This is a BreakableStatement.\r\n         * @returns {void}\r\n         */\r\n        function enterBreakableStatement(node) {\r\n            scopeInfo = {\r\n                label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\r\n                breakable: true,\r\n                upper: scopeInfo\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Removes the top scope of the stack.\r\n         * @returns {void}\r\n         */\r\n        function exitBreakableStatement() {\r\n            scopeInfo = scopeInfo.upper;\r\n        }\r\n\r\n        /**\r\n         * Creates a new scope with a labeled statement.\r\n         *\r\n         * This ignores it if the body is a breakable statement.\r\n         * In this case it's handled in the `enterBreakableStatement` function.\r\n         * @param {ASTNode} node A node to create. This is a LabeledStatement.\r\n         * @returns {void}\r\n         */\r\n        function enterLabeledStatement(node) {\r\n            if (!astUtils.isBreakableStatement(node.body)) {\r\n                scopeInfo = {\r\n                    label: node.label,\r\n                    breakable: false,\r\n                    upper: scopeInfo\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Removes the top scope of the stack.\r\n         *\r\n         * This ignores it if the body is a breakable statement.\r\n         * In this case it's handled in the `exitBreakableStatement` function.\r\n         * @param {ASTNode} node A node. This is a LabeledStatement.\r\n         * @returns {void}\r\n         */\r\n        function exitLabeledStatement(node) {\r\n            if (!astUtils.isBreakableStatement(node.body)) {\r\n                scopeInfo = scopeInfo.upper;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reports a given control node if it's unnecessary.\r\n         * @param {ASTNode} node A node. This is a BreakStatement or a\r\n         *      ContinueStatement.\r\n         * @returns {void}\r\n         */\r\n        function reportIfUnnecessary(node) {\r\n            if (!node.label) {\r\n                return;\r\n            }\r\n\r\n            const labelNode = node.label;\r\n\r\n            for (let info = scopeInfo; info !== null; info = info.upper) {\r\n                if (info.breakable || info.label && info.label.name === labelNode.name) {\r\n                    if (info.breakable && info.label && info.label.name === labelNode.name) {\r\n                        context.report({\r\n                            node: labelNode,\r\n                            messageId: \"unexpected\",\r\n                            data: labelNode,\r\n                            fix(fixer) {\r\n                                const breakOrContinueToken = sourceCode.getFirstToken(node);\r\n\r\n                                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\r\n                                    return null;\r\n                                }\r\n\r\n                                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\r\n                            }\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            WhileStatement: enterBreakableStatement,\r\n            \"WhileStatement:exit\": exitBreakableStatement,\r\n            DoWhileStatement: enterBreakableStatement,\r\n            \"DoWhileStatement:exit\": exitBreakableStatement,\r\n            ForStatement: enterBreakableStatement,\r\n            \"ForStatement:exit\": exitBreakableStatement,\r\n            ForInStatement: enterBreakableStatement,\r\n            \"ForInStatement:exit\": exitBreakableStatement,\r\n            ForOfStatement: enterBreakableStatement,\r\n            \"ForOfStatement:exit\": exitBreakableStatement,\r\n            SwitchStatement: enterBreakableStatement,\r\n            \"SwitchStatement:exit\": exitBreakableStatement,\r\n            LabeledStatement: enterLabeledStatement,\r\n            \"LabeledStatement:exit\": exitLabeledStatement,\r\n            BreakStatement: reportIfUnnecessary,\r\n            ContinueStatement: reportIfUnnecessary\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}