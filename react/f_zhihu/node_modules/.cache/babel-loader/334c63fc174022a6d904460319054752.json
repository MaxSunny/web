{"ast":null,"code":"/**\r\n * @fileoverview require default case in switch statements\r\n * @author Aliaksei Shytkin\r\n */\n\"use strict\";\n\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `default` cases in `switch` statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/default-case\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        commentPattern: {\n          type: \"string\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingDefaultCase: \"Expected a default case.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const commentPattern = options.commentPattern ? new RegExp(options.commentPattern, \"u\") : DEFAULT_COMMENT_PATTERN;\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Shortcut to get last element of array\r\n     * @param {*[]} collection Array\r\n     * @returns {any} Last element\r\n     */\n\n    function last(collection) {\n      return collection[collection.length - 1];\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      SwitchStatement(node) {\n        if (!node.cases.length) {\n          /*\r\n           * skip check of empty switch because there is no easy way\r\n           * to extract comments inside it now\r\n           */\n          return;\n        }\n\n        const hasDefault = node.cases.some(v => v.test === null);\n\n        if (!hasDefault) {\n          let comment;\n          const lastCase = last(node.cases);\n          const comments = sourceCode.getCommentsAfter(lastCase);\n\n          if (comments.length) {\n            comment = last(comments);\n          }\n\n          if (!comment || !commentPattern.test(comment.value.trim())) {\n            context.report({\n              node,\n              messageId: \"missingDefaultCase\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/default-case.js"],"names":["DEFAULT_COMMENT_PATTERN","module","exports","meta","type","docs","description","recommended","url","schema","properties","commentPattern","additionalProperties","messages","missingDefaultCase","create","context","options","RegExp","sourceCode","getSourceCode","last","collection","length","SwitchStatement","node","cases","hasDefault","some","v","test","comment","lastCase","comments","getCommentsAfter","value","trim","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,uBAAuB,GAAG,gBAAhC,C,CAEA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CAAC;AACLL,MAAAA,IAAI,EAAE,QADD;AAELM,MAAAA,UAAU,EAAE;AACRC,QAAAA,cAAc,EAAE;AACZP,UAAAA,IAAI,EAAE;AADM;AADR,OAFP;AAOLQ,MAAAA,oBAAoB,EAAE;AAPjB,KAAD,CATN;AAmBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,kBAAkB,EAAE;AADd;AAnBR,GADO;;AAyBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;AACA,UAAMN,cAAc,GAAGM,OAAO,CAACN,cAAR,GACjB,IAAIO,MAAJ,CAAWD,OAAO,CAACN,cAAnB,EAAmC,GAAnC,CADiB,GAEjBX,uBAFN;AAIA,UAAMmB,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB,CANY,CAQZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASC,IAAT,CAAcC,UAAd,EAA0B;AACtB,aAAOA,UAAU,CAACA,UAAU,CAACC,MAAX,GAAoB,CAArB,CAAjB;AACH,KAnBW,CAqBZ;AACA;AACA;;;AAEA,WAAO;AAEHC,MAAAA,eAAe,CAACC,IAAD,EAAO;AAElB,YAAI,CAACA,IAAI,CAACC,KAAL,CAAWH,MAAhB,EAAwB;AAEpB;AACpB;AACA;AACA;AACoB;AACH;;AAED,cAAMI,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,IAAhC,CAAnB;;AAEA,YAAI,CAACH,UAAL,EAAiB;AAEb,cAAII,OAAJ;AAEA,gBAAMC,QAAQ,GAAGX,IAAI,CAACI,IAAI,CAACC,KAAN,CAArB;AACA,gBAAMO,QAAQ,GAAGd,UAAU,CAACe,gBAAX,CAA4BF,QAA5B,CAAjB;;AAEA,cAAIC,QAAQ,CAACV,MAAb,EAAqB;AACjBQ,YAAAA,OAAO,GAAGV,IAAI,CAACY,QAAD,CAAd;AACH;;AAED,cAAI,CAACF,OAAD,IAAY,CAACpB,cAAc,CAACmB,IAAf,CAAoBC,OAAO,CAACI,KAAR,CAAcC,IAAd,EAApB,CAAjB,EAA4D;AACxDpB,YAAAA,OAAO,CAACqB,MAAR,CAAe;AAAEZ,cAAAA,IAAF;AAAQa,cAAAA,SAAS,EAAE;AAAnB,aAAf;AACH;AACJ;AACJ;;AA9BE,KAAP;AAgCH;;AAlFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview require default case in switch statements\r\n * @author Aliaksei Shytkin\r\n */\r\n\"use strict\";\r\n\r\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu;\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require `default` cases in `switch` statements\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/default-case\"\r\n        },\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                commentPattern: {\r\n                    type: \"string\"\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            missingDefaultCase: \"Expected a default case.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0] || {};\r\n        const commentPattern = options.commentPattern\r\n            ? new RegExp(options.commentPattern, \"u\")\r\n            : DEFAULT_COMMENT_PATTERN;\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Shortcut to get last element of array\r\n         * @param {*[]} collection Array\r\n         * @returns {any} Last element\r\n         */\r\n        function last(collection) {\r\n            return collection[collection.length - 1];\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            SwitchStatement(node) {\r\n\r\n                if (!node.cases.length) {\r\n\r\n                    /*\r\n                     * skip check of empty switch because there is no easy way\r\n                     * to extract comments inside it now\r\n                     */\r\n                    return;\r\n                }\r\n\r\n                const hasDefault = node.cases.some(v => v.test === null);\r\n\r\n                if (!hasDefault) {\r\n\r\n                    let comment;\r\n\r\n                    const lastCase = last(node.cases);\r\n                    const comments = sourceCode.getCommentsAfter(lastCase);\r\n\r\n                    if (comments.length) {\r\n                        comment = last(comments);\r\n                    }\r\n\r\n                    if (!comment || !commentPattern.test(comment.value.trim())) {\r\n                        context.report({ node, messageId: \"missingDefaultCase\" });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}