{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when using new Function\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `new` operators with the `Function` object\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-new-func\"\n    },\n    schema: [],\n    messages: {\n      noFunctionConstructor: \"The Function constructor is eval.\"\n    }\n  },\n\n  create(context) {\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const variable = globalScope.set.get(\"Function\");\n\n        if (variable && variable.defs.length === 0) {\n          variable.references.forEach(ref => {\n            const node = ref.identifier;\n            const {\n              parent\n            } = node;\n            let evalNode;\n\n            if (parent) {\n              if (node === parent.callee && (parent.type === \"NewExpression\" || parent.type === \"CallExpression\")) {\n                evalNode = parent;\n              } else if (parent.type === \"MemberExpression\" && node === parent.object && callMethods.has(astUtils.getStaticPropertyName(parent))) {\n                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n\n                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                  evalNode = maybeCallee.parent;\n                }\n              }\n            }\n\n            if (evalNode) {\n              context.report({\n                node: evalNode,\n                messageId: \"noFunctionConstructor\"\n              });\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-new-func.js"],"names":["astUtils","require","callMethods","Set","module","exports","meta","type","docs","description","recommended","url","schema","messages","noFunctionConstructor","create","context","globalScope","getScope","variable","set","get","defs","length","references","forEach","ref","node","identifier","parent","evalNode","callee","object","has","getStaticPropertyName","maybeCallee","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,CAAR,CAApB,C,CAEA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,qBAAqB,EAAE;AADjB;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AACH,uBAAiB;AACb,cAAMC,WAAW,GAAGD,OAAO,CAACE,QAAR,EAApB;AACA,cAAMC,QAAQ,GAAGF,WAAW,CAACG,GAAZ,CAAgBC,GAAhB,CAAoB,UAApB,CAAjB;;AAEA,YAAIF,QAAQ,IAAIA,QAAQ,CAACG,IAAT,CAAcC,MAAd,KAAyB,CAAzC,EAA4C;AACxCJ,UAAAA,QAAQ,CAACK,UAAT,CAAoBC,OAApB,CAA4BC,GAAG,IAAI;AAC/B,kBAAMC,IAAI,GAAGD,GAAG,CAACE,UAAjB;AACA,kBAAM;AAAEC,cAAAA;AAAF,gBAAaF,IAAnB;AACA,gBAAIG,QAAJ;;AAEA,gBAAID,MAAJ,EAAY;AACR,kBAAIF,IAAI,KAAKE,MAAM,CAACE,MAAhB,KACAF,MAAM,CAACtB,IAAP,KAAgB,eAAhB,IACAsB,MAAM,CAACtB,IAAP,KAAgB,gBAFhB,CAAJ,EAGG;AACCuB,gBAAAA,QAAQ,GAAGD,MAAX;AACH,eALD,MAKO,IACHA,MAAM,CAACtB,IAAP,KAAgB,kBAAhB,IACAoB,IAAI,KAAKE,MAAM,CAACG,MADhB,IAEA9B,WAAW,CAAC+B,GAAZ,CAAgBjC,QAAQ,CAACkC,qBAAT,CAA+BL,MAA/B,CAAhB,CAHG,EAIL;AACE,sBAAMM,WAAW,GAAGN,MAAM,CAACA,MAAP,CAActB,IAAd,KAAuB,iBAAvB,GAA2CsB,MAAM,CAACA,MAAlD,GAA2DA,MAA/E;;AAEA,oBAAIM,WAAW,CAACN,MAAZ,CAAmBtB,IAAnB,KAA4B,gBAA5B,IAAgD4B,WAAW,CAACN,MAAZ,CAAmBE,MAAnB,KAA8BI,WAAlF,EAA+F;AAC3FL,kBAAAA,QAAQ,GAAGK,WAAW,CAACN,MAAvB;AACH;AACJ;AACJ;;AAED,gBAAIC,QAAJ,EAAc;AACVd,cAAAA,OAAO,CAACoB,MAAR,CAAe;AACXT,gBAAAA,IAAI,EAAEG,QADK;AAEXO,gBAAAA,SAAS,EAAE;AAFA,eAAf;AAIH;AACJ,WA9BD;AA+BH;AACJ;;AAtCE,KAAP;AAyCH;;AA5DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when using new Function\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]);\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow `new` operators with the `Function` object\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-new-func\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            noFunctionConstructor: \"The Function constructor is eval.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n            \"Program:exit\"() {\r\n                const globalScope = context.getScope();\r\n                const variable = globalScope.set.get(\"Function\");\r\n\r\n                if (variable && variable.defs.length === 0) {\r\n                    variable.references.forEach(ref => {\r\n                        const node = ref.identifier;\r\n                        const { parent } = node;\r\n                        let evalNode;\r\n\r\n                        if (parent) {\r\n                            if (node === parent.callee && (\r\n                                parent.type === \"NewExpression\" ||\r\n                                parent.type === \"CallExpression\"\r\n                            )) {\r\n                                evalNode = parent;\r\n                            } else if (\r\n                                parent.type === \"MemberExpression\" &&\r\n                                node === parent.object &&\r\n                                callMethods.has(astUtils.getStaticPropertyName(parent))\r\n                            ) {\r\n                                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\r\n\r\n                                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\r\n                                    evalNode = maybeCallee.parent;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (evalNode) {\r\n                            context.report({\r\n                                node: evalNode,\r\n                                messageId: \"noFunctionConstructor\"\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}