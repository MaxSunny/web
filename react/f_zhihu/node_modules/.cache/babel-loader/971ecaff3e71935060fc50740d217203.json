{"ast":null,"code":"/**\r\n * @fileoverview Prefers Object.hasOwn() instead of Object.prototype.hasOwnProperty.call()\r\n * @author Nitin Kumar\r\n * @author Gautam Arora\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks if the given node is considered to be an access to a property of `Object.prototype`.\r\n * @param {ASTNode} node `MemberExpression` node to evaluate.\r\n * @returns {boolean} `true` if `node.object` is `Object`, `Object.prototype`, or `{}` (empty 'ObjectExpression' node).\r\n */\n\n\nfunction hasLeftHandObject(node) {\n  /*\r\n   * ({}).hasOwnProperty.call(obj, prop) - `true`\r\n   * ({ foo }.hasOwnProperty.call(obj, prop)) - `false`, object literal should be empty\r\n   */\n  if (node.object.type === \"ObjectExpression\" && node.object.properties.length === 0) {\n    return true;\n  }\n\n  const objectNodeToCheck = node.object.type === \"MemberExpression\" && astUtils.getStaticPropertyName(node.object) === \"prototype\" ? node.object.object : node.object;\n\n  if (objectNodeToCheck.type === \"Identifier\" && objectNodeToCheck.name === \"Object\") {\n    return true;\n  }\n\n  return false;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-object-has-own\"\n    },\n    schema: [],\n    messages: {\n      useHasOwn: \"Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.\"\n    },\n    fixable: \"code\"\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(node.callee.type === \"MemberExpression\" && node.callee.object.type === \"MemberExpression\")) {\n          return;\n        }\n\n        const calleePropertyName = astUtils.getStaticPropertyName(node.callee);\n        const objectPropertyName = astUtils.getStaticPropertyName(node.callee.object);\n        const isObject = hasLeftHandObject(node.callee.object); // check `Object` scope\n\n        const scope = context.getScope();\n        const variable = astUtils.getVariableByName(scope, \"Object\");\n\n        if (calleePropertyName === \"call\" && objectPropertyName === \"hasOwnProperty\" && isObject && variable && variable.scope.type === \"global\") {\n          context.report({\n            node,\n            messageId: \"useHasOwn\",\n\n            fix(fixer) {\n              const sourceCode = context.getSourceCode();\n\n              if (sourceCode.getCommentsInside(node.callee).length > 0) {\n                return null;\n              }\n\n              const tokenJustBeforeNode = sourceCode.getTokenBefore(node.callee, {\n                includeComments: true\n              }); // for https://github.com/eslint/eslint/pull/15346#issuecomment-991417335\n\n              if (tokenJustBeforeNode && tokenJustBeforeNode.range[1] === node.callee.range[0] && !astUtils.canTokensBeAdjacent(tokenJustBeforeNode, \"Object.hasOwn\")) {\n                return fixer.replaceText(node.callee, \" Object.hasOwn\");\n              }\n\n              return fixer.replaceText(node.callee, \"Object.hasOwn\");\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-object-has-own.js"],"names":["astUtils","require","hasLeftHandObject","node","object","type","properties","length","objectNodeToCheck","getStaticPropertyName","name","module","exports","meta","docs","description","recommended","url","schema","messages","useHasOwn","fixable","create","context","CallExpression","callee","calleePropertyName","objectPropertyName","isObject","scope","getScope","variable","getVariableByName","report","messageId","fix","fixer","sourceCode","getSourceCode","getCommentsInside","tokenJustBeforeNode","getTokenBefore","includeComments","range","canTokensBeAdjacent","replaceText"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Prefers Object.hasOwn() instead of Object.prototype.hasOwnProperty.call()\r\n * @author Nitin Kumar\r\n * @author Gautam Arora\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if the given node is considered to be an access to a property of `Object.prototype`.\r\n * @param {ASTNode} node `MemberExpression` node to evaluate.\r\n * @returns {boolean} `true` if `node.object` is `Object`, `Object.prototype`, or `{}` (empty 'ObjectExpression' node).\r\n */\r\nfunction hasLeftHandObject(node) {\r\n\r\n    /*\r\n     * ({}).hasOwnProperty.call(obj, prop) - `true`\r\n     * ({ foo }.hasOwnProperty.call(obj, prop)) - `false`, object literal should be empty\r\n     */\r\n    if (node.object.type === \"ObjectExpression\" && node.object.properties.length === 0) {\r\n        return true;\r\n    }\r\n\r\n    const objectNodeToCheck = node.object.type === \"MemberExpression\" && astUtils.getStaticPropertyName(node.object) === \"prototype\" ? node.object.object : node.object;\r\n\r\n    if (objectNodeToCheck.type === \"Identifier\" && objectNodeToCheck.name === \"Object\") {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n        docs: {\r\n            description:\r\n                \"disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-object-has-own\"\r\n        },\r\n        schema: [],\r\n        messages: {\r\n            useHasOwn: \"Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.\"\r\n        },\r\n        fixable: \"code\"\r\n    },\r\n    create(context) {\r\n        return {\r\n            CallExpression(node) {\r\n                if (!(node.callee.type === \"MemberExpression\" && node.callee.object.type === \"MemberExpression\")) {\r\n                    return;\r\n                }\r\n\r\n                const calleePropertyName = astUtils.getStaticPropertyName(node.callee);\r\n                const objectPropertyName = astUtils.getStaticPropertyName(node.callee.object);\r\n                const isObject = hasLeftHandObject(node.callee.object);\r\n\r\n                // check `Object` scope\r\n                const scope = context.getScope();\r\n                const variable = astUtils.getVariableByName(scope, \"Object\");\r\n\r\n                if (\r\n                    calleePropertyName === \"call\" &&\r\n                    objectPropertyName === \"hasOwnProperty\" &&\r\n                    isObject &&\r\n                    variable && variable.scope.type === \"global\"\r\n                ) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"useHasOwn\",\r\n                        fix(fixer) {\r\n                            const sourceCode = context.getSourceCode();\r\n\r\n                            if (sourceCode.getCommentsInside(node.callee).length > 0) {\r\n                                return null;\r\n                            }\r\n\r\n                            const tokenJustBeforeNode = sourceCode.getTokenBefore(node.callee, { includeComments: true });\r\n\r\n                            // for https://github.com/eslint/eslint/pull/15346#issuecomment-991417335\r\n                            if (\r\n                                tokenJustBeforeNode &&\r\n                                tokenJustBeforeNode.range[1] === node.callee.range[0] &&\r\n                                !astUtils.canTokensBeAdjacent(tokenJustBeforeNode, \"Object.hasOwn\")\r\n                            ) {\r\n                                return fixer.replaceText(node.callee, \" Object.hasOwn\");\r\n                            }\r\n\r\n                            return fixer.replaceText(node.callee, \"Object.hasOwn\");\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}