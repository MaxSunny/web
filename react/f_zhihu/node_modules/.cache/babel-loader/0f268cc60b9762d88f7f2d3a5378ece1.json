{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of certain node types\r\n * @author Burak Yigit Kaya\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified syntax\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            selector: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"selector\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      restrictedSyntax: \"{{message}}\"\n    }\n  },\n\n  create(context) {\n    return context.options.reduce((result, selectorOrObject) => {\n      const isStringFormat = typeof selectorOrObject === \"string\";\n      const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n      const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n      const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n      return Object.assign(result, {\n        [selector](node) {\n          context.report({\n            node,\n            messageId: \"restrictedSyntax\",\n            data: {\n              message\n            }\n          });\n        }\n\n      });\n    }, {});\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-restricted-syntax.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","items","oneOf","properties","selector","message","required","additionalProperties","uniqueItems","minItems","messages","restrictedSyntax","create","context","options","reduce","result","selectorOrObject","isStringFormat","hasCustomMessage","Boolean","Object","assign","node","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2BADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE;AACJL,MAAAA,IAAI,EAAE,OADF;AAEJM,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,CACH;AACIP,UAAAA,IAAI,EAAE;AADV,SADG,EAIH;AACIA,UAAAA,IAAI,EAAE,QADV;AAEIQ,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AAAET,cAAAA,IAAI,EAAE;AAAR,aADF;AAERU,YAAAA,OAAO,EAAE;AAAEV,cAAAA,IAAI,EAAE;AAAR;AAFD,WAFhB;AAMIW,UAAAA,QAAQ,EAAE,CAAC,UAAD,CANd;AAOIC,UAAAA,oBAAoB,EAAE;AAP1B,SAJG;AADJ,OAFH;AAkBJC,MAAAA,WAAW,EAAE,IAlBT;AAmBJC,MAAAA,QAAQ,EAAE;AAnBN,KATN;AA+BFC,IAAAA,QAAQ,EAAE;AACN;AACAC,MAAAA,gBAAgB,EAAE;AAFZ;AA/BR,GADO;;AAsCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOA,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAuB,CAACC,MAAD,EAASC,gBAAT,KAA8B;AACxD,YAAMC,cAAc,GAAI,OAAOD,gBAAP,KAA4B,QAApD;AACA,YAAME,gBAAgB,GAAG,CAACD,cAAD,IAAmBE,OAAO,CAACH,gBAAgB,CAACZ,OAAlB,CAAnD;AAEA,YAAMD,QAAQ,GAAGc,cAAc,GAAGD,gBAAH,GAAsBA,gBAAgB,CAACb,QAAtE;AACA,YAAMC,OAAO,GAAGc,gBAAgB,GAAGF,gBAAgB,CAACZ,OAApB,GAA+B,UAASD,QAAS,mBAAjF;AAEA,aAAOiB,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsB;AACzB,SAACZ,QAAD,EAAWmB,IAAX,EAAiB;AACbV,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXD,YAAAA,IADW;AAEXE,YAAAA,SAAS,EAAE,kBAFA;AAGXC,YAAAA,IAAI,EAAE;AAAErB,cAAAA;AAAF;AAHK,WAAf;AAKH;;AAPwB,OAAtB,CAAP;AASH,KAhBM,EAgBJ,EAhBI,CAAP;AAkBH;;AAzDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of certain node types\r\n * @author Burak Yigit Kaya\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow specified syntax\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\r\n        },\r\n\r\n        schema: {\r\n            type: \"array\",\r\n            items: {\r\n                oneOf: [\r\n                    {\r\n                        type: \"string\"\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            selector: { type: \"string\" },\r\n                            message: { type: \"string\" }\r\n                        },\r\n                        required: [\"selector\"],\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            },\r\n            uniqueItems: true,\r\n            minItems: 0\r\n        },\r\n\r\n        messages: {\r\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\r\n            restrictedSyntax: \"{{message}}\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        return context.options.reduce((result, selectorOrObject) => {\r\n            const isStringFormat = (typeof selectorOrObject === \"string\");\r\n            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\r\n\r\n            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\r\n            const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\r\n\r\n            return Object.assign(result, {\r\n                [selector](node) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"restrictedSyntax\",\r\n                        data: { message }\r\n                    });\r\n                }\r\n            });\r\n        }, {});\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}