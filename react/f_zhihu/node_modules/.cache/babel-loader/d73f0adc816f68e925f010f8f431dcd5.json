{"ast":null,"code":"/**\r\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\r\n * Counts the number of if, conditional, for, while, try, switch/case,\r\n * @author Patrick Brosset\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/complexity\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const option = context.options[0];\n    let THRESHOLD = 20;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // Using a stack to store complexity per code path\n\n\n    const complexities = [];\n    /**\r\n     * Increase the complexity of the code path in context\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function increaseComplexity() {\n      complexities[complexities.length - 1]++;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      onCodePathStart() {\n        // The initial complexity is 1, representing one execution path in the CodePath\n        complexities.push(1);\n      },\n\n      // Each branching in the code adds 1 to the complexity\n      CatchClause: increaseComplexity,\n      ConditionalExpression: increaseComplexity,\n      LogicalExpression: increaseComplexity,\n      ForStatement: increaseComplexity,\n      ForInStatement: increaseComplexity,\n      ForOfStatement: increaseComplexity,\n      IfStatement: increaseComplexity,\n      WhileStatement: increaseComplexity,\n      DoWhileStatement: increaseComplexity,\n      // Avoid `default`\n      \"SwitchCase[test]\": increaseComplexity,\n\n      // Logical assignment operators have short-circuiting behavior\n      AssignmentExpression(node) {\n        if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n          increaseComplexity();\n        }\n      },\n\n      onCodePathEnd(codePath, node) {\n        const complexity = complexities.pop();\n        /*\r\n         * This rule only evaluates complexity of functions, so \"program\" is excluded.\r\n         * Class field initializers and class static blocks are implicit functions. Therefore,\r\n         * they shouldn't contribute to the enclosing function's complexity, but their\r\n         * own complexity should be evaluated.\r\n         */\n\n        if (codePath.origin !== \"function\" && codePath.origin !== \"class-field-initializer\" && codePath.origin !== \"class-static-block\") {\n          return;\n        }\n\n        if (complexity > THRESHOLD) {\n          let name;\n\n          if (codePath.origin === \"class-field-initializer\") {\n            name = \"class field initializer\";\n          } else if (codePath.origin === \"class-static-block\") {\n            name = \"class static block\";\n          } else {\n            name = astUtils.getFunctionNameWithKind(node);\n          }\n\n          context.report({\n            node,\n            messageId: \"complex\",\n            data: {\n              name: upperCaseFirst(name),\n              complexity,\n              max: THRESHOLD\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/complexity.js"],"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","complex","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","complexities","increaseComplexity","length","onCodePathStart","push","CatchClause","ConditionalExpression","LogicalExpression","ForStatement","ForInStatement","ForOfStatement","IfStatement","WhileStatement","DoWhileStatement","AssignmentExpression","node","isLogicalAssignmentOperator","operator","onCodePathEnd","codePath","complexity","pop","origin","name","getFunctionNameWithKind","report","messageId","data"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\r\n * Counts the number of if, conditional, for, while, try, switch/case,\r\n * @author Patrick Brosset\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce a maximum cyclomatic complexity allowed in a program\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/complexity\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                oneOf: [\r\n                    {\r\n                        type: \"integer\",\r\n                        minimum: 0\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            maximum: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            },\r\n                            max: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            }\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const option = context.options[0];\r\n        let THRESHOLD = 20;\r\n\r\n        if (\r\n            typeof option === \"object\" &&\r\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\r\n        ) {\r\n            THRESHOLD = option.maximum || option.max;\r\n        } else if (typeof option === \"number\") {\r\n            THRESHOLD = option;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        // Using a stack to store complexity per code path\r\n        const complexities = [];\r\n\r\n        /**\r\n         * Increase the complexity of the code path in context\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function increaseComplexity() {\r\n            complexities[complexities.length - 1]++;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            onCodePathStart() {\r\n\r\n                // The initial complexity is 1, representing one execution path in the CodePath\r\n                complexities.push(1);\r\n            },\r\n\r\n            // Each branching in the code adds 1 to the complexity\r\n            CatchClause: increaseComplexity,\r\n            ConditionalExpression: increaseComplexity,\r\n            LogicalExpression: increaseComplexity,\r\n            ForStatement: increaseComplexity,\r\n            ForInStatement: increaseComplexity,\r\n            ForOfStatement: increaseComplexity,\r\n            IfStatement: increaseComplexity,\r\n            WhileStatement: increaseComplexity,\r\n            DoWhileStatement: increaseComplexity,\r\n\r\n            // Avoid `default`\r\n            \"SwitchCase[test]\": increaseComplexity,\r\n\r\n            // Logical assignment operators have short-circuiting behavior\r\n            AssignmentExpression(node) {\r\n                if (astUtils.isLogicalAssignmentOperator(node.operator)) {\r\n                    increaseComplexity();\r\n                }\r\n            },\r\n\r\n            onCodePathEnd(codePath, node) {\r\n                const complexity = complexities.pop();\r\n\r\n                /*\r\n                 * This rule only evaluates complexity of functions, so \"program\" is excluded.\r\n                 * Class field initializers and class static blocks are implicit functions. Therefore,\r\n                 * they shouldn't contribute to the enclosing function's complexity, but their\r\n                 * own complexity should be evaluated.\r\n                 */\r\n                if (\r\n                    codePath.origin !== \"function\" &&\r\n                    codePath.origin !== \"class-field-initializer\" &&\r\n                    codePath.origin !== \"class-static-block\"\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                if (complexity > THRESHOLD) {\r\n                    let name;\r\n\r\n                    if (codePath.origin === \"class-field-initializer\") {\r\n                        name = \"class field initializer\";\r\n                    } else if (codePath.origin === \"class-static-block\") {\r\n                        name = \"class static block\";\r\n                    } else {\r\n                        name = astUtils.getFunctionNameWithKind(node);\r\n                    }\r\n\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"complex\",\r\n                        data: {\r\n                            name: upperCaseFirst(name),\r\n                            complexity,\r\n                            max: THRESHOLD\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}