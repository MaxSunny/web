{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag labels that are the same as an identifier\r\n * @author Ian Christian Myers\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow labels that share a name with a variable\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-label-var\"\n    },\n    schema: [],\n    messages: {\n      identifierClashWithLabel: \"Found identifier with same name as label.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Check if the identifier is present inside current scope\r\n     * @param {Object} scope current scope\r\n     * @param {string} name To evaluate\r\n     * @returns {boolean} True if its present\r\n     * @private\r\n     */\n    function findIdentifier(scope, name) {\n      return astUtils.getVariableByName(scope, name) !== null;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      LabeledStatement(node) {\n        // Fetch the innermost scope.\n        const scope = context.getScope();\n        /*\r\n         * Recursively find the identifier walking up the scope, starting\r\n         * with the innermost scope.\r\n         */\n\n        if (findIdentifier(scope, node.label.name)) {\n          context.report({\n            node,\n            messageId: \"identifierClashWithLabel\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-label-var.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","identifierClashWithLabel","create","context","findIdentifier","scope","name","getVariableByName","LabeledStatement","node","getScope","label","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,wBAAwB,EAAE;AADpB;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,aAASC,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACjC,aAAOjB,QAAQ,CAACkB,iBAAT,CAA2BF,KAA3B,EAAkCC,IAAlC,MAA4C,IAAnD;AACH,KAfW,CAiBZ;AACA;AACA;;;AAEA,WAAO;AAEHE,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AAEnB;AACA,cAAMJ,KAAK,GAAGF,OAAO,CAACO,QAAR,EAAd;AAEA;AAChB;AACA;AACA;;AACgB,YAAIN,cAAc,CAACC,KAAD,EAAQI,IAAI,CAACE,KAAL,CAAWL,IAAnB,CAAlB,EAA4C;AACxCH,UAAAA,OAAO,CAACS,MAAR,CAAe;AACXH,YAAAA,IADW;AAEXI,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AAjBE,KAAP;AAqBH;;AA3DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag labels that are the same as an identifier\r\n * @author Ian Christian Myers\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow labels that share a name with a variable\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-label-var\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            identifierClashWithLabel: \"Found identifier with same name as label.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Check if the identifier is present inside current scope\r\n         * @param {Object} scope current scope\r\n         * @param {string} name To evaluate\r\n         * @returns {boolean} True if its present\r\n         * @private\r\n         */\r\n        function findIdentifier(scope, name) {\r\n            return astUtils.getVariableByName(scope, name) !== null;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            LabeledStatement(node) {\r\n\r\n                // Fetch the innermost scope.\r\n                const scope = context.getScope();\r\n\r\n                /*\r\n                 * Recursively find the identifier walking up the scope, starting\r\n                 * with the innermost scope.\r\n                 */\r\n                if (findIdentifier(scope, node.label.name)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"identifierClashWithLabel\"\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}