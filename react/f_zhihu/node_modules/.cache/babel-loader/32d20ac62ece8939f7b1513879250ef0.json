{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignments to native objects or read-only global variables\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-global-assign\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      globalShouldNotBeModified: \"Read-only global '{{name}}' should not be modified.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0];\n    const exceptions = config && config.exceptions || [];\n    /**\r\n     * Reports write references.\r\n     * @param {Reference} reference A reference to check.\r\n     * @param {int} index The index of the reference in the references.\r\n     * @param {Reference[]} references The array that the reference belongs to.\r\n     * @returns {void}\r\n     */\n\n    function checkReference(reference, index, references) {\n      const identifier = reference.identifier;\n\n      if (reference.init === false && reference.isWrite() && (\n      /*\r\n       * Destructuring assignments can have multiple default value,\r\n       * so possibly there are multiple writeable references for the same identifier.\r\n       */\n      index === 0 || references[index - 1].identifier !== identifier)) {\n        context.report({\n          node: identifier,\n          messageId: \"globalShouldNotBeModified\",\n          data: {\n            name: identifier.name\n          }\n        });\n      }\n    }\n    /**\r\n     * Reports write references if a given variable is read-only builtin.\r\n     * @param {Variable} variable A variable to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkVariable(variable) {\n      if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n        variable.references.forEach(checkReference);\n      }\n    }\n\n    return {\n      Program() {\n        const globalScope = context.getScope();\n        globalScope.variables.forEach(checkVariable);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-global-assign.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","exceptions","items","uniqueItems","additionalProperties","messages","globalShouldNotBeModified","create","context","config","options","checkReference","reference","index","references","identifier","init","isWrite","report","node","messageId","data","name","checkVariable","variable","writeable","indexOf","forEach","Program","globalScope","getScope","variables"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sEADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIL,MAAAA,IAAI,EAAE,QADV;AAEIM,MAAAA,UAAU,EAAE;AACRC,QAAAA,UAAU,EAAE;AACRP,UAAAA,IAAI,EAAE,OADE;AAERQ,UAAAA,KAAK,EAAE;AAAER,YAAAA,IAAI,EAAE;AAAR,WAFC;AAGRS,UAAAA,WAAW,EAAE;AAHL;AADJ,OAFhB;AASIC,MAAAA,oBAAoB,EAAE;AAT1B,KADI,CATN;AAuBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,yBAAyB,EAAE;AADrB;AAvBR,GADO;;AA6BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;AACA,UAAMT,UAAU,GAAIQ,MAAM,IAAIA,MAAM,CAACR,UAAlB,IAAiC,EAApD;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,aAASU,cAAT,CAAwBC,SAAxB,EAAmCC,KAAnC,EAA0CC,UAA1C,EAAsD;AAClD,YAAMC,UAAU,GAAGH,SAAS,CAACG,UAA7B;;AAEA,UAAIH,SAAS,CAACI,IAAV,KAAmB,KAAnB,IACAJ,SAAS,CAACK,OAAV,EADA;AAGA;AAChB;AACA;AACA;AACiBJ,MAAAA,KAAK,KAAK,CAAV,IAAeC,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,CAAsBE,UAAtB,KAAqCA,UAPrD,CAAJ,EAQE;AACEP,QAAAA,OAAO,CAACU,MAAR,CAAe;AACXC,UAAAA,IAAI,EAAEJ,UADK;AAEXK,UAAAA,SAAS,EAAE,2BAFA;AAGXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAEP,UAAU,CAACO;AADf;AAHK,SAAf;AAOH;AACJ;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,UAAIA,QAAQ,CAACC,SAAT,KAAuB,KAAvB,IAAgCxB,UAAU,CAACyB,OAAX,CAAmBF,QAAQ,CAACF,IAA5B,MAAsC,CAAC,CAA3E,EAA8E;AAC1EE,QAAAA,QAAQ,CAACV,UAAT,CAAoBa,OAApB,CAA4BhB,cAA5B;AACH;AACJ;;AAED,WAAO;AACHiB,MAAAA,OAAO,GAAG;AACN,cAAMC,WAAW,GAAGrB,OAAO,CAACsB,QAAR,EAApB;AAEAD,QAAAA,WAAW,CAACE,SAAZ,CAAsBJ,OAAtB,CAA8BJ,aAA9B;AACH;;AALE,KAAP;AAOH;;AAhFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow assignments to native objects or read-only global variables\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-global-assign\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    exceptions: {\r\n                        type: \"array\",\r\n                        items: { type: \"string\" },\r\n                        uniqueItems: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            globalShouldNotBeModified: \"Read-only global '{{name}}' should not be modified.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const config = context.options[0];\r\n        const exceptions = (config && config.exceptions) || [];\r\n\r\n        /**\r\n         * Reports write references.\r\n         * @param {Reference} reference A reference to check.\r\n         * @param {int} index The index of the reference in the references.\r\n         * @param {Reference[]} references The array that the reference belongs to.\r\n         * @returns {void}\r\n         */\r\n        function checkReference(reference, index, references) {\r\n            const identifier = reference.identifier;\r\n\r\n            if (reference.init === false &&\r\n                reference.isWrite() &&\r\n\r\n                /*\r\n                 * Destructuring assignments can have multiple default value,\r\n                 * so possibly there are multiple writeable references for the same identifier.\r\n                 */\r\n                (index === 0 || references[index - 1].identifier !== identifier)\r\n            ) {\r\n                context.report({\r\n                    node: identifier,\r\n                    messageId: \"globalShouldNotBeModified\",\r\n                    data: {\r\n                        name: identifier.name\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reports write references if a given variable is read-only builtin.\r\n         * @param {Variable} variable A variable to check.\r\n         * @returns {void}\r\n         */\r\n        function checkVariable(variable) {\r\n            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\r\n                variable.references.forEach(checkReference);\r\n            }\r\n        }\r\n\r\n        return {\r\n            Program() {\r\n                const globalScope = context.getScope();\r\n\r\n                globalScope.variables.forEach(checkVariable);\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}