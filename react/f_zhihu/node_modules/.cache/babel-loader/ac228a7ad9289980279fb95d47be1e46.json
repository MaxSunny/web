{"ast":null,"code":"/**\r\n * @fileoverview Disallow mixed spaces and tabs for indentation\r\n * @author Jary Niebur\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow mixed spaces and tabs for indentation\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n    },\n    schema: [{\n      enum: [\"smart-tabs\", true, false]\n    }],\n    messages: {\n      mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let smartTabs;\n\n    switch (context.options[0]) {\n      case true: // Support old syntax, maybe add deprecation warning here\n\n      case \"smart-tabs\":\n        smartTabs = true;\n        break;\n\n      default:\n        smartTabs = false;\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"Program:exit\"(node) {\n        const lines = sourceCode.lines,\n              comments = sourceCode.getAllComments(),\n              ignoredCommentLines = new Set(); // Add all lines except the first ones.\n\n        comments.forEach(comment => {\n          for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\n            ignoredCommentLines.add(i);\n          }\n        });\n        /*\r\n         * At least one space followed by a tab\r\n         * or the reverse before non-tab/-space\r\n         * characters begin.\r\n         */\n\n        let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\n\n        if (smartTabs) {\n          /*\r\n           * At least one space followed by a tab\r\n           * before non-tab/-space characters begin.\r\n           */\n          regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\n        }\n\n        lines.forEach((line, i) => {\n          const match = regex.exec(line);\n\n          if (match) {\n            const lineNumber = i + 1;\n            const loc = {\n              start: {\n                line: lineNumber,\n                column: match[0].length - 2\n              },\n              end: {\n                line: lineNumber,\n                column: match[0].length\n              }\n            };\n\n            if (!ignoredCommentLines.has(lineNumber)) {\n              const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\n\n              if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\n                context.report({\n                  node,\n                  loc,\n                  messageId: \"mixedSpacesAndTabs\"\n                });\n              }\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","enum","messages","mixedSpacesAndTabs","create","context","sourceCode","getSourceCode","smartTabs","options","node","lines","comments","getAllComments","ignoredCommentLines","Set","forEach","comment","i","loc","start","line","end","add","regex","match","exec","lineNumber","column","length","has","containingNode","getNodeByRangeIndex","getIndexFromLoc","includes","report","messageId"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Disallow mixed spaces and tabs for indentation\r\n * @author Jary Niebur\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"disallow mixed spaces and tabs for indentation\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"smart-tabs\", true, false]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        let smartTabs;\r\n\r\n        switch (context.options[0]) {\r\n            case true: // Support old syntax, maybe add deprecation warning here\r\n            case \"smart-tabs\":\r\n                smartTabs = true;\r\n                break;\r\n            default:\r\n                smartTabs = false;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            \"Program:exit\"(node) {\r\n                const lines = sourceCode.lines,\r\n                    comments = sourceCode.getAllComments(),\r\n                    ignoredCommentLines = new Set();\r\n\r\n                // Add all lines except the first ones.\r\n                comments.forEach(comment => {\r\n                    for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\r\n                        ignoredCommentLines.add(i);\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * At least one space followed by a tab\r\n                 * or the reverse before non-tab/-space\r\n                 * characters begin.\r\n                 */\r\n                let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\r\n\r\n                if (smartTabs) {\r\n\r\n                    /*\r\n                     * At least one space followed by a tab\r\n                     * before non-tab/-space characters begin.\r\n                     */\r\n                    regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\r\n                }\r\n\r\n                lines.forEach((line, i) => {\r\n                    const match = regex.exec(line);\r\n\r\n                    if (match) {\r\n                        const lineNumber = i + 1;\r\n                        const loc = {\r\n                            start: {\r\n                                line: lineNumber,\r\n                                column: match[0].length - 2\r\n                            },\r\n                            end: {\r\n                                line: lineNumber,\r\n                                column: match[0].length\r\n                            }\r\n                        };\r\n\r\n                        if (!ignoredCommentLines.has(lineNumber)) {\r\n                            const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\r\n\r\n                            if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\r\n                                context.report({\r\n                                    node,\r\n                                    loc,\r\n                                    messageId: \"mixedSpacesAndTabs\"\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}