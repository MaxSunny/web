{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when using multiline strings\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow multiline strings\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-multi-str\"\n    },\n    schema: [],\n    messages: {\n      multilineString: \"Multiline support is limited to browsers supporting ES5 only.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Determines if a given node is part of JSX syntax.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} True if the node is a JSX node, false if not.\r\n     * @private\r\n     */\n    function isJSXElement(node) {\n      return node.type.indexOf(\"JSX\") === 0;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Literal(node) {\n        if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\n          context.report({\n            node,\n            messageId: \"multilineString\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-multi-str.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","multilineString","create","context","isJSXElement","node","indexOf","Literal","LINEBREAK_MATCHER","test","raw","parent","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,4BADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACA;AACQ,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,aAAOA,IAAI,CAACX,IAAL,CAAUY,OAAV,CAAkB,KAAlB,MAA6B,CAApC;AACH,KAVW,CAYZ;AACA;AACA;;;AAEA,WAAO;AAEHC,MAAAA,OAAO,CAACF,IAAD,EAAO;AACV,YAAIhB,QAAQ,CAACmB,iBAAT,CAA2BC,IAA3B,CAAgCJ,IAAI,CAACK,GAArC,KAA6C,CAACN,YAAY,CAACC,IAAI,CAACM,MAAN,CAA9D,EAA6E;AACzER,UAAAA,OAAO,CAACS,MAAR,CAAe;AACXP,YAAAA,IADW;AAEXQ,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AATE,KAAP;AAYH;;AA7CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when using multiline strings\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow multiline strings\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-multi-str\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            multilineString: \"Multiline support is limited to browsers supporting ES5 only.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Determines if a given node is part of JSX syntax.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} True if the node is a JSX node, false if not.\r\n         * @private\r\n         */\r\n        function isJSXElement(node) {\r\n            return node.type.indexOf(\"JSX\") === 0;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            Literal(node) {\r\n                if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"multilineString\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}