{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when return statement contains assignment\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignment operators in `return` statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-return-assign\"\n    },\n    schema: [{\n      enum: [\"except-parens\", \"always\"]\n    }],\n    messages: {\n      returnAssignment: \"Return statement should not contain assignment.\",\n      arrowAssignment: \"Arrow function should not return assignment.\"\n    }\n  },\n\n  create(context) {\n    const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n    const sourceCode = context.getSourceCode();\n    return {\n      AssignmentExpression(node) {\n        if (!always && astUtils.isParenthesised(sourceCode, node)) {\n          return;\n        }\n\n        let currentChild = node;\n        let parent = currentChild.parent; // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n\n        while (parent && !SENTINEL_TYPE.test(parent.type)) {\n          currentChild = parent;\n          parent = parent.parent;\n        } // Reports.\n\n\n        if (parent && parent.type === \"ReturnStatement\") {\n          context.report({\n            node: parent,\n            messageId: \"returnAssignment\"\n          });\n        } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n          context.report({\n            node: parent,\n            messageId: \"arrowAssignment\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-return-assign.js"],"names":["astUtils","require","SENTINEL_TYPE","module","exports","meta","type","docs","description","recommended","url","schema","enum","messages","returnAssignment","arrowAssignment","create","context","always","options","sourceCode","getSourceCode","AssignmentExpression","node","isParenthesised","currentChild","parent","test","report","messageId","body"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,aAAa,GAAG,uFAAtB,C,CAEA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,QAAlB;AADV,KADI,CATN;AAeFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE,iDADZ;AAENC,MAAAA,eAAe,EAAE;AAFX;AAfR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,eAAvB,MAA4C,eAA3D;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,oBAAoB,CAACC,IAAD,EAAO;AACvB,YAAI,CAACL,MAAD,IAAWlB,QAAQ,CAACwB,eAAT,CAAyBJ,UAAzB,EAAqCG,IAArC,CAAf,EAA2D;AACvD;AACH;;AAED,YAAIE,YAAY,GAAGF,IAAnB;AACA,YAAIG,MAAM,GAAGD,YAAY,CAACC,MAA1B,CANuB,CAQvB;;AACA,eAAOA,MAAM,IAAI,CAACxB,aAAa,CAACyB,IAAd,CAAmBD,MAAM,CAACpB,IAA1B,CAAlB,EAAmD;AAC/CmB,UAAAA,YAAY,GAAGC,MAAf;AACAA,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACH,SAZsB,CAcvB;;;AACA,YAAIA,MAAM,IAAIA,MAAM,CAACpB,IAAP,KAAgB,iBAA9B,EAAiD;AAC7CW,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXL,YAAAA,IAAI,EAAEG,MADK;AAEXG,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH,SALD,MAKO,IAAIH,MAAM,IAAIA,MAAM,CAACpB,IAAP,KAAgB,yBAA1B,IAAuDoB,MAAM,CAACI,IAAP,KAAgBL,YAA3E,EAAyF;AAC5FR,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXL,YAAAA,IAAI,EAAEG,MADK;AAEXG,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AA3BE,KAAP;AA6BH;;AAvDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when return statement contains assignment\r\n * @author Ilya Volodin\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow assignment operators in `return` statements\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-return-assign\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"except-parens\", \"always\"]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            returnAssignment: \"Return statement should not contain assignment.\",\r\n            arrowAssignment: \"Arrow function should not return assignment.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n            AssignmentExpression(node) {\r\n                if (!always && astUtils.isParenthesised(sourceCode, node)) {\r\n                    return;\r\n                }\r\n\r\n                let currentChild = node;\r\n                let parent = currentChild.parent;\r\n\r\n                // Find ReturnStatement or ArrowFunctionExpression in ancestors.\r\n                while (parent && !SENTINEL_TYPE.test(parent.type)) {\r\n                    currentChild = parent;\r\n                    parent = parent.parent;\r\n                }\r\n\r\n                // Reports.\r\n                if (parent && parent.type === \"ReturnStatement\") {\r\n                    context.report({\r\n                        node: parent,\r\n                        messageId: \"returnAssignment\"\r\n                    });\r\n                } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\r\n                    context.report({\r\n                        node: parent,\r\n                        messageId: \"arrowAssignment\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}