{"ast":null,"code":"/**\r\n * @filedescription Validation Strategy\r\n */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\r\n * Container class for several different validation strategies.\r\n */\n\nclass ValidationStrategy {\n  /**\r\n   * Validates that a value is an array.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n  static array(value) {\n    if (!Array.isArray(value)) {\n      throw new TypeError(\"Expected an array.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a boolean.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static boolean(value) {\n    if (typeof value !== \"boolean\") {\n      throw new TypeError(\"Expected a Boolean.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a number.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static number(value) {\n    if (typeof value !== \"number\") {\n      throw new TypeError(\"Expected a number.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a object.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static object(value) {\n    if (!value || typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a object or null.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static \"object?\"(value) {\n    if (typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object or null.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a string.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static string(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected a string.\");\n    }\n  }\n  /**\r\n   * Validates that a value is a non-empty string.\r\n   * @param {*} value The value to validate.\r\n   * @returns {void}\r\n   * @throws {TypeError} If the value is invalid. \r\n   */\n\n\n  static \"string!\"(value) {\n    if (typeof value !== \"string\" || value.length === 0) {\n      throw new TypeError(\"Expected a non-empty string.\");\n    }\n  }\n\n}\n\nexports.ValidationStrategy = ValidationStrategy;","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/@humanwhocodes/object-schema/src/validation-strategy.js"],"names":["ValidationStrategy","array","value","Array","isArray","TypeError","boolean","number","object","string","length","exports"],"mappings":"AAAA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,kBAAN,CAAyB;AAErB;AACJ;AACA;AACA;AACA;AACA;AACgB,SAALC,KAAK,CAACC,KAAD,EAAQ;AAChB,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACvB,YAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACkB,SAAPC,OAAO,CAACJ,KAAD,EAAQ;AAClB,QAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AAC5B,YAAM,IAAIG,SAAJ,CAAc,qBAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACiB,SAANE,MAAM,CAACL,KAAD,EAAQ;AACjB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACiB,SAANG,MAAM,CAACN,KAAD,EAAQ;AACjB,QAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACrC,YAAM,IAAIG,SAAJ,CAAc,qBAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACoB,SAAT,SAAS,CAACH,KAAD,EAAQ;AACpB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAM,IAAIG,SAAJ,CAAc,6BAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACiB,SAANI,MAAM,CAACP,KAAD,EAAQ;AACjB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACoB,SAAT,SAAS,CAACH,KAAD,EAAQ;AACpB,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACQ,MAAN,KAAiB,CAAlD,EAAqD;AACjD,YAAM,IAAIL,SAAJ,CAAc,8BAAd,CAAN;AACH;AACJ;;AApFoB;;AAwFzBM,OAAO,CAACX,kBAAR,GAA6BA,kBAA7B","sourcesContent":["/**\r\n * @filedescription Validation Strategy\r\n */\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------------------------------\r\n// Class\r\n//-----------------------------------------------------------------------------\r\n\r\n/**\r\n * Container class for several different validation strategies.\r\n */\r\nclass ValidationStrategy {\r\n\r\n    /**\r\n     * Validates that a value is an array.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static array(value) {\r\n        if (!Array.isArray(value)) {\r\n            throw new TypeError(\"Expected an array.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a boolean.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static boolean(value) {\r\n        if (typeof value !== \"boolean\") {\r\n            throw new TypeError(\"Expected a Boolean.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a number.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static number(value) {\r\n        if (typeof value !== \"number\") {\r\n            throw new TypeError(\"Expected a number.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a object.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static object(value) {\r\n        if (!value || typeof value !== \"object\") {\r\n            throw new TypeError(\"Expected an object.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a object or null.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static \"object?\"(value) {\r\n        if (typeof value !== \"object\") {\r\n            throw new TypeError(\"Expected an object or null.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a string.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static string(value) {\r\n        if (typeof value !== \"string\") {\r\n            throw new TypeError(\"Expected a string.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that a value is a non-empty string.\r\n     * @param {*} value The value to validate.\r\n     * @returns {void}\r\n     * @throws {TypeError} If the value is invalid. \r\n     */\r\n    static \"string!\"(value) {\r\n        if (typeof value !== \"string\" || value.length === 0) {\r\n            throw new TypeError(\"Expected a non-empty string.\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports.ValidationStrategy = ValidationStrategy;\r\n"]},"metadata":{},"sourceType":"script"}