{"ast":null,"code":"/**\r\n * @fileoverview Rule to check multiple var declarations per line\r\n * @author Alberto Rodríguez\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow newlines around variable declarations\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\n    },\n    schema: [{\n      enum: [\"always\", \"initializations\"]\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      expectVarOnNewline: \"Expected variable declaration to be on a new line.\"\n    }\n  },\n\n  create(context) {\n    const always = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Determine if provided keyword is a variant of for specifiers\r\n     * @private\r\n     * @param {string} keyword keyword to test\r\n     * @returns {boolean} True if `keyword` is a variant of for specifier\r\n     */\n\n    function isForTypeSpecifier(keyword) {\n      return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n    }\n    /**\r\n     * Checks newlines around variable declarations.\r\n     * @private\r\n     * @param {ASTNode} node `VariableDeclaration` node to test\r\n     * @returns {void}\r\n     */\n\n\n    function checkForNewLine(node) {\n      if (isForTypeSpecifier(node.parent.type)) {\n        return;\n      }\n\n      const declarations = node.declarations;\n      let prev;\n      declarations.forEach(current => {\n        if (prev && prev.loc.end.line === current.loc.start.line) {\n          if (always || prev.init || current.init) {\n            context.report({\n              node,\n              messageId: \"expectVarOnNewline\",\n              loc: current.loc,\n              fix: fixer => fixer.insertTextBefore(current, \"\\n\")\n            });\n          }\n        }\n\n        prev = current;\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      VariableDeclaration: checkForNewLine\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/one-var-declaration-per-line.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","enum","fixable","messages","expectVarOnNewline","create","context","always","options","isForTypeSpecifier","keyword","checkForNewLine","node","parent","declarations","prev","forEach","current","loc","end","line","start","init","report","messageId","fix","fixer","insertTextBefore","VariableDeclaration"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,iBAAX;AADV,KADI,CATN;AAeFC,IAAAA,OAAO,EAAE,YAfP;AAiBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,kBAAkB,EAAE;AADd;AAjBR,GADO;;AAuBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,MAAuB,QAAtC,CAFY,CAIZ;AACA;AACA;;AAGA;AACR;AACA;AACA;AACA;AACA;;AACQ,aAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACjC,aAAOA,OAAO,KAAK,cAAZ,IAA8BA,OAAO,KAAK,gBAA1C,IAA8DA,OAAO,KAAK,gBAAjF;AACH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,UAAIH,kBAAkB,CAACG,IAAI,CAACC,MAAL,CAAYlB,IAAb,CAAtB,EAA0C;AACtC;AACH;;AAED,YAAMmB,YAAY,GAAGF,IAAI,CAACE,YAA1B;AACA,UAAIC,IAAJ;AAEAD,MAAAA,YAAY,CAACE,OAAb,CAAqBC,OAAO,IAAI;AAC5B,YAAIF,IAAI,IAAIA,IAAI,CAACG,GAAL,CAASC,GAAT,CAAaC,IAAb,KAAsBH,OAAO,CAACC,GAAR,CAAYG,KAAZ,CAAkBD,IAApD,EAA0D;AACtD,cAAIb,MAAM,IAAIQ,IAAI,CAACO,IAAf,IAAuBL,OAAO,CAACK,IAAnC,EAAyC;AACrChB,YAAAA,OAAO,CAACiB,MAAR,CAAe;AACXX,cAAAA,IADW;AAEXY,cAAAA,SAAS,EAAE,oBAFA;AAGXN,cAAAA,GAAG,EAAED,OAAO,CAACC,GAHF;AAIXO,cAAAA,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBV,OAAvB,EAAgC,IAAhC;AAJH,aAAf;AAMH;AACJ;;AACDF,QAAAA,IAAI,GAAGE,OAAP;AACH,OAZD;AAaH,KA9CW,CAgDZ;AACA;AACA;;;AAEA,WAAO;AACHW,MAAAA,mBAAmB,EAAEjB;AADlB,KAAP;AAIH;;AA/EY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to check multiple var declarations per line\r\n * @author Alberto Rodríguez\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require or disallow newlines around variable declarations\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"always\", \"initializations\"]\r\n            }\r\n        ],\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        messages: {\r\n            expectVarOnNewline: \"Expected variable declaration to be on a new line.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const always = context.options[0] === \"always\";\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n\r\n        /**\r\n         * Determine if provided keyword is a variant of for specifiers\r\n         * @private\r\n         * @param {string} keyword keyword to test\r\n         * @returns {boolean} True if `keyword` is a variant of for specifier\r\n         */\r\n        function isForTypeSpecifier(keyword) {\r\n            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\r\n        }\r\n\r\n        /**\r\n         * Checks newlines around variable declarations.\r\n         * @private\r\n         * @param {ASTNode} node `VariableDeclaration` node to test\r\n         * @returns {void}\r\n         */\r\n        function checkForNewLine(node) {\r\n            if (isForTypeSpecifier(node.parent.type)) {\r\n                return;\r\n            }\r\n\r\n            const declarations = node.declarations;\r\n            let prev;\r\n\r\n            declarations.forEach(current => {\r\n                if (prev && prev.loc.end.line === current.loc.start.line) {\r\n                    if (always || prev.init || current.init) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"expectVarOnNewline\",\r\n                            loc: current.loc,\r\n                            fix: fixer => fixer.insertTextBefore(current, \"\\n\")\r\n                        });\r\n                    }\r\n                }\r\n                prev = current;\r\n            });\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            VariableDeclaration: checkForNewLine\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}