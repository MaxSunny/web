{"ast":null,"code":"/**\r\n * @fileoverview Disallow Labeled Statements\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow labeled statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-labels\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowLoop: {\n          type: \"boolean\",\n          default: false\n        },\n        allowSwitch: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedLabel: \"Unexpected labeled statement.\",\n      unexpectedLabelInBreak: \"Unexpected label in break statement.\",\n      unexpectedLabelInContinue: \"Unexpected label in continue statement.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    const allowLoop = options && options.allowLoop;\n    const allowSwitch = options && options.allowSwitch;\n    let scopeInfo = null;\n    /**\r\n     * Gets the kind of a given node.\r\n     * @param {ASTNode} node A node to get.\r\n     * @returns {string} The kind of the node.\r\n     */\n\n    function getBodyKind(node) {\n      if (astUtils.isLoop(node)) {\n        return \"loop\";\n      }\n\n      if (node.type === \"SwitchStatement\") {\n        return \"switch\";\n      }\n\n      return \"other\";\n    }\n    /**\r\n     * Checks whether the label of a given kind is allowed or not.\r\n     * @param {string} kind A kind to check.\r\n     * @returns {boolean} `true` if the kind is allowed.\r\n     */\n\n\n    function isAllowed(kind) {\n      switch (kind) {\n        case \"loop\":\n          return allowLoop;\n\n        case \"switch\":\n          return allowSwitch;\n\n        default:\n          return false;\n      }\n    }\n    /**\r\n     * Checks whether a given name is a label of a loop or not.\r\n     * @param {string} label A name of a label to check.\r\n     * @returns {boolean} `true` if the name is a label of a loop.\r\n     */\n\n\n    function getKind(label) {\n      let info = scopeInfo;\n\n      while (info) {\n        if (info.label === label) {\n          return info.kind;\n        }\n\n        info = info.upper;\n      }\n      /* istanbul ignore next: syntax error */\n\n\n      return \"other\";\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      LabeledStatement(node) {\n        scopeInfo = {\n          label: node.label.name,\n          kind: getBodyKind(node.body),\n          upper: scopeInfo\n        };\n      },\n\n      \"LabeledStatement:exit\"(node) {\n        if (!isAllowed(scopeInfo.kind)) {\n          context.report({\n            node,\n            messageId: \"unexpectedLabel\"\n          });\n        }\n\n        scopeInfo = scopeInfo.upper;\n      },\n\n      BreakStatement(node) {\n        if (node.label && !isAllowed(getKind(node.label.name))) {\n          context.report({\n            node,\n            messageId: \"unexpectedLabelInBreak\"\n          });\n        }\n      },\n\n      ContinueStatement(node) {\n        if (node.label && !isAllowed(getKind(node.label.name))) {\n          context.report({\n            node,\n            messageId: \"unexpectedLabelInContinue\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-labels.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","allowLoop","default","allowSwitch","additionalProperties","messages","unexpectedLabel","unexpectedLabelInBreak","unexpectedLabelInContinue","create","context","options","scopeInfo","getBodyKind","node","isLoop","isAllowed","kind","getKind","label","info","upper","LabeledStatement","name","body","report","messageId","BreakStatement","ContinueStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Disallow Labeled Statements\r\n * @author Nicholas C. Zakas\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow labeled statements\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-labels\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allowLoop: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    },\r\n                    allowSwitch: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpectedLabel: \"Unexpected labeled statement.\",\r\n            unexpectedLabelInBreak: \"Unexpected label in break statement.\",\r\n            unexpectedLabelInContinue: \"Unexpected label in continue statement.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0];\r\n        const allowLoop = options && options.allowLoop;\r\n        const allowSwitch = options && options.allowSwitch;\r\n        let scopeInfo = null;\r\n\r\n        /**\r\n         * Gets the kind of a given node.\r\n         * @param {ASTNode} node A node to get.\r\n         * @returns {string} The kind of the node.\r\n         */\r\n        function getBodyKind(node) {\r\n            if (astUtils.isLoop(node)) {\r\n                return \"loop\";\r\n            }\r\n            if (node.type === \"SwitchStatement\") {\r\n                return \"switch\";\r\n            }\r\n            return \"other\";\r\n        }\r\n\r\n        /**\r\n         * Checks whether the label of a given kind is allowed or not.\r\n         * @param {string} kind A kind to check.\r\n         * @returns {boolean} `true` if the kind is allowed.\r\n         */\r\n        function isAllowed(kind) {\r\n            switch (kind) {\r\n                case \"loop\": return allowLoop;\r\n                case \"switch\": return allowSwitch;\r\n                default: return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks whether a given name is a label of a loop or not.\r\n         * @param {string} label A name of a label to check.\r\n         * @returns {boolean} `true` if the name is a label of a loop.\r\n         */\r\n        function getKind(label) {\r\n            let info = scopeInfo;\r\n\r\n            while (info) {\r\n                if (info.label === label) {\r\n                    return info.kind;\r\n                }\r\n                info = info.upper;\r\n            }\r\n\r\n            /* istanbul ignore next: syntax error */\r\n            return \"other\";\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            LabeledStatement(node) {\r\n                scopeInfo = {\r\n                    label: node.label.name,\r\n                    kind: getBodyKind(node.body),\r\n                    upper: scopeInfo\r\n                };\r\n            },\r\n\r\n            \"LabeledStatement:exit\"(node) {\r\n                if (!isAllowed(scopeInfo.kind)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedLabel\"\r\n                    });\r\n                }\r\n\r\n                scopeInfo = scopeInfo.upper;\r\n            },\r\n\r\n            BreakStatement(node) {\r\n                if (node.label && !isAllowed(getKind(node.label.name))) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedLabelInBreak\"\r\n                    });\r\n                }\r\n            },\r\n\r\n            ContinueStatement(node) {\r\n                if (node.label && !isAllowed(getKind(node.label.name))) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedLabelInContinue\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}