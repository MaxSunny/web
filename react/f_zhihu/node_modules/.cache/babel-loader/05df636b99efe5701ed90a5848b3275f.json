{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of constructors without capital letters\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst CAPS_ALLOWED = [\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\", \"BigInt\"];\n/**\r\n * Ensure that if the key is provided, it must be an array.\r\n * @param {Object} obj Object to check with `key`.\r\n * @param {string} key Object key to check on `obj`.\r\n * @param {any} fallback If obj[key] is not present, this will be returned.\r\n * @throws {TypeError} If key is not an own array type property of `obj`.\r\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\r\n */\n\nfunction checkArray(obj, key, fallback) {\n  /* istanbul ignore if */\n  if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\n    throw new TypeError(`${key}, if provided, must be an Array`);\n  }\n\n  return obj[key] || fallback;\n}\n/**\r\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\r\n * @param {Object} map Accumulator object for the reduce.\r\n * @param {string} key Object key to set to `true`.\r\n * @returns {Object} Returns the updated Object for further reduction.\r\n */\n\n\nfunction invert(map, key) {\n  map[key] = true;\n  return map;\n}\n/**\r\n * Creates an object with the cap is new exceptions as its keys and true as their values.\r\n * @param {Object} config Rule configuration\r\n * @returns {Object} Object with cap is new exceptions.\r\n */\n\n\nfunction calculateCapIsNewExceptions(config) {\n  let capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\n\n  if (capIsNewExceptions !== CAPS_ALLOWED) {\n    capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\n  }\n\n  return capIsNewExceptions.reduce(invert, {});\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require constructor names to begin with a capital letter\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/new-cap\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        newIsCap: {\n          type: \"boolean\",\n          default: true\n        },\n        capIsNew: {\n          type: \"boolean\",\n          default: true\n        },\n        newIsCapExceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        newIsCapExceptionPattern: {\n          type: \"string\"\n        },\n        capIsNewExceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        capIsNewExceptionPattern: {\n          type: \"string\"\n        },\n        properties: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      upper: \"A function with a name starting with an uppercase letter should only be used as a constructor.\",\n      lower: \"A constructor name should not start with a lowercase letter.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    config.newIsCap = config.newIsCap !== false;\n    config.capIsNew = config.capIsNew !== false;\n    const skipProperties = config.properties === false;\n    const newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\n    const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern, \"u\") : null;\n    const capIsNewExceptions = calculateCapIsNewExceptions(config);\n    const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern, \"u\") : null;\n    const listeners = {};\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Get exact callee name from expression\r\n     * @param {ASTNode} node CallExpression or NewExpression node\r\n     * @returns {string} name\r\n     */\n\n    function extractNameFromExpression(node) {\n      return node.callee.type === \"Identifier\" ? node.callee.name : astUtils.getStaticPropertyName(node.callee) || \"\";\n    }\n    /**\r\n     * Returns the capitalization state of the string -\r\n     * Whether the first character is uppercase, lowercase, or non-alphabetic\r\n     * @param {string} str String\r\n     * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\r\n     */\n\n\n    function getCap(str) {\n      const firstChar = str.charAt(0);\n      const firstCharLower = firstChar.toLowerCase();\n      const firstCharUpper = firstChar.toUpperCase();\n\n      if (firstCharLower === firstCharUpper) {\n        // char has no uppercase variant, so it's non-alphabetic\n        return \"non-alpha\";\n      }\n\n      if (firstChar === firstCharLower) {\n        return \"lower\";\n      }\n\n      return \"upper\";\n    }\n    /**\r\n     * Check if capitalization is allowed for a CallExpression\r\n     * @param {Object} allowedMap Object mapping calleeName to a Boolean\r\n     * @param {ASTNode} node CallExpression node\r\n     * @param {string} calleeName Capitalized callee name from a CallExpression\r\n     * @param {Object} pattern RegExp object from options pattern\r\n     * @returns {boolean} Returns true if the callee may be capitalized\r\n     */\n\n\n    function isCapAllowed(allowedMap, node, calleeName, pattern) {\n      const sourceText = sourceCode.getText(node.callee);\n\n      if (allowedMap[calleeName] || allowedMap[sourceText]) {\n        return true;\n      }\n\n      if (pattern && pattern.test(sourceText)) {\n        return true;\n      }\n\n      const callee = astUtils.skipChainExpression(node.callee);\n\n      if (calleeName === \"UTC\" && callee.type === \"MemberExpression\") {\n        // allow if callee is Date.UTC\n        return callee.object.type === \"Identifier\" && callee.object.name === \"Date\";\n      }\n\n      return skipProperties && callee.type === \"MemberExpression\";\n    }\n    /**\r\n     * Reports the given messageId for the given node. The location will be the start of the property or the callee.\r\n     * @param {ASTNode} node CallExpression or NewExpression node.\r\n     * @param {string} messageId The messageId to report.\r\n     * @returns {void}\r\n     */\n\n\n    function report(node, messageId) {\n      let callee = astUtils.skipChainExpression(node.callee);\n\n      if (callee.type === \"MemberExpression\") {\n        callee = callee.property;\n      }\n\n      context.report({\n        node,\n        loc: callee.loc,\n        messageId\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    if (config.newIsCap) {\n      listeners.NewExpression = function (node) {\n        const constructorName = extractNameFromExpression(node);\n\n        if (constructorName) {\n          const capitalization = getCap(constructorName);\n          const isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);\n\n          if (!isAllowed) {\n            report(node, \"lower\");\n          }\n        }\n      };\n    }\n\n    if (config.capIsNew) {\n      listeners.CallExpression = function (node) {\n        const calleeName = extractNameFromExpression(node);\n\n        if (calleeName) {\n          const capitalization = getCap(calleeName);\n          const isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);\n\n          if (!isAllowed) {\n            report(node, \"upper\");\n          }\n        }\n      };\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/new-cap.js"],"names":["astUtils","require","CAPS_ALLOWED","checkArray","obj","key","fallback","Object","prototype","hasOwnProperty","call","Array","isArray","TypeError","invert","map","calculateCapIsNewExceptions","config","capIsNewExceptions","concat","reduce","module","exports","meta","type","docs","description","recommended","url","schema","properties","newIsCap","default","capIsNew","newIsCapExceptions","items","newIsCapExceptionPattern","capIsNewExceptionPattern","additionalProperties","messages","upper","lower","create","context","assign","options","skipProperties","RegExp","listeners","sourceCode","getSourceCode","extractNameFromExpression","node","callee","name","getStaticPropertyName","getCap","str","firstChar","charAt","firstCharLower","toLowerCase","firstCharUpper","toUpperCase","isCapAllowed","allowedMap","calleeName","pattern","sourceText","getText","test","skipChainExpression","object","report","messageId","property","loc","NewExpression","constructorName","capitalization","isAllowed","CallExpression"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of constructors without capital letters\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst CAPS_ALLOWED = [\r\n    \"Array\",\r\n    \"Boolean\",\r\n    \"Date\",\r\n    \"Error\",\r\n    \"Function\",\r\n    \"Number\",\r\n    \"Object\",\r\n    \"RegExp\",\r\n    \"String\",\r\n    \"Symbol\",\r\n    \"BigInt\"\r\n];\r\n\r\n/**\r\n * Ensure that if the key is provided, it must be an array.\r\n * @param {Object} obj Object to check with `key`.\r\n * @param {string} key Object key to check on `obj`.\r\n * @param {any} fallback If obj[key] is not present, this will be returned.\r\n * @throws {TypeError} If key is not an own array type property of `obj`.\r\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\r\n */\r\nfunction checkArray(obj, key, fallback) {\r\n\r\n    /* istanbul ignore if */\r\n    if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\r\n        throw new TypeError(`${key}, if provided, must be an Array`);\r\n    }\r\n    return obj[key] || fallback;\r\n}\r\n\r\n/**\r\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\r\n * @param {Object} map Accumulator object for the reduce.\r\n * @param {string} key Object key to set to `true`.\r\n * @returns {Object} Returns the updated Object for further reduction.\r\n */\r\nfunction invert(map, key) {\r\n    map[key] = true;\r\n    return map;\r\n}\r\n\r\n/**\r\n * Creates an object with the cap is new exceptions as its keys and true as their values.\r\n * @param {Object} config Rule configuration\r\n * @returns {Object} Object with cap is new exceptions.\r\n */\r\nfunction calculateCapIsNewExceptions(config) {\r\n    let capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\r\n\r\n    if (capIsNewExceptions !== CAPS_ALLOWED) {\r\n        capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\r\n    }\r\n\r\n    return capIsNewExceptions.reduce(invert, {});\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require constructor names to begin with a capital letter\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/new-cap\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    newIsCap: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    },\r\n                    capIsNew: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    },\r\n                    newIsCapExceptions: {\r\n                        type: \"array\",\r\n                        items: {\r\n                            type: \"string\"\r\n                        }\r\n                    },\r\n                    newIsCapExceptionPattern: {\r\n                        type: \"string\"\r\n                    },\r\n                    capIsNewExceptions: {\r\n                        type: \"array\",\r\n                        items: {\r\n                            type: \"string\"\r\n                        }\r\n                    },\r\n                    capIsNewExceptionPattern: {\r\n                        type: \"string\"\r\n                    },\r\n                    properties: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n        messages: {\r\n            upper: \"A function with a name starting with an uppercase letter should only be used as a constructor.\",\r\n            lower: \"A constructor name should not start with a lowercase letter.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const config = Object.assign({}, context.options[0]);\r\n\r\n        config.newIsCap = config.newIsCap !== false;\r\n        config.capIsNew = config.capIsNew !== false;\r\n        const skipProperties = config.properties === false;\r\n\r\n        const newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\r\n        const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern, \"u\") : null;\r\n\r\n        const capIsNewExceptions = calculateCapIsNewExceptions(config);\r\n        const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern, \"u\") : null;\r\n\r\n        const listeners = {};\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Get exact callee name from expression\r\n         * @param {ASTNode} node CallExpression or NewExpression node\r\n         * @returns {string} name\r\n         */\r\n        function extractNameFromExpression(node) {\r\n            return node.callee.type === \"Identifier\"\r\n                ? node.callee.name\r\n                : astUtils.getStaticPropertyName(node.callee) || \"\";\r\n        }\r\n\r\n        /**\r\n         * Returns the capitalization state of the string -\r\n         * Whether the first character is uppercase, lowercase, or non-alphabetic\r\n         * @param {string} str String\r\n         * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\r\n         */\r\n        function getCap(str) {\r\n            const firstChar = str.charAt(0);\r\n\r\n            const firstCharLower = firstChar.toLowerCase();\r\n            const firstCharUpper = firstChar.toUpperCase();\r\n\r\n            if (firstCharLower === firstCharUpper) {\r\n\r\n                // char has no uppercase variant, so it's non-alphabetic\r\n                return \"non-alpha\";\r\n            }\r\n            if (firstChar === firstCharLower) {\r\n                return \"lower\";\r\n            }\r\n            return \"upper\";\r\n\r\n        }\r\n\r\n        /**\r\n         * Check if capitalization is allowed for a CallExpression\r\n         * @param {Object} allowedMap Object mapping calleeName to a Boolean\r\n         * @param {ASTNode} node CallExpression node\r\n         * @param {string} calleeName Capitalized callee name from a CallExpression\r\n         * @param {Object} pattern RegExp object from options pattern\r\n         * @returns {boolean} Returns true if the callee may be capitalized\r\n         */\r\n        function isCapAllowed(allowedMap, node, calleeName, pattern) {\r\n            const sourceText = sourceCode.getText(node.callee);\r\n\r\n            if (allowedMap[calleeName] || allowedMap[sourceText]) {\r\n                return true;\r\n            }\r\n\r\n            if (pattern && pattern.test(sourceText)) {\r\n                return true;\r\n            }\r\n\r\n            const callee = astUtils.skipChainExpression(node.callee);\r\n\r\n            if (calleeName === \"UTC\" && callee.type === \"MemberExpression\") {\r\n\r\n                // allow if callee is Date.UTC\r\n                return callee.object.type === \"Identifier\" &&\r\n                    callee.object.name === \"Date\";\r\n            }\r\n\r\n            return skipProperties && callee.type === \"MemberExpression\";\r\n        }\r\n\r\n        /**\r\n         * Reports the given messageId for the given node. The location will be the start of the property or the callee.\r\n         * @param {ASTNode} node CallExpression or NewExpression node.\r\n         * @param {string} messageId The messageId to report.\r\n         * @returns {void}\r\n         */\r\n        function report(node, messageId) {\r\n            let callee = astUtils.skipChainExpression(node.callee);\r\n\r\n            if (callee.type === \"MemberExpression\") {\r\n                callee = callee.property;\r\n            }\r\n\r\n            context.report({ node, loc: callee.loc, messageId });\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        if (config.newIsCap) {\r\n            listeners.NewExpression = function(node) {\r\n\r\n                const constructorName = extractNameFromExpression(node);\r\n\r\n                if (constructorName) {\r\n                    const capitalization = getCap(constructorName);\r\n                    const isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);\r\n\r\n                    if (!isAllowed) {\r\n                        report(node, \"lower\");\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        if (config.capIsNew) {\r\n            listeners.CallExpression = function(node) {\r\n\r\n                const calleeName = extractNameFromExpression(node);\r\n\r\n                if (calleeName) {\r\n                    const capitalization = getCap(calleeName);\r\n                    const isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);\r\n\r\n                    if (!isAllowed) {\r\n                        report(node, \"upper\");\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        return listeners;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}