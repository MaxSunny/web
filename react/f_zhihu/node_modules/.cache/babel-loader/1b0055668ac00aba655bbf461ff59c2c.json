{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag for-in loops without if statements inside\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `for-in` loops to include an `if` statement\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/guard-for-in\"\n    },\n    schema: [],\n    messages: {\n      wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ForInStatement(node) {\n        const body = node.body; // empty statement\n\n        if (body.type === \"EmptyStatement\") {\n          return;\n        } // if statement\n\n\n        if (body.type === \"IfStatement\") {\n          return;\n        } // empty block\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 0) {\n          return;\n        } // block with just if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n          return;\n        } // block that starts with if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n          const i = body.body[0]; // ... whose consequent is a continue\n\n          if (i.consequent.type === \"ContinueStatement\") {\n            return;\n          } // ... whose consequent is a block that contains only a continue\n\n\n          if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n            return;\n          }\n        }\n\n        context.report({\n          node,\n          messageId: \"wrap\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/guard-for-in.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","wrap","create","context","ForInStatement","node","body","length","i","consequent","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAUFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,IAAI,EAAE;AADA;AAVR,GADO;;AAgBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,cAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB,CADiB,CAGjB;;AACA,YAAIA,IAAI,CAACZ,IAAL,KAAc,gBAAlB,EAAoC;AAChC;AACH,SANgB,CAQjB;;;AACA,YAAIY,IAAI,CAACZ,IAAL,KAAc,aAAlB,EAAiC;AAC7B;AACH,SAXgB,CAajB;;;AACA,YAAIY,IAAI,CAACZ,IAAL,KAAc,gBAAd,IAAkCY,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAA3D,EAA8D;AAC1D;AACH,SAhBgB,CAkBjB;;;AACA,YAAID,IAAI,CAACZ,IAAL,KAAc,gBAAd,IAAkCY,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAAvD,IAA4DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaZ,IAAb,KAAsB,aAAtF,EAAqG;AACjG;AACH,SArBgB,CAuBjB;;;AACA,YAAIY,IAAI,CAACZ,IAAL,KAAc,gBAAd,IAAkCY,IAAI,CAACA,IAAL,CAAUC,MAAV,IAAoB,CAAtD,IAA2DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaZ,IAAb,KAAsB,aAArF,EAAoG;AAChG,gBAAMc,CAAC,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAV,CADgG,CAGhG;;AACA,cAAIE,CAAC,CAACC,UAAF,CAAaf,IAAb,KAAsB,mBAA1B,EAA+C;AAC3C;AACH,WAN+F,CAQhG;;;AACA,cAAIc,CAAC,CAACC,UAAF,CAAaf,IAAb,KAAsB,gBAAtB,IAA0Cc,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkBC,MAAlB,KAA6B,CAAvE,IAA4EC,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkB,CAAlB,EAAqBZ,IAArB,KAA8B,mBAA9G,EAAmI;AAC/H;AACH;AACJ;;AAEDS,QAAAA,OAAO,CAACO,MAAR,CAAe;AAAEL,UAAAA,IAAF;AAAQM,UAAAA,SAAS,EAAE;AAAnB,SAAf;AACH;;AAzCE,KAAP;AA4CH;;AA9DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag for-in loops without if statements inside\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require `for-in` loops to include an `if` statement\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/guard-for-in\"\r\n        },\r\n\r\n        schema: [],\r\n        messages: {\r\n            wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n\r\n            ForInStatement(node) {\r\n                const body = node.body;\r\n\r\n                // empty statement\r\n                if (body.type === \"EmptyStatement\") {\r\n                    return;\r\n                }\r\n\r\n                // if statement\r\n                if (body.type === \"IfStatement\") {\r\n                    return;\r\n                }\r\n\r\n                // empty block\r\n                if (body.type === \"BlockStatement\" && body.body.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                // block with just if statement\r\n                if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\r\n                    return;\r\n                }\r\n\r\n                // block that starts with if statement\r\n                if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\r\n                    const i = body.body[0];\r\n\r\n                    // ... whose consequent is a continue\r\n                    if (i.consequent.type === \"ContinueStatement\") {\r\n                        return;\r\n                    }\r\n\r\n                    // ... whose consequent is a block that contains only a continue\r\n                    if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                context.report({ node, messageId: \"wrap\" });\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}