{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\r\n * @author Danny Fritz\r\n * @author Gyandeep Singh\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `var` declarations be placed at the top of their containing scope\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/vars-on-top\"\n    },\n    schema: [],\n    messages: {\n      top: \"All 'var' declarations must be at the top of the function scope.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Has AST suggesting a directive.\r\n     * @param {ASTNode} node any node\r\n     * @returns {boolean} whether the given node structurally represents a directive\r\n     */\n    function looksLikeDirective(node) {\n      return node.type === \"ExpressionStatement\" && node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n    /**\r\n     * Check to see if its a ES6 import declaration\r\n     * @param {ASTNode} node any node\r\n     * @returns {boolean} whether the given node represents a import declaration\r\n     */\n\n\n    function looksLikeImport(node) {\n      return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" || node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n    }\n    /**\r\n     * Checks whether a given node is a variable declaration or not.\r\n     * @param {ASTNode} node any node\r\n     * @returns {boolean} `true` if the node is a variable declaration.\r\n     */\n\n\n    function isVariableDeclaration(node) {\n      return node.type === \"VariableDeclaration\" || node.type === \"ExportNamedDeclaration\" && node.declaration && node.declaration.type === \"VariableDeclaration\";\n    }\n    /**\r\n     * Checks whether this variable is on top of the block body\r\n     * @param {ASTNode} node The node to check\r\n     * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\r\n     * @returns {boolean} True if var is on top otherwise false\r\n     */\n\n\n    function isVarOnTop(node, statements) {\n      const l = statements.length;\n      let i = 0; // Skip over directives and imports. Static blocks don't have either.\n\n      if (node.parent.type !== \"StaticBlock\") {\n        for (; i < l; ++i) {\n          if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n            break;\n          }\n        }\n      }\n\n      for (; i < l; ++i) {\n        if (!isVariableDeclaration(statements[i])) {\n          return false;\n        }\n\n        if (statements[i] === node) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Checks whether variable is on top at the global level\r\n     * @param {ASTNode} node The node to check\r\n     * @param {ASTNode} parent Parent of the node\r\n     * @returns {void}\r\n     */\n\n\n    function globalVarCheck(node, parent) {\n      if (!isVarOnTop(node, parent.body)) {\n        context.report({\n          node,\n          messageId: \"top\"\n        });\n      }\n    }\n    /**\r\n     * Checks whether variable is on top at functional block scope level\r\n     * @param {ASTNode} node The node to check\r\n     * @returns {void}\r\n     */\n\n\n    function blockScopeVarCheck(node) {\n      const {\n        parent\n      } = node;\n\n      if (parent.type === \"BlockStatement\" && /Function/u.test(parent.parent.type) && isVarOnTop(node, parent.body)) {\n        return;\n      }\n\n      if (parent.type === \"StaticBlock\" && isVarOnTop(node, parent.body)) {\n        return;\n      }\n\n      context.report({\n        node,\n        messageId: \"top\"\n      });\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"VariableDeclaration[kind='var']\"(node) {\n        if (node.parent.type === \"ExportNamedDeclaration\") {\n          globalVarCheck(node.parent, node.parent.parent);\n        } else if (node.parent.type === \"Program\") {\n          globalVarCheck(node, node.parent);\n        } else {\n          blockScopeVarCheck(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/vars-on-top.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","top","create","context","looksLikeDirective","node","expression","value","looksLikeImport","isVariableDeclaration","declaration","isVarOnTop","statements","l","length","i","parent","globalVarCheck","body","report","messageId","blockScopeVarCheck","test"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\r\n * @author Danny Fritz\r\n * @author Gyandeep Singh\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require `var` declarations be placed at the top of their containing scope\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/vars-on-top\"\r\n        },\r\n\r\n        schema: [],\r\n        messages: {\r\n            top: \"All 'var' declarations must be at the top of the function scope.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Has AST suggesting a directive.\r\n         * @param {ASTNode} node any node\r\n         * @returns {boolean} whether the given node structurally represents a directive\r\n         */\r\n        function looksLikeDirective(node) {\r\n            return node.type === \"ExpressionStatement\" &&\r\n                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\r\n        }\r\n\r\n        /**\r\n         * Check to see if its a ES6 import declaration\r\n         * @param {ASTNode} node any node\r\n         * @returns {boolean} whether the given node represents a import declaration\r\n         */\r\n        function looksLikeImport(node) {\r\n            return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||\r\n                node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\r\n        }\r\n\r\n        /**\r\n         * Checks whether a given node is a variable declaration or not.\r\n         * @param {ASTNode} node any node\r\n         * @returns {boolean} `true` if the node is a variable declaration.\r\n         */\r\n        function isVariableDeclaration(node) {\r\n            return (\r\n                node.type === \"VariableDeclaration\" ||\r\n                (\r\n                    node.type === \"ExportNamedDeclaration\" &&\r\n                    node.declaration &&\r\n                    node.declaration.type === \"VariableDeclaration\"\r\n                )\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Checks whether this variable is on top of the block body\r\n         * @param {ASTNode} node The node to check\r\n         * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\r\n         * @returns {boolean} True if var is on top otherwise false\r\n         */\r\n        function isVarOnTop(node, statements) {\r\n            const l = statements.length;\r\n            let i = 0;\r\n\r\n            // Skip over directives and imports. Static blocks don't have either.\r\n            if (node.parent.type !== \"StaticBlock\") {\r\n                for (; i < l; ++i) {\r\n                    if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (; i < l; ++i) {\r\n                if (!isVariableDeclaration(statements[i])) {\r\n                    return false;\r\n                }\r\n                if (statements[i] === node) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks whether variable is on top at the global level\r\n         * @param {ASTNode} node The node to check\r\n         * @param {ASTNode} parent Parent of the node\r\n         * @returns {void}\r\n         */\r\n        function globalVarCheck(node, parent) {\r\n            if (!isVarOnTop(node, parent.body)) {\r\n                context.report({ node, messageId: \"top\" });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks whether variable is on top at functional block scope level\r\n         * @param {ASTNode} node The node to check\r\n         * @returns {void}\r\n         */\r\n        function blockScopeVarCheck(node) {\r\n            const { parent } = node;\r\n\r\n            if (\r\n                parent.type === \"BlockStatement\" &&\r\n                /Function/u.test(parent.parent.type) &&\r\n                isVarOnTop(node, parent.body)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (\r\n                parent.type === \"StaticBlock\" &&\r\n                isVarOnTop(node, parent.body)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            context.report({ node, messageId: \"top\" });\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            \"VariableDeclaration[kind='var']\"(node) {\r\n                if (node.parent.type === \"ExportNamedDeclaration\") {\r\n                    globalVarCheck(node.parent, node.parent.parent);\r\n                } else if (node.parent.type === \"Program\") {\r\n                    globalVarCheck(node, node.parent);\r\n                } else {\r\n                    blockScopeVarCheck(node);\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}