{"ast":null,"code":"/**\r\n * @fileoverview Common utils for AST.\r\n *\r\n * This file contains only shared items for core and rules.\r\n * If you make a utility for rules, please see `../rules/utils/ast-utils.js`.\r\n *\r\n * @author Toru Nagashima <https://github.com/mysticatea>\r\n */\n\"use strict\";\n\nconst breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;\nconst lineBreakPattern = /\\r\\n|[\\r\\n\\u2028\\u2029]/u;\nconst shebangPattern = /^#!([^\\r\\n]+)/u;\n/**\r\n * Creates a version of the `lineBreakPattern` regex with the global flag.\r\n * Global regexes are mutable, so this needs to be a function instead of a constant.\r\n * @returns {RegExp} A global regular expression that matches line terminators\r\n */\n\nfunction createGlobalLinebreakMatcher() {\n  return new RegExp(lineBreakPattern.source, \"gu\");\n}\n\nmodule.exports = {\n  breakableTypePattern,\n  lineBreakPattern,\n  createGlobalLinebreakMatcher,\n  shebangPattern\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/shared/ast-utils.js"],"names":["breakableTypePattern","lineBreakPattern","shebangPattern","createGlobalLinebreakMatcher","RegExp","source","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,oBAAoB,GAAG,mDAA7B;AACA,MAAMC,gBAAgB,GAAG,0BAAzB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,4BAAT,GAAwC;AACpC,SAAO,IAAIC,MAAJ,CAAWH,gBAAgB,CAACI,MAA5B,EAAoC,IAApC,CAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbP,EAAAA,oBADa;AAEbC,EAAAA,gBAFa;AAGbE,EAAAA,4BAHa;AAIbD,EAAAA;AAJa,CAAjB","sourcesContent":["/**\r\n * @fileoverview Common utils for AST.\r\n *\r\n * This file contains only shared items for core and rules.\r\n * If you make a utility for rules, please see `../rules/utils/ast-utils.js`.\r\n *\r\n * @author Toru Nagashima <https://github.com/mysticatea>\r\n */\r\n\"use strict\";\r\n\r\nconst breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;\r\nconst lineBreakPattern = /\\r\\n|[\\r\\n\\u2028\\u2029]/u;\r\nconst shebangPattern = /^#!([^\\r\\n]+)/u;\r\n\r\n/**\r\n * Creates a version of the `lineBreakPattern` regex with the global flag.\r\n * Global regexes are mutable, so this needs to be a function instead of a constant.\r\n * @returns {RegExp} A global regular expression that matches line terminators\r\n */\r\nfunction createGlobalLinebreakMatcher() {\r\n    return new RegExp(lineBreakPattern.source, \"gu\");\r\n}\r\n\r\nmodule.exports = {\r\n    breakableTypePattern,\r\n    lineBreakPattern,\r\n    createGlobalLinebreakMatcher,\r\n    shebangPattern\r\n};\r\n"]},"metadata":{},"sourceType":"script"}