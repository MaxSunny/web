{"ast":null,"code":"/**\r\n * @fileoverview A variant of EventEmitter which does not give listeners information about each other\r\n * @author Teddy Katz\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\r\n * An event emitter\r\n * @typedef {Object} SafeEmitter\r\n * @property {(eventName: string, listenerFunc: Function) => void} on Adds a listener for a given event name\r\n * @property {(eventName: string, arg1?: any, arg2?: any, arg3?: any) => void} emit Emits an event with a given name.\r\n * This calls all the listeners that were listening for that name, with `arg1`, `arg2`, and `arg3` as arguments.\r\n * @property {function(): string[]} eventNames Gets the list of event names that have registered listeners.\r\n */\n\n/**\r\n * Creates an object which can listen for and emit events.\r\n * This is similar to the EventEmitter API in Node's standard library, but it has a few differences.\r\n * The goal is to allow multiple modules to attach arbitrary listeners to the same emitter, without\r\n * letting the modules know about each other at all.\r\n * 1. It has no special keys like `error` and `newListener`, which would allow modules to detect when\r\n * another module throws an error or registers a listener.\r\n * 2. It calls listener functions without any `this` value. (`EventEmitter` calls listeners with a\r\n * `this` value of the emitter instance, which would give listeners access to other listeners.)\r\n * @returns {SafeEmitter} An emitter\r\n */\n\nmodule.exports = () => {\n  const listeners = Object.create(null);\n  return Object.freeze({\n    on(eventName, listener) {\n      if (eventName in listeners) {\n        listeners[eventName].push(listener);\n      } else {\n        listeners[eventName] = [listener];\n      }\n    },\n\n    emit(eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (eventName in listeners) {\n        listeners[eventName].forEach(listener => listener(...args));\n      }\n    },\n\n    eventNames() {\n      return Object.keys(listeners);\n    }\n\n  });\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/linter/safe-emitter.js"],"names":["module","exports","listeners","Object","create","freeze","on","eventName","listener","push","emit","args","forEach","eventNames","keys"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,MAAM;AACnB,QAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAlB;AAEA,SAAOD,MAAM,CAACE,MAAP,CAAc;AACjBC,IAAAA,EAAE,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACpB,UAAID,SAAS,IAAIL,SAAjB,EAA4B;AACxBA,QAAAA,SAAS,CAACK,SAAD,CAAT,CAAqBE,IAArB,CAA0BD,QAA1B;AACH,OAFD,MAEO;AACHN,QAAAA,SAAS,CAACK,SAAD,CAAT,GAAuB,CAACC,QAAD,CAAvB;AACH;AACJ,KAPgB;;AAQjBE,IAAAA,IAAI,CAACH,SAAD,EAAqB;AAAA,wCAANI,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACrB,UAAIJ,SAAS,IAAIL,SAAjB,EAA4B;AACxBA,QAAAA,SAAS,CAACK,SAAD,CAAT,CAAqBK,OAArB,CAA6BJ,QAAQ,IAAIA,QAAQ,CAAC,GAAGG,IAAJ,CAAjD;AACH;AACJ,KAZgB;;AAajBE,IAAAA,UAAU,GAAG;AACT,aAAOV,MAAM,CAACW,IAAP,CAAYZ,SAAZ,CAAP;AACH;;AAfgB,GAAd,CAAP;AAiBH,CApBD","sourcesContent":["/**\r\n * @fileoverview A variant of EventEmitter which does not give listeners information about each other\r\n * @author Teddy Katz\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Typedefs\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * An event emitter\r\n * @typedef {Object} SafeEmitter\r\n * @property {(eventName: string, listenerFunc: Function) => void} on Adds a listener for a given event name\r\n * @property {(eventName: string, arg1?: any, arg2?: any, arg3?: any) => void} emit Emits an event with a given name.\r\n * This calls all the listeners that were listening for that name, with `arg1`, `arg2`, and `arg3` as arguments.\r\n * @property {function(): string[]} eventNames Gets the list of event names that have registered listeners.\r\n */\r\n\r\n/**\r\n * Creates an object which can listen for and emit events.\r\n * This is similar to the EventEmitter API in Node's standard library, but it has a few differences.\r\n * The goal is to allow multiple modules to attach arbitrary listeners to the same emitter, without\r\n * letting the modules know about each other at all.\r\n * 1. It has no special keys like `error` and `newListener`, which would allow modules to detect when\r\n * another module throws an error or registers a listener.\r\n * 2. It calls listener functions without any `this` value. (`EventEmitter` calls listeners with a\r\n * `this` value of the emitter instance, which would give listeners access to other listeners.)\r\n * @returns {SafeEmitter} An emitter\r\n */\r\nmodule.exports = () => {\r\n    const listeners = Object.create(null);\r\n\r\n    return Object.freeze({\r\n        on(eventName, listener) {\r\n            if (eventName in listeners) {\r\n                listeners[eventName].push(listener);\r\n            } else {\r\n                listeners[eventName] = [listener];\r\n            }\r\n        },\r\n        emit(eventName, ...args) {\r\n            if (eventName in listeners) {\r\n                listeners[eventName].forEach(listener => listener(...args));\r\n            }\r\n        },\r\n        eventNames() {\r\n            return Object.keys(listeners);\r\n        }\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}