{"ast":null,"code":"/**\r\n * @fileoverview A rule to set the maximum depth block can be nested in a function.\r\n * @author Ian Christian Myers\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum depth that blocks can be nested\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-depth\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      tooDeeply: \"Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    const functionStack = [],\n          option = context.options[0];\n    let maxDepth = 4;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      maxDepth = option.maximum || option.max;\n    }\n\n    if (typeof option === \"number\") {\n      maxDepth = option;\n    }\n    /**\r\n     * When parsing a new function, store it in our function stack\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function startFunction() {\n      functionStack.push(0);\n    }\n    /**\r\n     * When parsing is done then pop out the reference\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function endFunction() {\n      functionStack.pop();\n    }\n    /**\r\n     * Save the block and Evaluate the node\r\n     * @param {ASTNode} node node to evaluate\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function pushBlock(node) {\n      const len = ++functionStack[functionStack.length - 1];\n\n      if (len > maxDepth) {\n        context.report({\n          node,\n          messageId: \"tooDeeply\",\n          data: {\n            depth: len,\n            maxDepth\n          }\n        });\n      }\n    }\n    /**\r\n     * Pop the saved block\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function popBlock() {\n      functionStack[functionStack.length - 1]--;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program: startFunction,\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      StaticBlock: startFunction,\n\n      IfStatement(node) {\n        if (node.parent.type !== \"IfStatement\") {\n          pushBlock(node);\n        }\n      },\n\n      SwitchStatement: pushBlock,\n      TryStatement: pushBlock,\n      DoWhileStatement: pushBlock,\n      WhileStatement: pushBlock,\n      WithStatement: pushBlock,\n      ForStatement: pushBlock,\n      ForInStatement: pushBlock,\n      ForOfStatement: pushBlock,\n      \"IfStatement:exit\": popBlock,\n      \"SwitchStatement:exit\": popBlock,\n      \"TryStatement:exit\": popBlock,\n      \"DoWhileStatement:exit\": popBlock,\n      \"WhileStatement:exit\": popBlock,\n      \"WithStatement:exit\": popBlock,\n      \"ForStatement:exit\": popBlock,\n      \"ForInStatement:exit\": popBlock,\n      \"ForOfStatement:exit\": popBlock,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      \"StaticBlock:exit\": endFunction,\n      \"Program:exit\": endFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/max-depth.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","tooDeeply","create","context","functionStack","option","options","maxDepth","Object","prototype","hasOwnProperty","call","startFunction","push","endFunction","pop","pushBlock","node","len","length","report","messageId","data","depth","popBlock","Program","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","StaticBlock","IfStatement","parent","SwitchStatement","TryStatement","DoWhileStatement","WhileStatement","WithStatement","ForStatement","ForInStatement","ForOfStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview A rule to set the maximum depth block can be nested in a function.\r\n * @author Ian Christian Myers\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce a maximum depth that blocks can be nested\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/max-depth\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                oneOf: [\r\n                    {\r\n                        type: \"integer\",\r\n                        minimum: 0\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            maximum: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            },\r\n                            max: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            }\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        messages: {\r\n            tooDeeply: \"Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        const functionStack = [],\r\n            option = context.options[0];\r\n        let maxDepth = 4;\r\n\r\n        if (\r\n            typeof option === \"object\" &&\r\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\r\n        ) {\r\n            maxDepth = option.maximum || option.max;\r\n        }\r\n        if (typeof option === \"number\") {\r\n            maxDepth = option;\r\n        }\r\n\r\n        /**\r\n         * When parsing a new function, store it in our function stack\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function startFunction() {\r\n            functionStack.push(0);\r\n        }\r\n\r\n        /**\r\n         * When parsing is done then pop out the reference\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function endFunction() {\r\n            functionStack.pop();\r\n        }\r\n\r\n        /**\r\n         * Save the block and Evaluate the node\r\n         * @param {ASTNode} node node to evaluate\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function pushBlock(node) {\r\n            const len = ++functionStack[functionStack.length - 1];\r\n\r\n            if (len > maxDepth) {\r\n                context.report({ node, messageId: \"tooDeeply\", data: { depth: len, maxDepth } });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Pop the saved block\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function popBlock() {\r\n            functionStack[functionStack.length - 1]--;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            Program: startFunction,\r\n            FunctionDeclaration: startFunction,\r\n            FunctionExpression: startFunction,\r\n            ArrowFunctionExpression: startFunction,\r\n            StaticBlock: startFunction,\r\n\r\n            IfStatement(node) {\r\n                if (node.parent.type !== \"IfStatement\") {\r\n                    pushBlock(node);\r\n                }\r\n            },\r\n            SwitchStatement: pushBlock,\r\n            TryStatement: pushBlock,\r\n            DoWhileStatement: pushBlock,\r\n            WhileStatement: pushBlock,\r\n            WithStatement: pushBlock,\r\n            ForStatement: pushBlock,\r\n            ForInStatement: pushBlock,\r\n            ForOfStatement: pushBlock,\r\n\r\n            \"IfStatement:exit\": popBlock,\r\n            \"SwitchStatement:exit\": popBlock,\r\n            \"TryStatement:exit\": popBlock,\r\n            \"DoWhileStatement:exit\": popBlock,\r\n            \"WhileStatement:exit\": popBlock,\r\n            \"WithStatement:exit\": popBlock,\r\n            \"ForStatement:exit\": popBlock,\r\n            \"ForInStatement:exit\": popBlock,\r\n            \"ForOfStatement:exit\": popBlock,\r\n\r\n            \"FunctionDeclaration:exit\": endFunction,\r\n            \"FunctionExpression:exit\": endFunction,\r\n            \"ArrowFunctionExpression:exit\": endFunction,\r\n            \"StaticBlock:exit\": endFunction,\r\n            \"Program:exit\": endFunction\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}