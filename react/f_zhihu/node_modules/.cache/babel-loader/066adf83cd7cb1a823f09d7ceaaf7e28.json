{"ast":null,"code":"/**\r\n * @author Toru Nagashima <https://github.com/mysticatea>\r\n * See LICENSE file in root directory for full license.\r\n */\n\"use strict\";\n\nconst KEYS = require(\"./visitor-keys.json\"); // Types.\n\n\nconst NODE_TYPES = Object.freeze(Object.keys(KEYS)); // Freeze the keys.\n\nfor (const type of NODE_TYPES) {\n  Object.freeze(KEYS[type]);\n}\n\nObject.freeze(KEYS); // List to ignore keys.\n\nconst KEY_BLACKLIST = new Set([\"parent\", \"leadingComments\", \"trailingComments\"]);\n/**\r\n * Check whether a given key should be used or not.\r\n * @param {string} key The key to check.\r\n * @returns {boolean} `true` if the key should be used.\r\n */\n\nfunction filterKey(key) {\n  return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n} //------------------------------------------------------------------------------\n// Public interfaces\n//------------------------------------------------------------------------------\n\n\nmodule.exports = Object.freeze({\n  /**\r\n   * Visitor keys.\r\n   * @type {{ [type: string]: string[] | undefined }}\r\n   */\n  KEYS,\n\n  /**\r\n   * Get visitor keys of a given node.\r\n   * @param {Object} node The AST node to get keys.\r\n   * @returns {string[]} Visitor keys of the node.\r\n   */\n  getKeys(node) {\n    return Object.keys(node).filter(filterKey);\n  },\n\n  // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\r\n   * Make the union set with `KEYS` and given keys.\r\n   * @param {Object} additionalKeys The additional keys.\r\n   * @returns {{ [type: string]: string[] | undefined }} The union set.\r\n   */\n  unionWith(additionalKeys) {\n    const retv = Object.assign({}, KEYS);\n\n    for (const type of Object.keys(additionalKeys)) {\n      if (retv.hasOwnProperty(type)) {\n        const keys = new Set(additionalKeys[type]);\n\n        for (const key of retv[type]) {\n          keys.add(key);\n        }\n\n        retv[type] = Object.freeze(Array.from(keys));\n      } else {\n        retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n      }\n    }\n\n    return Object.freeze(retv);\n  }\n\n});","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint-utils/node_modules/eslint-visitor-keys/lib/index.js"],"names":["KEYS","require","NODE_TYPES","Object","freeze","keys","type","KEY_BLACKLIST","Set","filterKey","key","has","module","exports","getKeys","node","filter","unionWith","additionalKeys","retv","assign","hasOwnProperty","add","Array","from"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,qBAAD,CAApB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,IAAP,CAAYL,IAAZ,CAAd,CAAnB,C,CAEA;;AACA,KAAK,MAAMM,IAAX,IAAmBJ,UAAnB,EAA+B;AAC3BC,EAAAA,MAAM,CAACC,MAAP,CAAcJ,IAAI,CAACM,IAAD,CAAlB;AACH;;AACDH,MAAM,CAACC,MAAP,CAAcJ,IAAd,E,CAEA;;AACA,MAAMO,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,QAD0B,EAE1B,iBAF0B,EAG1B,kBAH0B,CAAR,CAAtB;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACpB,SAAO,CAACH,aAAa,CAACI,GAAd,CAAkBD,GAAlB,CAAD,IAA2BA,GAAG,CAAC,CAAD,CAAH,KAAW,GAA7C;AACH,C,CAED;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBV,MAAM,CAACC,MAAP,CAAc;AAE3B;AACJ;AACA;AACA;AACIJ,EAAAA,IAN2B;;AAQ3B;AACJ;AACA;AACA;AACA;AACIc,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,WAAOZ,MAAM,CAACE,IAAP,CAAYU,IAAZ,EAAkBC,MAAlB,CAAyBP,SAAzB,CAAP;AACH,GAf0B;;AAiB3B;AACA;;AACA;AACJ;AACA;AACA;AACA;AACIQ,EAAAA,SAAS,CAACC,cAAD,EAAiB;AACtB,UAAMC,IAAI,GAAGhB,MAAM,CAACiB,MAAP,CAAc,EAAd,EAAkBpB,IAAlB,CAAb;;AAEA,SAAK,MAAMM,IAAX,IAAmBH,MAAM,CAACE,IAAP,CAAYa,cAAZ,CAAnB,EAAgD;AAC5C,UAAIC,IAAI,CAACE,cAAL,CAAoBf,IAApB,CAAJ,EAA+B;AAC3B,cAAMD,IAAI,GAAG,IAAIG,GAAJ,CAAQU,cAAc,CAACZ,IAAD,CAAtB,CAAb;;AAEA,aAAK,MAAMI,GAAX,IAAkBS,IAAI,CAACb,IAAD,CAAtB,EAA8B;AAC1BD,UAAAA,IAAI,CAACiB,GAAL,CAASZ,GAAT;AACH;;AAEDS,QAAAA,IAAI,CAACb,IAAD,CAAJ,GAAaH,MAAM,CAACC,MAAP,CAAcmB,KAAK,CAACC,IAAN,CAAWnB,IAAX,CAAd,CAAb;AACH,OARD,MAQO;AACHc,QAAAA,IAAI,CAACb,IAAD,CAAJ,GAAaH,MAAM,CAACC,MAAP,CAAcmB,KAAK,CAACC,IAAN,CAAWN,cAAc,CAACZ,IAAD,CAAzB,CAAd,CAAb;AACH;AACJ;;AAED,WAAOH,MAAM,CAACC,MAAP,CAAce,IAAd,CAAP;AACH;;AA1C0B,CAAd,CAAjB","sourcesContent":["/**\r\n * @author Toru Nagashima <https://github.com/mysticatea>\r\n * See LICENSE file in root directory for full license.\r\n */\r\n\"use strict\";\r\n\r\nconst KEYS = require(\"./visitor-keys.json\");\r\n\r\n// Types.\r\nconst NODE_TYPES = Object.freeze(Object.keys(KEYS));\r\n\r\n// Freeze the keys.\r\nfor (const type of NODE_TYPES) {\r\n    Object.freeze(KEYS[type]);\r\n}\r\nObject.freeze(KEYS);\r\n\r\n// List to ignore keys.\r\nconst KEY_BLACKLIST = new Set([\r\n    \"parent\",\r\n    \"leadingComments\",\r\n    \"trailingComments\"\r\n]);\r\n\r\n/**\r\n * Check whether a given key should be used or not.\r\n * @param {string} key The key to check.\r\n * @returns {boolean} `true` if the key should be used.\r\n */\r\nfunction filterKey(key) {\r\n    return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Public interfaces\r\n//------------------------------------------------------------------------------\r\n\r\nmodule.exports = Object.freeze({\r\n\r\n    /**\r\n     * Visitor keys.\r\n     * @type {{ [type: string]: string[] | undefined }}\r\n     */\r\n    KEYS,\r\n\r\n    /**\r\n     * Get visitor keys of a given node.\r\n     * @param {Object} node The AST node to get keys.\r\n     * @returns {string[]} Visitor keys of the node.\r\n     */\r\n    getKeys(node) {\r\n        return Object.keys(node).filter(filterKey);\r\n    },\r\n\r\n    // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\r\n    // eslint-disable-next-line valid-jsdoc\r\n    /**\r\n     * Make the union set with `KEYS` and given keys.\r\n     * @param {Object} additionalKeys The additional keys.\r\n     * @returns {{ [type: string]: string[] | undefined }} The union set.\r\n     */\r\n    unionWith(additionalKeys) {\r\n        const retv = Object.assign({}, KEYS);\r\n\r\n        for (const type of Object.keys(additionalKeys)) {\r\n            if (retv.hasOwnProperty(type)) {\r\n                const keys = new Set(additionalKeys[type]);\r\n\r\n                for (const key of retv[type]) {\r\n                    keys.add(key);\r\n                }\r\n\r\n                retv[type] = Object.freeze(Array.from(keys));\r\n            } else {\r\n                retv[type] = Object.freeze(Array.from(additionalKeys[type]));\r\n            }\r\n        }\r\n\r\n        return Object.freeze(retv);\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}