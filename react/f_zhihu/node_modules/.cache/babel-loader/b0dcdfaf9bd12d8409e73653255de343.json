{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when a function has too many parameters\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of parameters in function definitions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-params\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const option = context.options[0];\n    let numParams = 3;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      numParams = option.maximum || option.max;\n    }\n\n    if (typeof option === \"number\") {\n      numParams = option;\n    }\n    /**\r\n     * Checks a function to see if it has too many parameters.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function checkFunction(node) {\n      if (node.params.length > numParams) {\n        context.report({\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          node,\n          messageId: \"exceed\",\n          data: {\n            name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\n            count: node.params.length,\n            max: numParams\n          }\n        });\n      }\n    }\n\n    return {\n      FunctionDeclaration: checkFunction,\n      ArrowFunctionExpression: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/max-params.js"],"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","option","options","numParams","Object","prototype","hasOwnProperty","call","checkFunction","node","params","length","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","count","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqBD,OAAO,CAAC,wBAAD,CAAlC,C,CAEA;AACA;AACA;;AAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gEADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIN,QAAAA,IAAI,EAAE,SADV;AAEIO,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIP,QAAAA,IAAI,EAAE,QADV;AAEIQ,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAE;AACLT,YAAAA,IAAI,EAAE,SADD;AAELO,YAAAA,OAAO,EAAE;AAFJ,WADD;AAKRG,UAAAA,GAAG,EAAE;AACDV,YAAAA,IAAI,EAAE,SADL;AAEDO,YAAAA,OAAO,EAAE;AAFR;AALG,SAFhB;AAYII,QAAAA,oBAAoB,EAAE;AAZ1B,OALG;AADX,KADI,CATN;AAiCFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAjCR,GADO;;AAuCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,UAAMC,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,QACI,OAAOF,MAAP,KAAkB,QAAlB,KACCG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,SAA7C,KAA2DG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,KAA7C,CAD5D,CADJ,EAGE;AACEE,MAAAA,SAAS,GAAGF,MAAM,CAACT,OAAP,IAAkBS,MAAM,CAACR,GAArC;AACH;;AACD,QAAI,OAAOQ,MAAP,KAAkB,QAAtB,EAAgC;AAC5BE,MAAAA,SAAS,GAAGF,MAAZ;AACH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASO,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,UAAIA,IAAI,CAACC,MAAL,CAAYC,MAAZ,GAAqBR,SAAzB,EAAoC;AAChCL,QAAAA,OAAO,CAACc,MAAR,CAAe;AACXC,UAAAA,GAAG,EAAEpC,QAAQ,CAACqC,kBAAT,CAA4BL,IAA5B,EAAkCV,UAAlC,CADM;AAEXU,UAAAA,IAFW;AAGXM,UAAAA,SAAS,EAAE,QAHA;AAIXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAEtC,cAAc,CAACF,QAAQ,CAACyC,uBAAT,CAAiCT,IAAjC,CAAD,CADlB;AAEFU,YAAAA,KAAK,EAAEV,IAAI,CAACC,MAAL,CAAYC,MAFjB;AAGFlB,YAAAA,GAAG,EAAEU;AAHH;AAJK,SAAf;AAUH;AACJ;;AAED,WAAO;AACHiB,MAAAA,mBAAmB,EAAEZ,aADlB;AAEHa,MAAAA,uBAAuB,EAAEb,aAFtB;AAGHc,MAAAA,kBAAkB,EAAEd;AAHjB,KAAP;AAMH;;AAjFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when a function has too many parameters\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce a maximum number of parameters in function definitions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/max-params\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                oneOf: [\r\n                    {\r\n                        type: \"integer\",\r\n                        minimum: 0\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            maximum: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            },\r\n                            max: {\r\n                                type: \"integer\",\r\n                                minimum: 0\r\n                            }\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        messages: {\r\n            exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const option = context.options[0];\r\n        let numParams = 3;\r\n\r\n        if (\r\n            typeof option === \"object\" &&\r\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\r\n        ) {\r\n            numParams = option.maximum || option.max;\r\n        }\r\n        if (typeof option === \"number\") {\r\n            numParams = option;\r\n        }\r\n\r\n        /**\r\n         * Checks a function to see if it has too many parameters.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkFunction(node) {\r\n            if (node.params.length > numParams) {\r\n                context.report({\r\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\r\n                    node,\r\n                    messageId: \"exceed\",\r\n                    data: {\r\n                        name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\r\n                        count: node.params.length,\r\n                        max: numParams\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: checkFunction,\r\n            ArrowFunctionExpression: checkFunction,\r\n            FunctionExpression: checkFunction\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}