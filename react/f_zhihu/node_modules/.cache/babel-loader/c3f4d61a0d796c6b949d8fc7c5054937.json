{"ast":null,"code":"/**\r\n * @fileoverview Specify the maximum number of statements allowed per line.\r\n * @author Kenneth Williams\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce a maximum number of statements allowed per line\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-statements-per-line\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        max: {\n          type: \"integer\",\n          minimum: 1,\n          default: 1\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          options = context.options[0] || {},\n          maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\n    let lastStatementLine = 0,\n        numberOfStatementsOnThisLine = 0,\n        firstExtraStatement; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\n    /**\r\n     * Reports with the first extra statement, and clears it.\r\n     * @returns {void}\r\n     */\n\n    function reportFirstExtraStatementAndClear() {\n      if (firstExtraStatement) {\n        context.report({\n          node: firstExtraStatement,\n          messageId: \"exceed\",\n          data: {\n            numberOfStatementsOnThisLine,\n            maxStatementsPerLine,\n            statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\n          }\n        });\n      }\n\n      firstExtraStatement = null;\n    }\n    /**\r\n     * Gets the actual last token of a given node.\r\n     * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\r\n     * @returns {Token} The actual last token.\r\n     */\n\n\n    function getActualLastToken(node) {\n      return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n    }\n    /**\r\n     * Addresses a given node.\r\n     * It updates the state of this rule, then reports the node if the node violated this rule.\r\n     * @param {ASTNode} node A node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function enterStatement(node) {\n      const line = node.loc.start.line;\n      /*\r\n       * Skip to allow non-block statements if this is direct child of control statements.\r\n       * `if (a) foo();` is counted as 1.\r\n       * But `if (a) foo(); else foo();` should be counted as 2.\r\n       */\n\n      if (SINGLE_CHILD_ALLOWED.test(node.parent.type) && node.parent.alternate !== node) {\n        return;\n      } // Update state.\n\n\n      if (line === lastStatementLine) {\n        numberOfStatementsOnThisLine += 1;\n      } else {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      } // Reports if the node violated this rule.\n\n\n      if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\n        firstExtraStatement = firstExtraStatement || node;\n      }\n    }\n    /**\r\n     * Updates the state of this rule with the end line of leaving node to check with the next statement.\r\n     * @param {ASTNode} node A node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function leaveStatement(node) {\n      const line = getActualLastToken(node).loc.end.line; // Update state.\n\n      if (line !== lastStatementLine) {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      BreakStatement: enterStatement,\n      ClassDeclaration: enterStatement,\n      ContinueStatement: enterStatement,\n      DebuggerStatement: enterStatement,\n      DoWhileStatement: enterStatement,\n      ExpressionStatement: enterStatement,\n      ForInStatement: enterStatement,\n      ForOfStatement: enterStatement,\n      ForStatement: enterStatement,\n      FunctionDeclaration: enterStatement,\n      IfStatement: enterStatement,\n      ImportDeclaration: enterStatement,\n      LabeledStatement: enterStatement,\n      ReturnStatement: enterStatement,\n      SwitchStatement: enterStatement,\n      ThrowStatement: enterStatement,\n      TryStatement: enterStatement,\n      VariableDeclaration: enterStatement,\n      WhileStatement: enterStatement,\n      WithStatement: enterStatement,\n      ExportNamedDeclaration: enterStatement,\n      ExportDefaultDeclaration: enterStatement,\n      ExportAllDeclaration: enterStatement,\n      \"BreakStatement:exit\": leaveStatement,\n      \"ClassDeclaration:exit\": leaveStatement,\n      \"ContinueStatement:exit\": leaveStatement,\n      \"DebuggerStatement:exit\": leaveStatement,\n      \"DoWhileStatement:exit\": leaveStatement,\n      \"ExpressionStatement:exit\": leaveStatement,\n      \"ForInStatement:exit\": leaveStatement,\n      \"ForOfStatement:exit\": leaveStatement,\n      \"ForStatement:exit\": leaveStatement,\n      \"FunctionDeclaration:exit\": leaveStatement,\n      \"IfStatement:exit\": leaveStatement,\n      \"ImportDeclaration:exit\": leaveStatement,\n      \"LabeledStatement:exit\": leaveStatement,\n      \"ReturnStatement:exit\": leaveStatement,\n      \"SwitchStatement:exit\": leaveStatement,\n      \"ThrowStatement:exit\": leaveStatement,\n      \"TryStatement:exit\": leaveStatement,\n      \"VariableDeclaration:exit\": leaveStatement,\n      \"WhileStatement:exit\": leaveStatement,\n      \"WithStatement:exit\": leaveStatement,\n      \"ExportNamedDeclaration:exit\": leaveStatement,\n      \"ExportDefaultDeclaration:exit\": leaveStatement,\n      \"ExportAllDeclaration:exit\": leaveStatement,\n      \"Program:exit\": reportFirstExtraStatementAndClear\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/max-statements-per-line.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","max","minimum","default","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","options","maxStatementsPerLine","lastStatementLine","numberOfStatementsOnThisLine","firstExtraStatement","SINGLE_CHILD_ALLOWED","reportFirstExtraStatementAndClear","report","node","messageId","data","statements","getActualLastToken","getLastToken","isNotSemicolonToken","enterStatement","line","loc","start","test","parent","alternate","leaveStatement","end","BreakStatement","ClassDeclaration","ContinueStatement","DebuggerStatement","DoWhileStatement","ExpressionStatement","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","IfStatement","ImportDeclaration","LabeledStatement","ReturnStatement","SwitchStatement","ThrowStatement","TryStatement","VariableDeclaration","WhileStatement","WithStatement","ExportNamedDeclaration","ExportDefaultDeclaration","ExportAllDeclaration"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Specify the maximum number of statements allowed per line.\r\n * @author Kenneth Williams\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce a maximum number of statements allowed per line\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/max-statements-per-line\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    max: {\r\n                        type: \"integer\",\r\n                        minimum: 1,\r\n                        default: 1\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n        messages: {\r\n            exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const sourceCode = context.getSourceCode(),\r\n            options = context.options[0] || {},\r\n            maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\r\n\r\n        let lastStatementLine = 0,\r\n            numberOfStatementsOnThisLine = 0,\r\n            firstExtraStatement;\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\r\n\r\n        /**\r\n         * Reports with the first extra statement, and clears it.\r\n         * @returns {void}\r\n         */\r\n        function reportFirstExtraStatementAndClear() {\r\n            if (firstExtraStatement) {\r\n                context.report({\r\n                    node: firstExtraStatement,\r\n                    messageId: \"exceed\",\r\n                    data: {\r\n                        numberOfStatementsOnThisLine,\r\n                        maxStatementsPerLine,\r\n                        statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\r\n                    }\r\n                });\r\n            }\r\n            firstExtraStatement = null;\r\n        }\r\n\r\n        /**\r\n         * Gets the actual last token of a given node.\r\n         * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\r\n         * @returns {Token} The actual last token.\r\n         */\r\n        function getActualLastToken(node) {\r\n            return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\r\n        }\r\n\r\n        /**\r\n         * Addresses a given node.\r\n         * It updates the state of this rule, then reports the node if the node violated this rule.\r\n         * @param {ASTNode} node A node to check.\r\n         * @returns {void}\r\n         */\r\n        function enterStatement(node) {\r\n            const line = node.loc.start.line;\r\n\r\n            /*\r\n             * Skip to allow non-block statements if this is direct child of control statements.\r\n             * `if (a) foo();` is counted as 1.\r\n             * But `if (a) foo(); else foo();` should be counted as 2.\r\n             */\r\n            if (SINGLE_CHILD_ALLOWED.test(node.parent.type) &&\r\n                node.parent.alternate !== node\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            // Update state.\r\n            if (line === lastStatementLine) {\r\n                numberOfStatementsOnThisLine += 1;\r\n            } else {\r\n                reportFirstExtraStatementAndClear();\r\n                numberOfStatementsOnThisLine = 1;\r\n                lastStatementLine = line;\r\n            }\r\n\r\n            // Reports if the node violated this rule.\r\n            if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\r\n                firstExtraStatement = firstExtraStatement || node;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Updates the state of this rule with the end line of leaving node to check with the next statement.\r\n         * @param {ASTNode} node A node to check.\r\n         * @returns {void}\r\n         */\r\n        function leaveStatement(node) {\r\n            const line = getActualLastToken(node).loc.end.line;\r\n\r\n            // Update state.\r\n            if (line !== lastStatementLine) {\r\n                reportFirstExtraStatementAndClear();\r\n                numberOfStatementsOnThisLine = 1;\r\n                lastStatementLine = line;\r\n            }\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            BreakStatement: enterStatement,\r\n            ClassDeclaration: enterStatement,\r\n            ContinueStatement: enterStatement,\r\n            DebuggerStatement: enterStatement,\r\n            DoWhileStatement: enterStatement,\r\n            ExpressionStatement: enterStatement,\r\n            ForInStatement: enterStatement,\r\n            ForOfStatement: enterStatement,\r\n            ForStatement: enterStatement,\r\n            FunctionDeclaration: enterStatement,\r\n            IfStatement: enterStatement,\r\n            ImportDeclaration: enterStatement,\r\n            LabeledStatement: enterStatement,\r\n            ReturnStatement: enterStatement,\r\n            SwitchStatement: enterStatement,\r\n            ThrowStatement: enterStatement,\r\n            TryStatement: enterStatement,\r\n            VariableDeclaration: enterStatement,\r\n            WhileStatement: enterStatement,\r\n            WithStatement: enterStatement,\r\n            ExportNamedDeclaration: enterStatement,\r\n            ExportDefaultDeclaration: enterStatement,\r\n            ExportAllDeclaration: enterStatement,\r\n\r\n            \"BreakStatement:exit\": leaveStatement,\r\n            \"ClassDeclaration:exit\": leaveStatement,\r\n            \"ContinueStatement:exit\": leaveStatement,\r\n            \"DebuggerStatement:exit\": leaveStatement,\r\n            \"DoWhileStatement:exit\": leaveStatement,\r\n            \"ExpressionStatement:exit\": leaveStatement,\r\n            \"ForInStatement:exit\": leaveStatement,\r\n            \"ForOfStatement:exit\": leaveStatement,\r\n            \"ForStatement:exit\": leaveStatement,\r\n            \"FunctionDeclaration:exit\": leaveStatement,\r\n            \"IfStatement:exit\": leaveStatement,\r\n            \"ImportDeclaration:exit\": leaveStatement,\r\n            \"LabeledStatement:exit\": leaveStatement,\r\n            \"ReturnStatement:exit\": leaveStatement,\r\n            \"SwitchStatement:exit\": leaveStatement,\r\n            \"ThrowStatement:exit\": leaveStatement,\r\n            \"TryStatement:exit\": leaveStatement,\r\n            \"VariableDeclaration:exit\": leaveStatement,\r\n            \"WhileStatement:exit\": leaveStatement,\r\n            \"WithStatement:exit\": leaveStatement,\r\n            \"ExportNamedDeclaration:exit\": leaveStatement,\r\n            \"ExportDefaultDeclaration:exit\": leaveStatement,\r\n            \"ExportAllDeclaration:exit\": leaveStatement,\r\n            \"Program:exit\": reportFirstExtraStatementAndClear\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}