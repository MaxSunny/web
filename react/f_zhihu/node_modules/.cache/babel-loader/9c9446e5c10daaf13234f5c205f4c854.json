{"ast":null,"code":"/**\r\n * @fileoverview Comma spacing - validates spacing before and after comma\r\n * @author Vignesh Anand aka vegetableman.\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before and after commas\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/comma-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missing: \"A space is required {{loc}} ','.\",\n      unexpected: \"There should be no space {{loc}} ','.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const options = {\n      before: context.options[0] ? context.options[0].before : false,\n      after: context.options[0] ? context.options[0].after : true\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // list of comma tokens to ignore for the check of leading whitespace\n\n    const commaTokensToIgnore = [];\n    /**\r\n     * Reports a spacing error with an appropriate message.\r\n     * @param {ASTNode} node The binary expression node to report.\r\n     * @param {string} loc Is the error \"before\" or \"after\" the comma?\r\n     * @param {ASTNode} otherNode The node at the left or right of `node`\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function report(node, loc, otherNode) {\n      context.report({\n        node,\n\n        fix(fixer) {\n          if (options[loc]) {\n            if (loc === \"before\") {\n              return fixer.insertTextBefore(node, \" \");\n            }\n\n            return fixer.insertTextAfter(node, \" \");\n          }\n\n          let start, end;\n          const newText = \"\";\n\n          if (loc === \"before\") {\n            start = otherNode.range[1];\n            end = node.range[0];\n          } else {\n            start = node.range[1];\n            end = otherNode.range[0];\n          }\n\n          return fixer.replaceTextRange([start, end], newText);\n        },\n\n        messageId: options[loc] ? \"missing\" : \"unexpected\",\n        data: {\n          loc\n        }\n      });\n    }\n    /**\r\n     * Validates the spacing around a comma token.\r\n     * @param {Object} tokens The tokens to be validated.\r\n     * @param {Token} tokens.comma The token representing the comma.\r\n     * @param {Token} [tokens.left] The last token before the comma.\r\n     * @param {Token} [tokens.right] The first token after the comma.\r\n     * @param {Token|ASTNode} reportItem The item to use when reporting an error.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function validateCommaItemSpacing(tokens, reportItem) {\n      if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) && options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma)) {\n        report(reportItem, \"before\", tokens.left);\n      }\n\n      if (tokens.right && astUtils.isClosingParenToken(tokens.right)) {\n        return;\n      }\n\n      if (tokens.right && !options.after && tokens.right.type === \"Line\") {\n        return;\n      }\n\n      if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) && options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right)) {\n        report(reportItem, \"after\", tokens.right);\n      }\n    }\n    /**\r\n     * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\r\n     * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\r\n     * @returns {void}\r\n     */\n\n\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n      node.elements.forEach(element => {\n        let token;\n\n        if (element === null) {\n          token = sourceCode.getTokenAfter(previousToken);\n\n          if (astUtils.isCommaToken(token)) {\n            commaTokensToIgnore.push(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n\n        previousToken = token;\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"Program:exit\"() {\n        tokensAndComments.forEach((token, i) => {\n          if (!astUtils.isCommaToken(token)) {\n            return;\n          }\n\n          if (token && token.type === \"JSXText\") {\n            return;\n          }\n\n          const previousToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n          validateCommaItemSpacing({\n            comma: token,\n            left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.includes(token) ? null : previousToken,\n            right: astUtils.isCommaToken(nextToken) ? null : nextToken\n          }, token);\n        });\n      },\n\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/comma-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","missing","unexpected","create","context","sourceCode","getSourceCode","tokensAndComments","options","commaTokensToIgnore","report","node","loc","otherNode","fix","fixer","insertTextBefore","insertTextAfter","start","end","newText","range","replaceTextRange","messageId","data","validateCommaItemSpacing","tokens","reportItem","left","isTokenOnSameLine","comma","isSpaceBetweenTokens","right","isClosingParenToken","addNullElementsToIgnoreList","previousToken","getFirstToken","elements","forEach","element","token","getTokenAfter","isCommaToken","push","i","nextToken","includes","ArrayExpression","ArrayPattern"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Comma spacing - validates spacing before and after comma\r\n * @author Vignesh Anand aka vegetableman.\r\n */\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce consistent spacing before and after commas\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/comma-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    before: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    },\r\n                    after: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            missing: \"A space is required {{loc}} ','.\",\r\n            unexpected: \"There should be no space {{loc}} ','.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const sourceCode = context.getSourceCode();\r\n        const tokensAndComments = sourceCode.tokensAndComments;\r\n\r\n        const options = {\r\n            before: context.options[0] ? context.options[0].before : false,\r\n            after: context.options[0] ? context.options[0].after : true\r\n        };\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        // list of comma tokens to ignore for the check of leading whitespace\r\n        const commaTokensToIgnore = [];\r\n\r\n        /**\r\n         * Reports a spacing error with an appropriate message.\r\n         * @param {ASTNode} node The binary expression node to report.\r\n         * @param {string} loc Is the error \"before\" or \"after\" the comma?\r\n         * @param {ASTNode} otherNode The node at the left or right of `node`\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function report(node, loc, otherNode) {\r\n            context.report({\r\n                node,\r\n                fix(fixer) {\r\n                    if (options[loc]) {\r\n                        if (loc === \"before\") {\r\n                            return fixer.insertTextBefore(node, \" \");\r\n                        }\r\n                        return fixer.insertTextAfter(node, \" \");\r\n\r\n                    }\r\n                    let start, end;\r\n                    const newText = \"\";\r\n\r\n                    if (loc === \"before\") {\r\n                        start = otherNode.range[1];\r\n                        end = node.range[0];\r\n                    } else {\r\n                        start = node.range[1];\r\n                        end = otherNode.range[0];\r\n                    }\r\n\r\n                    return fixer.replaceTextRange([start, end], newText);\r\n\r\n                },\r\n                messageId: options[loc] ? \"missing\" : \"unexpected\",\r\n                data: {\r\n                    loc\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Validates the spacing around a comma token.\r\n         * @param {Object} tokens The tokens to be validated.\r\n         * @param {Token} tokens.comma The token representing the comma.\r\n         * @param {Token} [tokens.left] The last token before the comma.\r\n         * @param {Token} [tokens.right] The first token after the comma.\r\n         * @param {Token|ASTNode} reportItem The item to use when reporting an error.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function validateCommaItemSpacing(tokens, reportItem) {\r\n            if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&\r\n                    (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))\r\n            ) {\r\n                report(reportItem, \"before\", tokens.left);\r\n            }\r\n\r\n            if (tokens.right && astUtils.isClosingParenToken(tokens.right)) {\r\n                return;\r\n            }\r\n\r\n            if (tokens.right && !options.after && tokens.right.type === \"Line\") {\r\n                return;\r\n            }\r\n\r\n            if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&\r\n                    (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))\r\n            ) {\r\n                report(reportItem, \"after\", tokens.right);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\r\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\r\n         * @returns {void}\r\n         */\r\n        function addNullElementsToIgnoreList(node) {\r\n            let previousToken = sourceCode.getFirstToken(node);\r\n\r\n            node.elements.forEach(element => {\r\n                let token;\r\n\r\n                if (element === null) {\r\n                    token = sourceCode.getTokenAfter(previousToken);\r\n\r\n                    if (astUtils.isCommaToken(token)) {\r\n                        commaTokensToIgnore.push(token);\r\n                    }\r\n                } else {\r\n                    token = sourceCode.getTokenAfter(element);\r\n                }\r\n\r\n                previousToken = token;\r\n            });\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            \"Program:exit\"() {\r\n                tokensAndComments.forEach((token, i) => {\r\n\r\n                    if (!astUtils.isCommaToken(token)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (token && token.type === \"JSXText\") {\r\n                        return;\r\n                    }\r\n\r\n                    const previousToken = tokensAndComments[i - 1];\r\n                    const nextToken = tokensAndComments[i + 1];\r\n\r\n                    validateCommaItemSpacing({\r\n                        comma: token,\r\n                        left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.includes(token) ? null : previousToken,\r\n                        right: astUtils.isCommaToken(nextToken) ? null : nextToken\r\n                    }, token);\r\n                });\r\n            },\r\n            ArrayExpression: addNullElementsToIgnoreList,\r\n            ArrayPattern: addNullElementsToIgnoreList\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}