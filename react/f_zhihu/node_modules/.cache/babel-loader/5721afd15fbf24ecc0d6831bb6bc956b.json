{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow uses of await inside of loops.\r\n * @author Nat Mote (nmote)\r\n */\n\"use strict\";\n/**\r\n * Check whether it should stop traversing ancestors at the given node.\r\n * @param {ASTNode} node A node to check.\r\n * @returns {boolean} `true` if it should stop traversing.\r\n */\n\nfunction isBoundary(node) {\n  const t = node.type;\n  return t === \"FunctionDeclaration\" || t === \"FunctionExpression\" || t === \"ArrowFunctionExpression\" ||\n  /*\r\n   * Don't report the await expressions on for-await-of loop since it's\r\n   * asynchronous iteration intentionally.\r\n   */\n  t === \"ForOfStatement\" && node.await === true;\n}\n/**\r\n * Check whether the given node is in loop.\r\n * @param {ASTNode} node A node to check.\r\n * @param {ASTNode} parent A parent node to check.\r\n * @returns {boolean} `true` if the node is in loop.\r\n */\n\n\nfunction isLooped(node, parent) {\n  switch (parent.type) {\n    case \"ForStatement\":\n      return node === parent.test || node === parent.update || node === parent.body;\n\n    case \"ForOfStatement\":\n    case \"ForInStatement\":\n      return node === parent.body;\n\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n      return node === parent.test || node === parent.body;\n\n    default:\n      return false;\n  }\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow `await` inside of loops\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-await-in-loop\"\n    },\n    schema: [],\n    messages: {\n      unexpectedAwait: \"Unexpected `await` inside a loop.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Validate an await expression.\r\n     * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\r\n     * @returns {void}\r\n     */\n    function validate(awaitNode) {\n      if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\n        return;\n      }\n\n      let node = awaitNode;\n      let parent = node.parent;\n\n      while (parent && !isBoundary(parent)) {\n        if (isLooped(node, parent)) {\n          context.report({\n            node: awaitNode,\n            messageId: \"unexpectedAwait\"\n          });\n          return;\n        }\n\n        node = parent;\n        parent = parent.parent;\n      }\n    }\n\n    return {\n      AwaitExpression: validate,\n      ForOfStatement: validate\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-await-in-loop.js"],"names":["isBoundary","node","t","type","await","isLooped","parent","test","update","body","module","exports","meta","docs","description","recommended","url","schema","messages","unexpectedAwait","create","context","validate","awaitNode","report","messageId","AwaitExpression","ForOfStatement"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAMC,CAAC,GAAGD,IAAI,CAACE,IAAf;AAEA,SACID,CAAC,KAAK,qBAAN,IACAA,CAAC,KAAK,oBADN,IAEAA,CAAC,KAAK,yBAFN;AAIA;AACR;AACA;AACA;AACSA,EAAAA,CAAC,KAAK,gBAAN,IAA0BD,IAAI,CAACG,KAAL,KAAe,IAT9C;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBJ,IAAlB,EAAwBK,MAAxB,EAAgC;AAC5B,UAAQA,MAAM,CAACH,IAAf;AACI,SAAK,cAAL;AACI,aACIF,IAAI,KAAKK,MAAM,CAACC,IAAhB,IACAN,IAAI,KAAKK,MAAM,CAACE,MADhB,IAEAP,IAAI,KAAKK,MAAM,CAACG,IAHpB;;AAMJ,SAAK,gBAAL;AACA,SAAK,gBAAL;AACI,aAAOR,IAAI,KAAKK,MAAM,CAACG,IAAvB;;AAEJ,SAAK,gBAAL;AACA,SAAK,kBAAL;AACI,aAAOR,IAAI,KAAKK,MAAM,CAACC,IAAhB,IAAwBN,IAAI,KAAKK,MAAM,CAACG,IAA/C;;AAEJ;AACI,aAAO,KAAP;AAjBR;AAmBH;AAED;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFT,IAAAA,IAAI,EAAE,SADJ;AAGFU,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,kCADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAXR,GADO;;AAgBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,QAAT,CAAkBC,SAAlB,EAA6B;AACzB,UAAIA,SAAS,CAACpB,IAAV,KAAmB,gBAAnB,IAAuC,CAACoB,SAAS,CAACnB,KAAtD,EAA6D;AACzD;AACH;;AAED,UAAIH,IAAI,GAAGsB,SAAX;AACA,UAAIjB,MAAM,GAAGL,IAAI,CAACK,MAAlB;;AAEA,aAAOA,MAAM,IAAI,CAACN,UAAU,CAACM,MAAD,CAA5B,EAAsC;AAClC,YAAID,QAAQ,CAACJ,IAAD,EAAOK,MAAP,CAAZ,EAA4B;AACxBe,UAAAA,OAAO,CAACG,MAAR,CAAe;AACXvB,YAAAA,IAAI,EAAEsB,SADK;AAEXE,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIA;AACH;;AACDxB,QAAAA,IAAI,GAAGK,MAAP;AACAA,QAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACH;AACJ;;AAED,WAAO;AACHoB,MAAAA,eAAe,EAAEJ,QADd;AAEHK,MAAAA,cAAc,EAAEL;AAFb,KAAP;AAIH;;AAhDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow uses of await inside of loops.\r\n * @author Nat Mote (nmote)\r\n */\r\n\"use strict\";\r\n\r\n/**\r\n * Check whether it should stop traversing ancestors at the given node.\r\n * @param {ASTNode} node A node to check.\r\n * @returns {boolean} `true` if it should stop traversing.\r\n */\r\nfunction isBoundary(node) {\r\n    const t = node.type;\r\n\r\n    return (\r\n        t === \"FunctionDeclaration\" ||\r\n        t === \"FunctionExpression\" ||\r\n        t === \"ArrowFunctionExpression\" ||\r\n\r\n        /*\r\n         * Don't report the await expressions on for-await-of loop since it's\r\n         * asynchronous iteration intentionally.\r\n         */\r\n        (t === \"ForOfStatement\" && node.await === true)\r\n    );\r\n}\r\n\r\n/**\r\n * Check whether the given node is in loop.\r\n * @param {ASTNode} node A node to check.\r\n * @param {ASTNode} parent A parent node to check.\r\n * @returns {boolean} `true` if the node is in loop.\r\n */\r\nfunction isLooped(node, parent) {\r\n    switch (parent.type) {\r\n        case \"ForStatement\":\r\n            return (\r\n                node === parent.test ||\r\n                node === parent.update ||\r\n                node === parent.body\r\n            );\r\n\r\n        case \"ForOfStatement\":\r\n        case \"ForInStatement\":\r\n            return node === parent.body;\r\n\r\n        case \"WhileStatement\":\r\n        case \"DoWhileStatement\":\r\n            return node === parent.test || node === parent.body;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow `await` inside of loops\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-await-in-loop\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedAwait: \"Unexpected `await` inside a loop.\"\r\n        }\r\n    },\r\n    create(context) {\r\n\r\n        /**\r\n         * Validate an await expression.\r\n         * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\r\n         * @returns {void}\r\n         */\r\n        function validate(awaitNode) {\r\n            if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\r\n                return;\r\n            }\r\n\r\n            let node = awaitNode;\r\n            let parent = node.parent;\r\n\r\n            while (parent && !isBoundary(parent)) {\r\n                if (isLooped(node, parent)) {\r\n                    context.report({\r\n                        node: awaitNode,\r\n                        messageId: \"unexpectedAwait\"\r\n                    });\r\n                    return;\r\n                }\r\n                node = parent;\r\n                parent = parent.parent;\r\n            }\r\n        }\r\n\r\n        return {\r\n            AwaitExpression: validate,\r\n            ForOfStatement: validate\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}