{"ast":null,"code":"/*! @author Toru Nagashima <https://github.com/mysticatea> */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar evk = _interopDefault(require('eslint-visitor-keys'));\n/**\r\n * Get the innermost scope which contains a given location.\r\n * @param {Scope} initialScope The initial scope to search.\r\n * @param {Node} node The location to search.\r\n * @returns {Scope} The innermost scope.\r\n */\n\n\nfunction getInnermostScope(initialScope, node) {\n  const location = node.range[0];\n  let scope = initialScope;\n  let found = false;\n\n  do {\n    found = false;\n\n    for (const childScope of scope.childScopes) {\n      const range = childScope.block.range;\n\n      if (range[0] <= location && location < range[1]) {\n        scope = childScope;\n        found = true;\n        break;\n      }\n    }\n  } while (found);\n\n  return scope;\n}\n/**\r\n * Find the variable of a given name.\r\n * @param {Scope} initialScope The scope to start finding.\r\n * @param {string|Node} nameOrNode The variable name to find. If this is a Node object then it should be an Identifier node.\r\n * @returns {Variable|null} The found variable or null.\r\n */\n\n\nfunction findVariable(initialScope, nameOrNode) {\n  let name = \"\";\n  let scope = initialScope;\n\n  if (typeof nameOrNode === \"string\") {\n    name = nameOrNode;\n  } else {\n    name = nameOrNode.name;\n    scope = getInnermostScope(scope, nameOrNode);\n  }\n\n  while (scope != null) {\n    const variable = scope.set.get(name);\n\n    if (variable != null) {\n      return variable;\n    }\n\n    scope = scope.upper;\n  }\n\n  return null;\n}\n/**\r\n * Negate the result of `this` calling.\r\n * @param {Token} token The token to check.\r\n * @returns {boolean} `true` if the result of `this(token)` is `false`.\r\n */\n\n\nfunction negate0(token) {\n  return !this(token); //eslint-disable-line no-invalid-this\n}\n/**\r\n * Creates the negate function of the given function.\r\n * @param {function(Token):boolean} f - The function to negate.\r\n * @returns {function(Token):boolean} Negated function.\r\n */\n\n\nfunction negate(f) {\n  return negate0.bind(f);\n}\n/**\r\n * Checks if the given token is a PunctuatorToken with the given value\r\n * @param {Token} token - The token to check.\r\n * @param {string} value - The value to check.\r\n * @returns {boolean} `true` if the token is a PunctuatorToken with the given value.\r\n */\n\n\nfunction isPunctuatorTokenWithValue(token, value) {\n  return token.type === \"Punctuator\" && token.value === value;\n}\n/**\r\n * Checks if the given token is an arrow token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is an arrow token.\r\n */\n\n\nfunction isArrowToken(token) {\n  return isPunctuatorTokenWithValue(token, \"=>\");\n}\n/**\r\n * Checks if the given token is a comma token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a comma token.\r\n */\n\n\nfunction isCommaToken(token) {\n  return isPunctuatorTokenWithValue(token, \",\");\n}\n/**\r\n * Checks if the given token is a semicolon token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a semicolon token.\r\n */\n\n\nfunction isSemicolonToken(token) {\n  return isPunctuatorTokenWithValue(token, \";\");\n}\n/**\r\n * Checks if the given token is a colon token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a colon token.\r\n */\n\n\nfunction isColonToken(token) {\n  return isPunctuatorTokenWithValue(token, \":\");\n}\n/**\r\n * Checks if the given token is an opening parenthesis token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is an opening parenthesis token.\r\n */\n\n\nfunction isOpeningParenToken(token) {\n  return isPunctuatorTokenWithValue(token, \"(\");\n}\n/**\r\n * Checks if the given token is a closing parenthesis token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a closing parenthesis token.\r\n */\n\n\nfunction isClosingParenToken(token) {\n  return isPunctuatorTokenWithValue(token, \")\");\n}\n/**\r\n * Checks if the given token is an opening square bracket token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is an opening square bracket token.\r\n */\n\n\nfunction isOpeningBracketToken(token) {\n  return isPunctuatorTokenWithValue(token, \"[\");\n}\n/**\r\n * Checks if the given token is a closing square bracket token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a closing square bracket token.\r\n */\n\n\nfunction isClosingBracketToken(token) {\n  return isPunctuatorTokenWithValue(token, \"]\");\n}\n/**\r\n * Checks if the given token is an opening brace token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is an opening brace token.\r\n */\n\n\nfunction isOpeningBraceToken(token) {\n  return isPunctuatorTokenWithValue(token, \"{\");\n}\n/**\r\n * Checks if the given token is a closing brace token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a closing brace token.\r\n */\n\n\nfunction isClosingBraceToken(token) {\n  return isPunctuatorTokenWithValue(token, \"}\");\n}\n/**\r\n * Checks if the given token is a comment token or not.\r\n * @param {Token} token - The token to check.\r\n * @returns {boolean} `true` if the token is a comment token.\r\n */\n\n\nfunction isCommentToken(token) {\n  return [\"Block\", \"Line\", \"Shebang\"].includes(token.type);\n}\n\nconst isNotArrowToken = negate(isArrowToken);\nconst isNotCommaToken = negate(isCommaToken);\nconst isNotSemicolonToken = negate(isSemicolonToken);\nconst isNotColonToken = negate(isColonToken);\nconst isNotOpeningParenToken = negate(isOpeningParenToken);\nconst isNotClosingParenToken = negate(isClosingParenToken);\nconst isNotOpeningBracketToken = negate(isOpeningBracketToken);\nconst isNotClosingBracketToken = negate(isClosingBracketToken);\nconst isNotOpeningBraceToken = negate(isOpeningBraceToken);\nconst isNotClosingBraceToken = negate(isClosingBraceToken);\nconst isNotCommentToken = negate(isCommentToken);\n/**\r\n * Get the `(` token of the given function node.\r\n * @param {Node} node - The function node to get.\r\n * @param {SourceCode} sourceCode - The source code object to get tokens.\r\n * @returns {Token} `(` token.\r\n */\n\nfunction getOpeningParenOfParams(node, sourceCode) {\n  return node.id ? sourceCode.getTokenAfter(node.id, isOpeningParenToken) : sourceCode.getFirstToken(node, isOpeningParenToken);\n}\n/**\r\n * Get the location of the given function node for reporting.\r\n * @param {Node} node - The function node to get.\r\n * @param {SourceCode} sourceCode - The source code object to get tokens.\r\n * @returns {string} The location of the function node for reporting.\r\n */\n\n\nfunction getFunctionHeadLocation(node, sourceCode) {\n  const parent = node.parent;\n  let start = null;\n  let end = null;\n\n  if (node.type === \"ArrowFunctionExpression\") {\n    const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);\n    start = arrowToken.loc.start;\n    end = arrowToken.loc.end;\n  } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\" || parent.type === \"PropertyDefinition\") {\n    start = parent.loc.start;\n    end = getOpeningParenOfParams(node, sourceCode).loc.start;\n  } else {\n    start = node.loc.start;\n    end = getOpeningParenOfParams(node, sourceCode).loc.start;\n  }\n\n  return {\n    start: { ...start\n    },\n    end: { ...end\n    }\n  };\n}\n/* globals globalThis, global, self, window */\n\n\nconst globalObject = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\nconst builtinNames = Object.freeze(new Set([\"Array\", \"ArrayBuffer\", \"BigInt\", \"BigInt64Array\", \"BigUint64Array\", \"Boolean\", \"DataView\", \"Date\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"Float32Array\", \"Float64Array\", \"Function\", \"Infinity\", \"Int16Array\", \"Int32Array\", \"Int8Array\", \"isFinite\", \"isNaN\", \"isPrototypeOf\", \"JSON\", \"Map\", \"Math\", \"NaN\", \"Number\", \"Object\", \"parseFloat\", \"parseInt\", \"Promise\", \"Proxy\", \"Reflect\", \"RegExp\", \"Set\", \"String\", \"Symbol\", \"Uint16Array\", \"Uint32Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"undefined\", \"unescape\", \"WeakMap\", \"WeakSet\"]));\nconst callAllowed = new Set([Array.isArray, typeof BigInt === \"function\" ? BigInt : undefined, Boolean, Date, Date.parse, decodeURI, decodeURIComponent, encodeURI, encodeURIComponent, escape, isFinite, isNaN, isPrototypeOf, ...Object.getOwnPropertyNames(Math).map(k => Math[k]).filter(f => typeof f === \"function\"), Number, Number.isFinite, Number.isNaN, Number.parseFloat, Number.parseInt, Object, Object.entries, Object.is, Object.isExtensible, Object.isFrozen, Object.isSealed, Object.keys, Object.values, parseFloat, parseInt, RegExp, String, String.fromCharCode, String.fromCodePoint, String.raw, Symbol.for, Symbol.keyFor, unescape].filter(f => typeof f === \"function\"));\nconst callPassThrough = new Set([Object.freeze, Object.preventExtensions, Object.seal]);\n/**\r\n * Get the property descriptor.\r\n * @param {object} object The object to get.\r\n * @param {string|number|symbol} name The property name to get.\r\n */\n\nfunction getPropertyDescriptor(object, name) {\n  let x = object;\n\n  while ((typeof x === \"object\" || typeof x === \"function\") && x !== null) {\n    const d = Object.getOwnPropertyDescriptor(x, name);\n\n    if (d) {\n      return d;\n    }\n\n    x = Object.getPrototypeOf(x);\n  }\n\n  return null;\n}\n/**\r\n * Check if a property is getter or not.\r\n * @param {object} object The object to check.\r\n * @param {string|number|symbol} name The property name to check.\r\n */\n\n\nfunction isGetter(object, name) {\n  const d = getPropertyDescriptor(object, name);\n  return d != null && d.get != null;\n}\n/**\r\n * Get the element values of a given node list.\r\n * @param {Node[]} nodeList The node list to get values.\r\n * @param {Scope|undefined} initialScope The initial scope to find variables.\r\n * @returns {any[]|null} The value list if all nodes are constant. Otherwise, null.\r\n */\n\n\nfunction getElementValues(nodeList, initialScope) {\n  const valueList = [];\n\n  for (let i = 0; i < nodeList.length; ++i) {\n    const elementNode = nodeList[i];\n\n    if (elementNode == null) {\n      valueList.length = i + 1;\n    } else if (elementNode.type === \"SpreadElement\") {\n      const argument = getStaticValueR(elementNode.argument, initialScope);\n\n      if (argument == null) {\n        return null;\n      }\n\n      valueList.push(...argument.value);\n    } else {\n      const element = getStaticValueR(elementNode, initialScope);\n\n      if (element == null) {\n        return null;\n      }\n\n      valueList.push(element.value);\n    }\n  }\n\n  return valueList;\n}\n\nconst operations = Object.freeze({\n  ArrayExpression(node, initialScope) {\n    const elements = getElementValues(node.elements, initialScope);\n    return elements != null ? {\n      value: elements\n    } : null;\n  },\n\n  AssignmentExpression(node, initialScope) {\n    if (node.operator === \"=\") {\n      return getStaticValueR(node.right, initialScope);\n    }\n\n    return null;\n  },\n\n  //eslint-disable-next-line complexity\n  BinaryExpression(node, initialScope) {\n    if (node.operator === \"in\" || node.operator === \"instanceof\") {\n      // Not supported.\n      return null;\n    }\n\n    const left = getStaticValueR(node.left, initialScope);\n    const right = getStaticValueR(node.right, initialScope);\n\n    if (left != null && right != null) {\n      switch (node.operator) {\n        case \"==\":\n          return {\n            value: left.value == right.value\n          };\n        //eslint-disable-line eqeqeq\n\n        case \"!=\":\n          return {\n            value: left.value != right.value\n          };\n        //eslint-disable-line eqeqeq\n\n        case \"===\":\n          return {\n            value: left.value === right.value\n          };\n\n        case \"!==\":\n          return {\n            value: left.value !== right.value\n          };\n\n        case \"<\":\n          return {\n            value: left.value < right.value\n          };\n\n        case \"<=\":\n          return {\n            value: left.value <= right.value\n          };\n\n        case \">\":\n          return {\n            value: left.value > right.value\n          };\n\n        case \">=\":\n          return {\n            value: left.value >= right.value\n          };\n\n        case \"<<\":\n          return {\n            value: left.value << right.value\n          };\n\n        case \">>\":\n          return {\n            value: left.value >> right.value\n          };\n\n        case \">>>\":\n          return {\n            value: left.value >>> right.value\n          };\n\n        case \"+\":\n          return {\n            value: left.value + right.value\n          };\n\n        case \"-\":\n          return {\n            value: left.value - right.value\n          };\n\n        case \"*\":\n          return {\n            value: left.value * right.value\n          };\n\n        case \"/\":\n          return {\n            value: left.value / right.value\n          };\n\n        case \"%\":\n          return {\n            value: left.value % right.value\n          };\n\n        case \"**\":\n          return {\n            value: Math.pow(left.value, right.value)\n          };\n\n        case \"|\":\n          return {\n            value: left.value | right.value\n          };\n\n        case \"^\":\n          return {\n            value: left.value ^ right.value\n          };\n\n        case \"&\":\n          return {\n            value: left.value & right.value\n          };\n        // no default\n      }\n    }\n\n    return null;\n  },\n\n  CallExpression(node, initialScope) {\n    const calleeNode = node.callee;\n    const args = getElementValues(node.arguments, initialScope);\n\n    if (args != null) {\n      if (calleeNode.type === \"MemberExpression\") {\n        if (calleeNode.property.type === \"PrivateIdentifier\") {\n          return null;\n        }\n\n        const object = getStaticValueR(calleeNode.object, initialScope);\n\n        if (object != null) {\n          if (object.value == null && (object.optional || node.optional)) {\n            return {\n              value: undefined,\n              optional: true\n            };\n          }\n\n          const property = getStaticPropertyNameValue(calleeNode, initialScope);\n\n          if (property != null) {\n            const receiver = object.value;\n            const methodName = property.value;\n\n            if (callAllowed.has(receiver[methodName])) {\n              return {\n                value: receiver[methodName](...args)\n              };\n            }\n\n            if (callPassThrough.has(receiver[methodName])) {\n              return {\n                value: args[0]\n              };\n            }\n          }\n        }\n      } else {\n        const callee = getStaticValueR(calleeNode, initialScope);\n\n        if (callee != null) {\n          if (callee.value == null && node.optional) {\n            return {\n              value: undefined,\n              optional: true\n            };\n          }\n\n          const func = callee.value;\n\n          if (callAllowed.has(func)) {\n            return {\n              value: func(...args)\n            };\n          }\n\n          if (callPassThrough.has(func)) {\n            return {\n              value: args[0]\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  },\n\n  ConditionalExpression(node, initialScope) {\n    const test = getStaticValueR(node.test, initialScope);\n\n    if (test != null) {\n      return test.value ? getStaticValueR(node.consequent, initialScope) : getStaticValueR(node.alternate, initialScope);\n    }\n\n    return null;\n  },\n\n  ExpressionStatement(node, initialScope) {\n    return getStaticValueR(node.expression, initialScope);\n  },\n\n  Identifier(node, initialScope) {\n    if (initialScope != null) {\n      const variable = findVariable(initialScope, node); // Built-in globals.\n\n      if (variable != null && variable.defs.length === 0 && builtinNames.has(variable.name) && variable.name in globalObject) {\n        return {\n          value: globalObject[variable.name]\n        };\n      } // Constants.\n\n\n      if (variable != null && variable.defs.length === 1) {\n        const def = variable.defs[0];\n\n        if (def.parent && def.parent.kind === \"const\" && // TODO(mysticatea): don't support destructuring here.\n        def.node.id.type === \"Identifier\") {\n          return getStaticValueR(def.node.init, initialScope);\n        }\n      }\n    }\n\n    return null;\n  },\n\n  Literal(node) {\n    //istanbul ignore if : this is implementation-specific behavior.\n    if ((node.regex != null || node.bigint != null) && node.value == null) {\n      // It was a RegExp/BigInt literal, but Node.js didn't support it.\n      return null;\n    }\n\n    return {\n      value: node.value\n    };\n  },\n\n  LogicalExpression(node, initialScope) {\n    const left = getStaticValueR(node.left, initialScope);\n\n    if (left != null) {\n      if (node.operator === \"||\" && Boolean(left.value) === true || node.operator === \"&&\" && Boolean(left.value) === false || node.operator === \"??\" && left.value != null) {\n        return left;\n      }\n\n      const right = getStaticValueR(node.right, initialScope);\n\n      if (right != null) {\n        return right;\n      }\n    }\n\n    return null;\n  },\n\n  MemberExpression(node, initialScope) {\n    if (node.property.type === \"PrivateIdentifier\") {\n      return null;\n    }\n\n    const object = getStaticValueR(node.object, initialScope);\n\n    if (object != null) {\n      if (object.value == null && (object.optional || node.optional)) {\n        return {\n          value: undefined,\n          optional: true\n        };\n      }\n\n      const property = getStaticPropertyNameValue(node, initialScope);\n\n      if (property != null && !isGetter(object.value, property.value)) {\n        return {\n          value: object.value[property.value]\n        };\n      }\n    }\n\n    return null;\n  },\n\n  ChainExpression(node, initialScope) {\n    const expression = getStaticValueR(node.expression, initialScope);\n\n    if (expression != null) {\n      return {\n        value: expression.value\n      };\n    }\n\n    return null;\n  },\n\n  NewExpression(node, initialScope) {\n    const callee = getStaticValueR(node.callee, initialScope);\n    const args = getElementValues(node.arguments, initialScope);\n\n    if (callee != null && args != null) {\n      const Func = callee.value;\n\n      if (callAllowed.has(Func)) {\n        return {\n          value: new Func(...args)\n        };\n      }\n    }\n\n    return null;\n  },\n\n  ObjectExpression(node, initialScope) {\n    const object = {};\n\n    for (const propertyNode of node.properties) {\n      if (propertyNode.type === \"Property\") {\n        if (propertyNode.kind !== \"init\") {\n          return null;\n        }\n\n        const key = getStaticPropertyNameValue(propertyNode, initialScope);\n        const value = getStaticValueR(propertyNode.value, initialScope);\n\n        if (key == null || value == null) {\n          return null;\n        }\n\n        object[key.value] = value.value;\n      } else if (propertyNode.type === \"SpreadElement\" || propertyNode.type === \"ExperimentalSpreadProperty\") {\n        const argument = getStaticValueR(propertyNode.argument, initialScope);\n\n        if (argument == null) {\n          return null;\n        }\n\n        Object.assign(object, argument.value);\n      } else {\n        return null;\n      }\n    }\n\n    return {\n      value: object\n    };\n  },\n\n  SequenceExpression(node, initialScope) {\n    const last = node.expressions[node.expressions.length - 1];\n    return getStaticValueR(last, initialScope);\n  },\n\n  TaggedTemplateExpression(node, initialScope) {\n    const tag = getStaticValueR(node.tag, initialScope);\n    const expressions = getElementValues(node.quasi.expressions, initialScope);\n\n    if (tag != null && expressions != null) {\n      const func = tag.value;\n      const strings = node.quasi.quasis.map(q => q.value.cooked);\n      strings.raw = node.quasi.quasis.map(q => q.value.raw);\n\n      if (func === String.raw) {\n        return {\n          value: func(strings, ...expressions)\n        };\n      }\n    }\n\n    return null;\n  },\n\n  TemplateLiteral(node, initialScope) {\n    const expressions = getElementValues(node.expressions, initialScope);\n\n    if (expressions != null) {\n      let value = node.quasis[0].value.cooked;\n\n      for (let i = 0; i < expressions.length; ++i) {\n        value += expressions[i];\n        value += node.quasis[i + 1].value.cooked;\n      }\n\n      return {\n        value\n      };\n    }\n\n    return null;\n  },\n\n  UnaryExpression(node, initialScope) {\n    if (node.operator === \"delete\") {\n      // Not supported.\n      return null;\n    }\n\n    if (node.operator === \"void\") {\n      return {\n        value: undefined\n      };\n    }\n\n    const arg = getStaticValueR(node.argument, initialScope);\n\n    if (arg != null) {\n      switch (node.operator) {\n        case \"-\":\n          return {\n            value: -arg.value\n          };\n\n        case \"+\":\n          return {\n            value: +arg.value\n          };\n        //eslint-disable-line no-implicit-coercion\n\n        case \"!\":\n          return {\n            value: !arg.value\n          };\n\n        case \"~\":\n          return {\n            value: ~arg.value\n          };\n\n        case \"typeof\":\n          return {\n            value: typeof arg.value\n          };\n        // no default\n      }\n    }\n\n    return null;\n  }\n\n});\n/**\r\n * Get the value of a given node if it's a static value.\r\n * @param {Node} node The node to get.\r\n * @param {Scope|undefined} initialScope The scope to start finding variable.\r\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the node, or `null`.\r\n */\n\nfunction getStaticValueR(node, initialScope) {\n  if (node != null && Object.hasOwnProperty.call(operations, node.type)) {\n    return operations[node.type](node, initialScope);\n  }\n\n  return null;\n}\n/**\r\n * Get the static value of property name from a MemberExpression node or a Property node.\r\n * @param {Node} node The node to get.\r\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is a computed property node and this scope was given, this checks the computed property name by the `getStringIfConstant` function with the scope, and returns the value of it.\r\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the property name of the node, or `null`.\r\n */\n\n\nfunction getStaticPropertyNameValue(node, initialScope) {\n  const nameNode = node.type === \"Property\" ? node.key : node.property;\n\n  if (node.computed) {\n    return getStaticValueR(nameNode, initialScope);\n  }\n\n  if (nameNode.type === \"Identifier\") {\n    return {\n      value: nameNode.name\n    };\n  }\n\n  if (nameNode.type === \"Literal\") {\n    if (nameNode.bigint) {\n      return {\n        value: nameNode.bigint\n      };\n    }\n\n    return {\n      value: String(nameNode.value)\n    };\n  }\n\n  return null;\n}\n/**\r\n * Get the value of a given node if it's a static value.\r\n * @param {Node} node The node to get.\r\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If this scope was given, this tries to resolve identifier references which are in the given node as much as possible.\r\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the node, or `null`.\r\n */\n\n\nfunction getStaticValue(node) {\n  let initialScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  try {\n    return getStaticValueR(node, initialScope);\n  } catch (_error) {\n    return null;\n  }\n}\n/**\r\n * Get the value of a given node if it's a literal or a template literal.\r\n * @param {Node} node The node to get.\r\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is an Identifier node and this scope was given, this checks the variable of the identifier, and returns the value of it if the variable is a constant.\r\n * @returns {string|null} The value of the node, or `null`.\r\n */\n\n\nfunction getStringIfConstant(node) {\n  let initialScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  // Handle the literals that the platform doesn't support natively.\n  if (node && node.type === \"Literal\" && node.value === null) {\n    if (node.regex) {\n      return `/${node.regex.pattern}/${node.regex.flags}`;\n    }\n\n    if (node.bigint) {\n      return node.bigint;\n    }\n  }\n\n  const evaluated = getStaticValue(node, initialScope);\n  return evaluated && String(evaluated.value);\n}\n/**\r\n * Get the property name from a MemberExpression node or a Property node.\r\n * @param {Node} node The node to get.\r\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is a computed property node and this scope was given, this checks the computed property name by the `getStringIfConstant` function with the scope, and returns the value of it.\r\n * @returns {string|null} The property name of the node.\r\n */\n\n\nfunction getPropertyName(node, initialScope) {\n  switch (node.type) {\n    case \"MemberExpression\":\n      if (node.computed) {\n        return getStringIfConstant(node.property, initialScope);\n      }\n\n      if (node.property.type === \"PrivateIdentifier\") {\n        return null;\n      }\n\n      return node.property.name;\n\n    case \"Property\":\n    case \"MethodDefinition\":\n    case \"PropertyDefinition\":\n      if (node.computed) {\n        return getStringIfConstant(node.key, initialScope);\n      }\n\n      if (node.key.type === \"Literal\") {\n        return String(node.key.value);\n      }\n\n      if (node.key.type === \"PrivateIdentifier\") {\n        return null;\n      }\n\n      return node.key.name;\n    // no default\n  }\n\n  return null;\n}\n/**\r\n * Get the name and kind of the given function node.\r\n * @param {ASTNode} node - The function node to get.\r\n * @param {SourceCode} [sourceCode] The source code object to get the code of computed property keys.\r\n * @returns {string} The name and kind of the function node.\r\n */\n// eslint-disable-next-line complexity\n\n\nfunction getFunctionNameWithKind(node, sourceCode) {\n  const parent = node.parent;\n  const tokens = [];\n  const isObjectMethod = parent.type === \"Property\" && parent.value === node;\n  const isClassMethod = parent.type === \"MethodDefinition\" && parent.value === node;\n  const isClassFieldMethod = parent.type === \"PropertyDefinition\" && parent.value === node; // Modifiers.\n\n  if (isClassMethod || isClassFieldMethod) {\n    if (parent.static) {\n      tokens.push(\"static\");\n    }\n\n    if (parent.key.type === \"PrivateIdentifier\") {\n      tokens.push(\"private\");\n    }\n  }\n\n  if (node.async) {\n    tokens.push(\"async\");\n  }\n\n  if (node.generator) {\n    tokens.push(\"generator\");\n  } // Kinds.\n\n\n  if (isObjectMethod || isClassMethod) {\n    if (parent.kind === \"constructor\") {\n      return \"constructor\";\n    }\n\n    if (parent.kind === \"get\") {\n      tokens.push(\"getter\");\n    } else if (parent.kind === \"set\") {\n      tokens.push(\"setter\");\n    } else {\n      tokens.push(\"method\");\n    }\n  } else if (isClassFieldMethod) {\n    tokens.push(\"method\");\n  } else {\n    if (node.type === \"ArrowFunctionExpression\") {\n      tokens.push(\"arrow\");\n    }\n\n    tokens.push(\"function\");\n  } // Names.\n\n\n  if (isObjectMethod || isClassMethod || isClassFieldMethod) {\n    if (parent.key.type === \"PrivateIdentifier\") {\n      tokens.push(`#${parent.key.name}`);\n    } else {\n      const name = getPropertyName(parent);\n\n      if (name) {\n        tokens.push(`'${name}'`);\n      } else if (sourceCode) {\n        const keyText = sourceCode.getText(parent.key);\n\n        if (!keyText.includes(\"\\n\")) {\n          tokens.push(`[${keyText}]`);\n        }\n      }\n    }\n  } else if (node.id) {\n    tokens.push(`'${node.id.name}'`);\n  } else if (parent.type === \"VariableDeclarator\" && parent.id && parent.id.type === \"Identifier\") {\n    tokens.push(`'${parent.id.name}'`);\n  } else if ((parent.type === \"AssignmentExpression\" || parent.type === \"AssignmentPattern\") && parent.left && parent.left.type === \"Identifier\") {\n    tokens.push(`'${parent.left.name}'`);\n  }\n\n  return tokens.join(\" \");\n}\n\nconst typeConversionBinaryOps = Object.freeze(new Set([\"==\", \"!=\", \"<\", \"<=\", \">\", \">=\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"|\", \"^\", \"&\", \"in\"]));\nconst typeConversionUnaryOps = Object.freeze(new Set([\"-\", \"+\", \"!\", \"~\"]));\n/**\r\n * Check whether the given value is an ASTNode or not.\r\n * @param {any} x The value to check.\r\n * @returns {boolean} `true` if the value is an ASTNode.\r\n */\n\nfunction isNode(x) {\n  return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n\nconst visitor = Object.freeze(Object.assign(Object.create(null), {\n  $visit(node, options, visitorKeys) {\n    const {\n      type\n    } = node;\n\n    if (typeof this[type] === \"function\") {\n      return this[type](node, options, visitorKeys);\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  $visitChildren(node, options, visitorKeys) {\n    const {\n      type\n    } = node;\n\n    for (const key of visitorKeys[type] || evk.getKeys(node)) {\n      const value = node[key];\n\n      if (Array.isArray(value)) {\n        for (const element of value) {\n          if (isNode(element) && this.$visit(element, options, visitorKeys)) {\n            return true;\n          }\n        }\n      } else if (isNode(value) && this.$visit(value, options, visitorKeys)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  ArrowFunctionExpression() {\n    return false;\n  },\n\n  AssignmentExpression() {\n    return true;\n  },\n\n  AwaitExpression() {\n    return true;\n  },\n\n  BinaryExpression(node, options, visitorKeys) {\n    if (options.considerImplicitTypeConversion && typeConversionBinaryOps.has(node.operator) && (node.left.type !== \"Literal\" || node.right.type !== \"Literal\")) {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  CallExpression() {\n    return true;\n  },\n\n  FunctionExpression() {\n    return false;\n  },\n\n  ImportExpression() {\n    return true;\n  },\n\n  MemberExpression(node, options, visitorKeys) {\n    if (options.considerGetters) {\n      return true;\n    }\n\n    if (options.considerImplicitTypeConversion && node.computed && node.property.type !== \"Literal\") {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  MethodDefinition(node, options, visitorKeys) {\n    if (options.considerImplicitTypeConversion && node.computed && node.key.type !== \"Literal\") {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  NewExpression() {\n    return true;\n  },\n\n  Property(node, options, visitorKeys) {\n    if (options.considerImplicitTypeConversion && node.computed && node.key.type !== \"Literal\") {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  PropertyDefinition(node, options, visitorKeys) {\n    if (options.considerImplicitTypeConversion && node.computed && node.key.type !== \"Literal\") {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  UnaryExpression(node, options, visitorKeys) {\n    if (node.operator === \"delete\") {\n      return true;\n    }\n\n    if (options.considerImplicitTypeConversion && typeConversionUnaryOps.has(node.operator) && node.argument.type !== \"Literal\") {\n      return true;\n    }\n\n    return this.$visitChildren(node, options, visitorKeys);\n  },\n\n  UpdateExpression() {\n    return true;\n  },\n\n  YieldExpression() {\n    return true;\n  }\n\n}));\n/**\r\n * Check whether a given node has any side effect or not.\r\n * @param {Node} node The node to get.\r\n * @param {SourceCode} sourceCode The source code object.\r\n * @param {object} [options] The option object.\r\n * @param {boolean} [options.considerGetters=false] If `true` then it considers member accesses as the node which has side effects.\r\n * @param {boolean} [options.considerImplicitTypeConversion=false] If `true` then it considers implicit type conversion as the node which has side effects.\r\n * @param {object} [options.visitorKeys=evk.KEYS] The keys to traverse nodes. Use `context.getSourceCode().visitorKeys`.\r\n * @returns {boolean} `true` if the node has a certain side effect.\r\n */\n\nfunction hasSideEffect(node, sourceCode) {\n  let {\n    considerGetters = false,\n    considerImplicitTypeConversion = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return visitor.$visit(node, {\n    considerGetters,\n    considerImplicitTypeConversion\n  }, sourceCode.visitorKeys || evk.KEYS);\n}\n/**\r\n * Get the left parenthesis of the parent node syntax if it exists.\r\n * E.g., `if (a) {}` then the `(`.\r\n * @param {Node} node The AST node to check.\r\n * @param {SourceCode} sourceCode The source code object to get tokens.\r\n * @returns {Token|null} The left parenthesis of the parent node syntax\r\n */\n\n\nfunction getParentSyntaxParen(node, sourceCode) {\n  const parent = node.parent;\n\n  switch (parent.type) {\n    case \"CallExpression\":\n    case \"NewExpression\":\n      if (parent.arguments.length === 1 && parent.arguments[0] === node) {\n        return sourceCode.getTokenAfter(parent.callee, isOpeningParenToken);\n      }\n\n      return null;\n\n    case \"DoWhileStatement\":\n      if (parent.test === node) {\n        return sourceCode.getTokenAfter(parent.body, isOpeningParenToken);\n      }\n\n      return null;\n\n    case \"IfStatement\":\n    case \"WhileStatement\":\n      if (parent.test === node) {\n        return sourceCode.getFirstToken(parent, 1);\n      }\n\n      return null;\n\n    case \"ImportExpression\":\n      if (parent.source === node) {\n        return sourceCode.getFirstToken(parent, 1);\n      }\n\n      return null;\n\n    case \"SwitchStatement\":\n      if (parent.discriminant === node) {\n        return sourceCode.getFirstToken(parent, 1);\n      }\n\n      return null;\n\n    case \"WithStatement\":\n      if (parent.object === node) {\n        return sourceCode.getFirstToken(parent, 1);\n      }\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n/**\r\n * Check whether a given node is parenthesized or not.\r\n * @param {number} times The number of parantheses.\r\n * @param {Node} node The AST node to check.\r\n * @param {SourceCode} sourceCode The source code object to get tokens.\r\n * @returns {boolean} `true` if the node is parenthesized the given times.\r\n */\n\n/**\r\n * Check whether a given node is parenthesized or not.\r\n * @param {Node} node The AST node to check.\r\n * @param {SourceCode} sourceCode The source code object to get tokens.\r\n * @returns {boolean} `true` if the node is parenthesized.\r\n */\n\n\nfunction isParenthesized(timesOrNode, nodeOrSourceCode, optionalSourceCode) {\n  let times, node, sourceCode, maybeLeftParen, maybeRightParen;\n\n  if (typeof timesOrNode === \"number\") {\n    times = timesOrNode | 0;\n    node = nodeOrSourceCode;\n    sourceCode = optionalSourceCode;\n\n    if (!(times >= 1)) {\n      throw new TypeError(\"'times' should be a positive integer.\");\n    }\n  } else {\n    times = 1;\n    node = timesOrNode;\n    sourceCode = nodeOrSourceCode;\n  }\n\n  if (node == null || // `CatchClause.param` can't be parenthesized, example `try {} catch (error) {}`\n  node.parent.type === \"CatchClause\" && node.parent.param === node) {\n    return false;\n  }\n\n  maybeLeftParen = maybeRightParen = node;\n\n  do {\n    maybeLeftParen = sourceCode.getTokenBefore(maybeLeftParen);\n    maybeRightParen = sourceCode.getTokenAfter(maybeRightParen);\n  } while (maybeLeftParen != null && maybeRightParen != null && isOpeningParenToken(maybeLeftParen) && isClosingParenToken(maybeRightParen) && // Avoid false positive such as `if (a) {}`\n  maybeLeftParen !== getParentSyntaxParen(node, sourceCode) && --times > 0);\n\n  return times === 0;\n}\n/**\r\n * @author Toru Nagashima <https://github.com/mysticatea>\r\n * See LICENSE file in root directory for full license.\r\n */\n\n\nconst placeholder = /\\$(?:[$&`']|[1-9][0-9]?)/gu;\n/** @type {WeakMap<PatternMatcher, {pattern:RegExp,escaped:boolean}>} */\n\nconst internal = new WeakMap();\n/**\r\n * Check whether a given character is escaped or not.\r\n * @param {string} str The string to check.\r\n * @param {number} index The location of the character to check.\r\n * @returns {boolean} `true` if the character is escaped.\r\n */\n\nfunction isEscaped(str, index) {\n  let escaped = false;\n\n  for (let i = index - 1; i >= 0 && str.charCodeAt(i) === 0x5c; --i) {\n    escaped = !escaped;\n  }\n\n  return escaped;\n}\n/**\r\n * Replace a given string by a given matcher.\r\n * @param {PatternMatcher} matcher The pattern matcher.\r\n * @param {string} str The string to be replaced.\r\n * @param {string} replacement The new substring to replace each matched part.\r\n * @returns {string} The replaced string.\r\n */\n\n\nfunction replaceS(matcher, str, replacement) {\n  const chunks = [];\n  let index = 0;\n  /** @type {RegExpExecArray} */\n\n  let match = null;\n  /**\r\n   * @param {string} key The placeholder.\r\n   * @returns {string} The replaced string.\r\n   */\n\n  function replacer(key) {\n    switch (key) {\n      case \"$$\":\n        return \"$\";\n\n      case \"$&\":\n        return match[0];\n\n      case \"$`\":\n        return str.slice(0, match.index);\n\n      case \"$'\":\n        return str.slice(match.index + match[0].length);\n\n      default:\n        {\n          const i = key.slice(1);\n\n          if (i in match) {\n            return match[i];\n          }\n\n          return key;\n        }\n    }\n  }\n\n  for (match of matcher.execAll(str)) {\n    chunks.push(str.slice(index, match.index));\n    chunks.push(replacement.replace(placeholder, replacer));\n    index = match.index + match[0].length;\n  }\n\n  chunks.push(str.slice(index));\n  return chunks.join(\"\");\n}\n/**\r\n * Replace a given string by a given matcher.\r\n * @param {PatternMatcher} matcher The pattern matcher.\r\n * @param {string} str The string to be replaced.\r\n * @param {(...strs[])=>string} replace The function to replace each matched part.\r\n * @returns {string} The replaced string.\r\n */\n\n\nfunction replaceF(matcher, str, replace) {\n  const chunks = [];\n  let index = 0;\n\n  for (const match of matcher.execAll(str)) {\n    chunks.push(str.slice(index, match.index));\n    chunks.push(String(replace(...match, match.index, match.input)));\n    index = match.index + match[0].length;\n  }\n\n  chunks.push(str.slice(index));\n  return chunks.join(\"\");\n}\n/**\r\n * The class to find patterns as considering escape sequences.\r\n */\n\n\nclass PatternMatcher {\n  /**\r\n   * Initialize this matcher.\r\n   * @param {RegExp} pattern The pattern to match.\r\n   * @param {{escaped:boolean}} options The options.\r\n   */\n  constructor(pattern) {\n    let {\n      escaped = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!(pattern instanceof RegExp)) {\n      throw new TypeError(\"'pattern' should be a RegExp instance.\");\n    }\n\n    if (!pattern.flags.includes(\"g\")) {\n      throw new Error(\"'pattern' should contains 'g' flag.\");\n    }\n\n    internal.set(this, {\n      pattern: new RegExp(pattern.source, pattern.flags),\n      escaped: Boolean(escaped)\n    });\n  }\n  /**\r\n   * Find the pattern in a given string.\r\n   * @param {string} str The string to find.\r\n   * @returns {IterableIterator<RegExpExecArray>} The iterator which iterate the matched information.\r\n   */\n\n\n  *execAll(str) {\n    const {\n      pattern,\n      escaped\n    } = internal.get(this);\n    let match = null;\n    let lastIndex = 0;\n    pattern.lastIndex = 0;\n\n    while ((match = pattern.exec(str)) != null) {\n      if (escaped || !isEscaped(str, match.index)) {\n        lastIndex = pattern.lastIndex;\n        yield match;\n        pattern.lastIndex = lastIndex;\n      }\n    }\n  }\n  /**\r\n   * Check whether the pattern is found in a given string.\r\n   * @param {string} str The string to check.\r\n   * @returns {boolean} `true` if the pattern was found in the string.\r\n   */\n\n\n  test(str) {\n    const it = this.execAll(str);\n    const ret = it.next();\n    return !ret.done;\n  }\n  /**\r\n   * Replace a given string.\r\n   * @param {string} str The string to be replaced.\r\n   * @param {(string|((...strs:string[])=>string))} replacer The string or function to replace. This is the same as the 2nd argument of `String.prototype.replace`.\r\n   * @returns {string} The replaced string.\r\n   */\n\n\n  [Symbol.replace](str, replacer) {\n    return typeof replacer === \"function\" ? replaceF(this, String(str), replacer) : replaceS(this, String(str), String(replacer));\n  }\n\n}\n\nconst IMPORT_TYPE = /^(?:Import|Export(?:All|Default|Named))Declaration$/u;\nconst has = Function.call.bind(Object.hasOwnProperty);\nconst READ = Symbol(\"read\");\nconst CALL = Symbol(\"call\");\nconst CONSTRUCT = Symbol(\"construct\");\nconst ESM = Symbol(\"esm\");\nconst requireCall = {\n  require: {\n    [CALL]: true\n  }\n};\n/**\r\n * Check whether a given variable is modified or not.\r\n * @param {Variable} variable The variable to check.\r\n * @returns {boolean} `true` if the variable is modified.\r\n */\n\nfunction isModifiedGlobal(variable) {\n  return variable == null || variable.defs.length !== 0 || variable.references.some(r => r.isWrite());\n}\n/**\r\n * Check if the value of a given node is passed through to the parent syntax as-is.\r\n * For example, `a` and `b` in (`a || b` and `c ? a : b`) are passed through.\r\n * @param {Node} node A node to check.\r\n * @returns {boolean} `true` if the node is passed through.\r\n */\n\n\nfunction isPassThrough(node) {\n  const parent = node.parent;\n\n  switch (parent && parent.type) {\n    case \"ConditionalExpression\":\n      return parent.consequent === node || parent.alternate === node;\n\n    case \"LogicalExpression\":\n      return true;\n\n    case \"SequenceExpression\":\n      return parent.expressions[parent.expressions.length - 1] === node;\n\n    case \"ChainExpression\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\r\n * The reference tracker.\r\n */\n\n\nclass ReferenceTracker {\n  /**\r\n   * Initialize this tracker.\r\n   * @param {Scope} globalScope The global scope.\r\n   * @param {object} [options] The options.\r\n   * @param {\"legacy\"|\"strict\"} [options.mode=\"strict\"] The mode to determine the ImportDeclaration's behavior for CJS modules.\r\n   * @param {string[]} [options.globalObjectNames=[\"global\",\"globalThis\",\"self\",\"window\"]] The variable names for Global Object.\r\n   */\n  constructor(globalScope) {\n    let {\n      mode = \"strict\",\n      globalObjectNames = [\"global\", \"globalThis\", \"self\", \"window\"]\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.variableStack = [];\n    this.globalScope = globalScope;\n    this.mode = mode;\n    this.globalObjectNames = globalObjectNames.slice(0);\n  }\n  /**\r\n   * Iterate the references of global variables.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *iterateGlobalReferences(traceMap) {\n    for (const key of Object.keys(traceMap)) {\n      const nextTraceMap = traceMap[key];\n      const path = [key];\n      const variable = this.globalScope.set.get(key);\n\n      if (isModifiedGlobal(variable)) {\n        continue;\n      }\n\n      yield* this._iterateVariableReferences(variable, path, nextTraceMap, true);\n    }\n\n    for (const key of this.globalObjectNames) {\n      const path = [];\n      const variable = this.globalScope.set.get(key);\n\n      if (isModifiedGlobal(variable)) {\n        continue;\n      }\n\n      yield* this._iterateVariableReferences(variable, path, traceMap, false);\n    }\n  }\n  /**\r\n   * Iterate the references of CommonJS modules.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *iterateCjsReferences(traceMap) {\n    for (const {\n      node\n    } of this.iterateGlobalReferences(requireCall)) {\n      const key = getStringIfConstant(node.arguments[0]);\n\n      if (key == null || !has(traceMap, key)) {\n        continue;\n      }\n\n      const nextTraceMap = traceMap[key];\n      const path = [key];\n\n      if (nextTraceMap[READ]) {\n        yield {\n          node,\n          path,\n          type: READ,\n          info: nextTraceMap[READ]\n        };\n      }\n\n      yield* this._iteratePropertyReferences(node, path, nextTraceMap);\n    }\n  }\n  /**\r\n   * Iterate the references of ES modules.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *iterateEsmReferences(traceMap) {\n    const programNode = this.globalScope.block;\n\n    for (const node of programNode.body) {\n      if (!IMPORT_TYPE.test(node.type) || node.source == null) {\n        continue;\n      }\n\n      const moduleId = node.source.value;\n\n      if (!has(traceMap, moduleId)) {\n        continue;\n      }\n\n      const nextTraceMap = traceMap[moduleId];\n      const path = [moduleId];\n\n      if (nextTraceMap[READ]) {\n        yield {\n          node,\n          path,\n          type: READ,\n          info: nextTraceMap[READ]\n        };\n      }\n\n      if (node.type === \"ExportAllDeclaration\") {\n        for (const key of Object.keys(nextTraceMap)) {\n          const exportTraceMap = nextTraceMap[key];\n\n          if (exportTraceMap[READ]) {\n            yield {\n              node,\n              path: path.concat(key),\n              type: READ,\n              info: exportTraceMap[READ]\n            };\n          }\n        }\n      } else {\n        for (const specifier of node.specifiers) {\n          const esm = has(nextTraceMap, ESM);\n\n          const it = this._iterateImportReferences(specifier, path, esm ? nextTraceMap : this.mode === \"legacy\" ? {\n            default: nextTraceMap,\n            ...nextTraceMap\n          } : {\n            default: nextTraceMap\n          });\n\n          if (esm) {\n            yield* it;\n          } else {\n            for (const report of it) {\n              report.path = report.path.filter(exceptDefault);\n\n              if (report.path.length >= 2 || report.type !== READ) {\n                yield report;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * Iterate the references for a given variable.\r\n   * @param {Variable} variable The variable to iterate that references.\r\n   * @param {string[]} path The current path.\r\n   * @param {object} traceMap The trace map.\r\n   * @param {boolean} shouldReport = The flag to report those references.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *_iterateVariableReferences(variable, path, traceMap, shouldReport) {\n    if (this.variableStack.includes(variable)) {\n      return;\n    }\n\n    this.variableStack.push(variable);\n\n    try {\n      for (const reference of variable.references) {\n        if (!reference.isRead()) {\n          continue;\n        }\n\n        const node = reference.identifier;\n\n        if (shouldReport && traceMap[READ]) {\n          yield {\n            node,\n            path,\n            type: READ,\n            info: traceMap[READ]\n          };\n        }\n\n        yield* this._iteratePropertyReferences(node, path, traceMap);\n      }\n    } finally {\n      this.variableStack.pop();\n    }\n  }\n  /**\r\n   * Iterate the references for a given AST node.\r\n   * @param rootNode The AST node to iterate references.\r\n   * @param {string[]} path The current path.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n  //eslint-disable-next-line complexity\n\n\n  *_iteratePropertyReferences(rootNode, path, traceMap) {\n    let node = rootNode;\n\n    while (isPassThrough(node)) {\n      node = node.parent;\n    }\n\n    const parent = node.parent;\n\n    if (parent.type === \"MemberExpression\") {\n      if (parent.object === node) {\n        const key = getPropertyName(parent);\n\n        if (key == null || !has(traceMap, key)) {\n          return;\n        }\n\n        path = path.concat(key); //eslint-disable-line no-param-reassign\n\n        const nextTraceMap = traceMap[key];\n\n        if (nextTraceMap[READ]) {\n          yield {\n            node: parent,\n            path,\n            type: READ,\n            info: nextTraceMap[READ]\n          };\n        }\n\n        yield* this._iteratePropertyReferences(parent, path, nextTraceMap);\n      }\n\n      return;\n    }\n\n    if (parent.type === \"CallExpression\") {\n      if (parent.callee === node && traceMap[CALL]) {\n        yield {\n          node: parent,\n          path,\n          type: CALL,\n          info: traceMap[CALL]\n        };\n      }\n\n      return;\n    }\n\n    if (parent.type === \"NewExpression\") {\n      if (parent.callee === node && traceMap[CONSTRUCT]) {\n        yield {\n          node: parent,\n          path,\n          type: CONSTRUCT,\n          info: traceMap[CONSTRUCT]\n        };\n      }\n\n      return;\n    }\n\n    if (parent.type === \"AssignmentExpression\") {\n      if (parent.right === node) {\n        yield* this._iterateLhsReferences(parent.left, path, traceMap);\n        yield* this._iteratePropertyReferences(parent, path, traceMap);\n      }\n\n      return;\n    }\n\n    if (parent.type === \"AssignmentPattern\") {\n      if (parent.right === node) {\n        yield* this._iterateLhsReferences(parent.left, path, traceMap);\n      }\n\n      return;\n    }\n\n    if (parent.type === \"VariableDeclarator\") {\n      if (parent.init === node) {\n        yield* this._iterateLhsReferences(parent.id, path, traceMap);\n      }\n    }\n  }\n  /**\r\n   * Iterate the references for a given Pattern node.\r\n   * @param {Node} patternNode The Pattern node to iterate references.\r\n   * @param {string[]} path The current path.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *_iterateLhsReferences(patternNode, path, traceMap) {\n    if (patternNode.type === \"Identifier\") {\n      const variable = findVariable(this.globalScope, patternNode);\n\n      if (variable != null) {\n        yield* this._iterateVariableReferences(variable, path, traceMap, false);\n      }\n\n      return;\n    }\n\n    if (patternNode.type === \"ObjectPattern\") {\n      for (const property of patternNode.properties) {\n        const key = getPropertyName(property);\n\n        if (key == null || !has(traceMap, key)) {\n          continue;\n        }\n\n        const nextPath = path.concat(key);\n        const nextTraceMap = traceMap[key];\n\n        if (nextTraceMap[READ]) {\n          yield {\n            node: property,\n            path: nextPath,\n            type: READ,\n            info: nextTraceMap[READ]\n          };\n        }\n\n        yield* this._iterateLhsReferences(property.value, nextPath, nextTraceMap);\n      }\n\n      return;\n    }\n\n    if (patternNode.type === \"AssignmentPattern\") {\n      yield* this._iterateLhsReferences(patternNode.left, path, traceMap);\n    }\n  }\n  /**\r\n   * Iterate the references for a given ModuleSpecifier node.\r\n   * @param {Node} specifierNode The ModuleSpecifier node to iterate references.\r\n   * @param {string[]} path The current path.\r\n   * @param {object} traceMap The trace map.\r\n   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\r\n   */\n\n\n  *_iterateImportReferences(specifierNode, path, traceMap) {\n    const type = specifierNode.type;\n\n    if (type === \"ImportSpecifier\" || type === \"ImportDefaultSpecifier\") {\n      const key = type === \"ImportDefaultSpecifier\" ? \"default\" : specifierNode.imported.name;\n\n      if (!has(traceMap, key)) {\n        return;\n      }\n\n      path = path.concat(key); //eslint-disable-line no-param-reassign\n\n      const nextTraceMap = traceMap[key];\n\n      if (nextTraceMap[READ]) {\n        yield {\n          node: specifierNode,\n          path,\n          type: READ,\n          info: nextTraceMap[READ]\n        };\n      }\n\n      yield* this._iterateVariableReferences(findVariable(this.globalScope, specifierNode.local), path, nextTraceMap, false);\n      return;\n    }\n\n    if (type === \"ImportNamespaceSpecifier\") {\n      yield* this._iterateVariableReferences(findVariable(this.globalScope, specifierNode.local), path, traceMap, false);\n      return;\n    }\n\n    if (type === \"ExportSpecifier\") {\n      const key = specifierNode.local.name;\n\n      if (!has(traceMap, key)) {\n        return;\n      }\n\n      path = path.concat(key); //eslint-disable-line no-param-reassign\n\n      const nextTraceMap = traceMap[key];\n\n      if (nextTraceMap[READ]) {\n        yield {\n          node: specifierNode,\n          path,\n          type: READ,\n          info: nextTraceMap[READ]\n        };\n      }\n    }\n  }\n\n}\n\nReferenceTracker.READ = READ;\nReferenceTracker.CALL = CALL;\nReferenceTracker.CONSTRUCT = CONSTRUCT;\nReferenceTracker.ESM = ESM;\n/**\r\n * This is a predicate function for Array#filter.\r\n * @param {string} name A name part.\r\n * @param {number} index The index of the name.\r\n * @returns {boolean} `false` if it's default.\r\n */\n\nfunction exceptDefault(name, index) {\n  return !(index === 1 && name === \"default\");\n}\n\nvar index = {\n  CALL,\n  CONSTRUCT,\n  ESM,\n  findVariable,\n  getFunctionHeadLocation,\n  getFunctionNameWithKind,\n  getInnermostScope,\n  getPropertyName,\n  getStaticValue,\n  getStringIfConstant,\n  hasSideEffect,\n  isArrowToken,\n  isClosingBraceToken,\n  isClosingBracketToken,\n  isClosingParenToken,\n  isColonToken,\n  isCommaToken,\n  isCommentToken,\n  isNotArrowToken,\n  isNotClosingBraceToken,\n  isNotClosingBracketToken,\n  isNotClosingParenToken,\n  isNotColonToken,\n  isNotCommaToken,\n  isNotCommentToken,\n  isNotOpeningBraceToken,\n  isNotOpeningBracketToken,\n  isNotOpeningParenToken,\n  isNotSemicolonToken,\n  isOpeningBraceToken,\n  isOpeningBracketToken,\n  isOpeningParenToken,\n  isParenthesized,\n  isSemicolonToken,\n  PatternMatcher,\n  READ,\n  ReferenceTracker\n};\nexports.CALL = CALL;\nexports.CONSTRUCT = CONSTRUCT;\nexports.ESM = ESM;\nexports.PatternMatcher = PatternMatcher;\nexports.READ = READ;\nexports.ReferenceTracker = ReferenceTracker;\nexports.default = index;\nexports.findVariable = findVariable;\nexports.getFunctionHeadLocation = getFunctionHeadLocation;\nexports.getFunctionNameWithKind = getFunctionNameWithKind;\nexports.getInnermostScope = getInnermostScope;\nexports.getPropertyName = getPropertyName;\nexports.getStaticValue = getStaticValue;\nexports.getStringIfConstant = getStringIfConstant;\nexports.hasSideEffect = hasSideEffect;\nexports.isArrowToken = isArrowToken;\nexports.isClosingBraceToken = isClosingBraceToken;\nexports.isClosingBracketToken = isClosingBracketToken;\nexports.isClosingParenToken = isClosingParenToken;\nexports.isColonToken = isColonToken;\nexports.isCommaToken = isCommaToken;\nexports.isCommentToken = isCommentToken;\nexports.isNotArrowToken = isNotArrowToken;\nexports.isNotClosingBraceToken = isNotClosingBraceToken;\nexports.isNotClosingBracketToken = isNotClosingBracketToken;\nexports.isNotClosingParenToken = isNotClosingParenToken;\nexports.isNotColonToken = isNotColonToken;\nexports.isNotCommaToken = isNotCommaToken;\nexports.isNotCommentToken = isNotCommentToken;\nexports.isNotOpeningBraceToken = isNotOpeningBraceToken;\nexports.isNotOpeningBracketToken = isNotOpeningBracketToken;\nexports.isNotOpeningParenToken = isNotOpeningParenToken;\nexports.isNotSemicolonToken = isNotSemicolonToken;\nexports.isOpeningBraceToken = isOpeningBraceToken;\nexports.isOpeningBracketToken = isOpeningBracketToken;\nexports.isOpeningParenToken = isOpeningParenToken;\nexports.isParenthesized = isParenthesized;\nexports.isSemicolonToken = isSemicolonToken;","map":{"version":3,"mappings":"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","names":["getInnermostScope","initialScope","node","location","range","scope","found","childScope","childScopes","block","findVariable","nameOrNode","name","variable","set","get","upper","negate0","token","negate","f","bind","isPunctuatorTokenWithValue","value","type","isArrowToken","isCommaToken","isSemicolonToken","isColonToken","isOpeningParenToken","isClosingParenToken","isOpeningBracketToken","isClosingBracketToken","isOpeningBraceToken","isClosingBraceToken","isCommentToken","includes","isNotArrowToken","isNotCommaToken","isNotSemicolonToken","isNotColonToken","isNotOpeningParenToken","isNotClosingParenToken","isNotOpeningBracketToken","isNotClosingBracketToken","isNotOpeningBraceToken","isNotClosingBraceToken","isNotCommentToken","getOpeningParenOfParams","sourceCode","id","getTokenAfter","getFirstToken","getFunctionHeadLocation","parent","start","end","arrowToken","getTokenBefore","body","loc","globalObject","globalThis","self","window","global","builtinNames","Object","freeze","Set","callAllowed","Array","isArray","BigInt","undefined","Boolean","Date","parse","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","isFinite","isNaN","isPrototypeOf","getOwnPropertyNames","Math","map","k","filter","Number","parseFloat","parseInt","entries","is","isExtensible","isFrozen","isSealed","keys","values","RegExp","String","fromCharCode","fromCodePoint","raw","Symbol","for","keyFor","unescape","callPassThrough","preventExtensions","seal","getPropertyDescriptor","object","x","d","getOwnPropertyDescriptor","getPrototypeOf","isGetter","getElementValues","nodeList","valueList","i","length","elementNode","argument","getStaticValueR","push","element","operations","ArrayExpression","elements","AssignmentExpression","operator","right","BinaryExpression","left","pow","CallExpression","calleeNode","callee","args","arguments","property","optional","getStaticPropertyNameValue","receiver","methodName","has","func","ConditionalExpression","test","consequent","alternate","ExpressionStatement","expression","Identifier","defs","def","kind","init","Literal","regex","bigint","LogicalExpression","MemberExpression","ChainExpression","NewExpression","Func","ObjectExpression","propertyNode","properties","key","assign","SequenceExpression","last","expressions","TaggedTemplateExpression","tag","quasi","strings","quasis","q","cooked","TemplateLiteral","UnaryExpression","arg","hasOwnProperty","call","nameNode","computed","getStaticValue","_error","getStringIfConstant","pattern","flags","evaluated","getPropertyName","getFunctionNameWithKind","tokens","isObjectMethod","isClassMethod","isClassFieldMethod","static","async","generator","keyText","getText","join","typeConversionBinaryOps","typeConversionUnaryOps","isNode","visitor","create","$visit","options","visitorKeys","$visitChildren","evk","getKeys","ArrowFunctionExpression","AwaitExpression","considerImplicitTypeConversion","FunctionExpression","ImportExpression","considerGetters","MethodDefinition","Property","PropertyDefinition","UpdateExpression","YieldExpression","hasSideEffect","KEYS","getParentSyntaxParen","source","discriminant","isParenthesized","timesOrNode","nodeOrSourceCode","optionalSourceCode","times","maybeLeftParen","maybeRightParen","TypeError","param","placeholder","internal","WeakMap","isEscaped","str","index","escaped","charCodeAt","replaceS","matcher","replacement","chunks","match","replacer","slice","execAll","replace","replaceF","input","PatternMatcher","constructor","Error","lastIndex","exec","it","ret","next","done","IMPORT_TYPE","Function","READ","CALL","CONSTRUCT","ESM","requireCall","require","isModifiedGlobal","references","some","r","isWrite","isPassThrough","ReferenceTracker","globalScope","mode","globalObjectNames","variableStack","iterateGlobalReferences","traceMap","nextTraceMap","path","_iterateVariableReferences","iterateCjsReferences","info","_iteratePropertyReferences","iterateEsmReferences","programNode","moduleId","exportTraceMap","concat","specifier","specifiers","esm","_iterateImportReferences","default","report","exceptDefault","shouldReport","reference","isRead","identifier","pop","rootNode","_iterateLhsReferences","patternNode","nextPath","specifierNode","imported","local"],"sources":["C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-innermost-scope.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\find-variable.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\token-predicate.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-function-head-location.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-static-value.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-string-if-constant.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-property-name.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\get-function-name-with-kind.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\has-side-effect.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\is-parenthesized.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\pattern-matcher.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\reference-tracker.js","C:\\Users\\2928\\Desktop\\zhuawa\\notes\\project_demo\\react_project\\node_modules\\eslint-utils\\src\\index.js"],"sourcesContent":["/**\n * Get the innermost scope which contains a given location.\n * @param {Scope} initialScope The initial scope to search.\n * @param {Node} node The location to search.\n * @returns {Scope} The innermost scope.\n */\nexport function getInnermostScope(initialScope, node) {\n    const location = node.range[0]\n\n    let scope = initialScope\n    let found = false\n    do {\n        found = false\n        for (const childScope of scope.childScopes) {\n            const range = childScope.block.range\n\n            if (range[0] <= location && location < range[1]) {\n                scope = childScope\n                found = true\n                break\n            }\n        }\n    } while (found)\n\n    return scope\n}\n","import { getInnermostScope } from \"./get-innermost-scope\"\n\n/**\n * Find the variable of a given name.\n * @param {Scope} initialScope The scope to start finding.\n * @param {string|Node} nameOrNode The variable name to find. If this is a Node object then it should be an Identifier node.\n * @returns {Variable|null} The found variable or null.\n */\nexport function findVariable(initialScope, nameOrNode) {\n    let name = \"\"\n    let scope = initialScope\n\n    if (typeof nameOrNode === \"string\") {\n        name = nameOrNode\n    } else {\n        name = nameOrNode.name\n        scope = getInnermostScope(scope, nameOrNode)\n    }\n\n    while (scope != null) {\n        const variable = scope.set.get(name)\n        if (variable != null) {\n            return variable\n        }\n        scope = scope.upper\n    }\n\n    return null\n}\n","/**\n * Negate the result of `this` calling.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the result of `this(token)` is `false`.\n */\nfunction negate0(token) {\n    return !this(token) //eslint-disable-line no-invalid-this\n}\n\n/**\n * Creates the negate function of the given function.\n * @param {function(Token):boolean} f - The function to negate.\n * @returns {function(Token):boolean} Negated function.\n */\nfunction negate(f) {\n    return negate0.bind(f)\n}\n\n/**\n * Checks if the given token is a PunctuatorToken with the given value\n * @param {Token} token - The token to check.\n * @param {string} value - The value to check.\n * @returns {boolean} `true` if the token is a PunctuatorToken with the given value.\n */\nfunction isPunctuatorTokenWithValue(token, value) {\n    return token.type === \"Punctuator\" && token.value === value\n}\n\n/**\n * Checks if the given token is an arrow token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is an arrow token.\n */\nexport function isArrowToken(token) {\n    return isPunctuatorTokenWithValue(token, \"=>\")\n}\n\n/**\n * Checks if the given token is a comma token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comma token.\n */\nexport function isCommaToken(token) {\n    return isPunctuatorTokenWithValue(token, \",\")\n}\n\n/**\n * Checks if the given token is a semicolon token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a semicolon token.\n */\nexport function isSemicolonToken(token) {\n    return isPunctuatorTokenWithValue(token, \";\")\n}\n\n/**\n * Checks if the given token is a colon token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a colon token.\n */\nexport function isColonToken(token) {\n    return isPunctuatorTokenWithValue(token, \":\")\n}\n\n/**\n * Checks if the given token is an opening parenthesis token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is an opening parenthesis token.\n */\nexport function isOpeningParenToken(token) {\n    return isPunctuatorTokenWithValue(token, \"(\")\n}\n\n/**\n * Checks if the given token is a closing parenthesis token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a closing parenthesis token.\n */\nexport function isClosingParenToken(token) {\n    return isPunctuatorTokenWithValue(token, \")\")\n}\n\n/**\n * Checks if the given token is an opening square bracket token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is an opening square bracket token.\n */\nexport function isOpeningBracketToken(token) {\n    return isPunctuatorTokenWithValue(token, \"[\")\n}\n\n/**\n * Checks if the given token is a closing square bracket token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a closing square bracket token.\n */\nexport function isClosingBracketToken(token) {\n    return isPunctuatorTokenWithValue(token, \"]\")\n}\n\n/**\n * Checks if the given token is an opening brace token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is an opening brace token.\n */\nexport function isOpeningBraceToken(token) {\n    return isPunctuatorTokenWithValue(token, \"{\")\n}\n\n/**\n * Checks if the given token is a closing brace token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a closing brace token.\n */\nexport function isClosingBraceToken(token) {\n    return isPunctuatorTokenWithValue(token, \"}\")\n}\n\n/**\n * Checks if the given token is a comment token or not.\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nexport function isCommentToken(token) {\n    return [\"Block\", \"Line\", \"Shebang\"].includes(token.type)\n}\n\nexport const isNotArrowToken = negate(isArrowToken)\nexport const isNotCommaToken = negate(isCommaToken)\nexport const isNotSemicolonToken = negate(isSemicolonToken)\nexport const isNotColonToken = negate(isColonToken)\nexport const isNotOpeningParenToken = negate(isOpeningParenToken)\nexport const isNotClosingParenToken = negate(isClosingParenToken)\nexport const isNotOpeningBracketToken = negate(isOpeningBracketToken)\nexport const isNotClosingBracketToken = negate(isClosingBracketToken)\nexport const isNotOpeningBraceToken = negate(isOpeningBraceToken)\nexport const isNotClosingBraceToken = negate(isClosingBraceToken)\nexport const isNotCommentToken = negate(isCommentToken)\n","import { isArrowToken, isOpeningParenToken } from \"./token-predicate\"\n\n/**\n * Get the `(` token of the given function node.\n * @param {Node} node - The function node to get.\n * @param {SourceCode} sourceCode - The source code object to get tokens.\n * @returns {Token} `(` token.\n */\nfunction getOpeningParenOfParams(node, sourceCode) {\n    return node.id\n        ? sourceCode.getTokenAfter(node.id, isOpeningParenToken)\n        : sourceCode.getFirstToken(node, isOpeningParenToken)\n}\n\n/**\n * Get the location of the given function node for reporting.\n * @param {Node} node - The function node to get.\n * @param {SourceCode} sourceCode - The source code object to get tokens.\n * @returns {string} The location of the function node for reporting.\n */\nexport function getFunctionHeadLocation(node, sourceCode) {\n    const parent = node.parent\n    let start = null\n    let end = null\n\n    if (node.type === \"ArrowFunctionExpression\") {\n        const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken)\n\n        start = arrowToken.loc.start\n        end = arrowToken.loc.end\n    } else if (\n        parent.type === \"Property\" ||\n        parent.type === \"MethodDefinition\" ||\n        parent.type === \"PropertyDefinition\"\n    ) {\n        start = parent.loc.start\n        end = getOpeningParenOfParams(node, sourceCode).loc.start\n    } else {\n        start = node.loc.start\n        end = getOpeningParenOfParams(node, sourceCode).loc.start\n    }\n\n    return {\n        start: { ...start },\n        end: { ...end },\n    }\n}\n","/* globals globalThis, global, self, window */\n\nimport { findVariable } from \"./find-variable\"\n\nconst globalObject =\n    typeof globalThis !== \"undefined\"\n        ? globalThis\n        : typeof self !== \"undefined\"\n        ? self\n        : typeof window !== \"undefined\"\n        ? window\n        : typeof global !== \"undefined\"\n        ? global\n        : {}\n\nconst builtinNames = Object.freeze(\n    new Set([\n        \"Array\",\n        \"ArrayBuffer\",\n        \"BigInt\",\n        \"BigInt64Array\",\n        \"BigUint64Array\",\n        \"Boolean\",\n        \"DataView\",\n        \"Date\",\n        \"decodeURI\",\n        \"decodeURIComponent\",\n        \"encodeURI\",\n        \"encodeURIComponent\",\n        \"escape\",\n        \"Float32Array\",\n        \"Float64Array\",\n        \"Function\",\n        \"Infinity\",\n        \"Int16Array\",\n        \"Int32Array\",\n        \"Int8Array\",\n        \"isFinite\",\n        \"isNaN\",\n        \"isPrototypeOf\",\n        \"JSON\",\n        \"Map\",\n        \"Math\",\n        \"NaN\",\n        \"Number\",\n        \"Object\",\n        \"parseFloat\",\n        \"parseInt\",\n        \"Promise\",\n        \"Proxy\",\n        \"Reflect\",\n        \"RegExp\",\n        \"Set\",\n        \"String\",\n        \"Symbol\",\n        \"Uint16Array\",\n        \"Uint32Array\",\n        \"Uint8Array\",\n        \"Uint8ClampedArray\",\n        \"undefined\",\n        \"unescape\",\n        \"WeakMap\",\n        \"WeakSet\",\n    ]),\n)\nconst callAllowed = new Set(\n    [\n        Array.isArray,\n        typeof BigInt === \"function\" ? BigInt : undefined,\n        Boolean,\n        Date,\n        Date.parse,\n        decodeURI,\n        decodeURIComponent,\n        encodeURI,\n        encodeURIComponent,\n        escape,\n        isFinite,\n        isNaN,\n        isPrototypeOf,\n        ...Object.getOwnPropertyNames(Math)\n            .map((k) => Math[k])\n            .filter((f) => typeof f === \"function\"),\n        Number,\n        Number.isFinite,\n        Number.isNaN,\n        Number.parseFloat,\n        Number.parseInt,\n        Object,\n        Object.entries,\n        Object.is,\n        Object.isExtensible,\n        Object.isFrozen,\n        Object.isSealed,\n        Object.keys,\n        Object.values,\n        parseFloat,\n        parseInt,\n        RegExp,\n        String,\n        String.fromCharCode,\n        String.fromCodePoint,\n        String.raw,\n        Symbol.for,\n        Symbol.keyFor,\n        unescape,\n    ].filter((f) => typeof f === \"function\"),\n)\nconst callPassThrough = new Set([\n    Object.freeze,\n    Object.preventExtensions,\n    Object.seal,\n])\n\n/**\n * Get the property descriptor.\n * @param {object} object The object to get.\n * @param {string|number|symbol} name The property name to get.\n */\nfunction getPropertyDescriptor(object, name) {\n    let x = object\n    while ((typeof x === \"object\" || typeof x === \"function\") && x !== null) {\n        const d = Object.getOwnPropertyDescriptor(x, name)\n        if (d) {\n            return d\n        }\n        x = Object.getPrototypeOf(x)\n    }\n    return null\n}\n\n/**\n * Check if a property is getter or not.\n * @param {object} object The object to check.\n * @param {string|number|symbol} name The property name to check.\n */\nfunction isGetter(object, name) {\n    const d = getPropertyDescriptor(object, name)\n    return d != null && d.get != null\n}\n\n/**\n * Get the element values of a given node list.\n * @param {Node[]} nodeList The node list to get values.\n * @param {Scope|undefined} initialScope The initial scope to find variables.\n * @returns {any[]|null} The value list if all nodes are constant. Otherwise, null.\n */\nfunction getElementValues(nodeList, initialScope) {\n    const valueList = []\n\n    for (let i = 0; i < nodeList.length; ++i) {\n        const elementNode = nodeList[i]\n\n        if (elementNode == null) {\n            valueList.length = i + 1\n        } else if (elementNode.type === \"SpreadElement\") {\n            const argument = getStaticValueR(elementNode.argument, initialScope)\n            if (argument == null) {\n                return null\n            }\n            valueList.push(...argument.value)\n        } else {\n            const element = getStaticValueR(elementNode, initialScope)\n            if (element == null) {\n                return null\n            }\n            valueList.push(element.value)\n        }\n    }\n\n    return valueList\n}\n\nconst operations = Object.freeze({\n    ArrayExpression(node, initialScope) {\n        const elements = getElementValues(node.elements, initialScope)\n        return elements != null ? { value: elements } : null\n    },\n\n    AssignmentExpression(node, initialScope) {\n        if (node.operator === \"=\") {\n            return getStaticValueR(node.right, initialScope)\n        }\n        return null\n    },\n\n    //eslint-disable-next-line complexity\n    BinaryExpression(node, initialScope) {\n        if (node.operator === \"in\" || node.operator === \"instanceof\") {\n            // Not supported.\n            return null\n        }\n\n        const left = getStaticValueR(node.left, initialScope)\n        const right = getStaticValueR(node.right, initialScope)\n        if (left != null && right != null) {\n            switch (node.operator) {\n                case \"==\":\n                    return { value: left.value == right.value } //eslint-disable-line eqeqeq\n                case \"!=\":\n                    return { value: left.value != right.value } //eslint-disable-line eqeqeq\n                case \"===\":\n                    return { value: left.value === right.value }\n                case \"!==\":\n                    return { value: left.value !== right.value }\n                case \"<\":\n                    return { value: left.value < right.value }\n                case \"<=\":\n                    return { value: left.value <= right.value }\n                case \">\":\n                    return { value: left.value > right.value }\n                case \">=\":\n                    return { value: left.value >= right.value }\n                case \"<<\":\n                    return { value: left.value << right.value }\n                case \">>\":\n                    return { value: left.value >> right.value }\n                case \">>>\":\n                    return { value: left.value >>> right.value }\n                case \"+\":\n                    return { value: left.value + right.value }\n                case \"-\":\n                    return { value: left.value - right.value }\n                case \"*\":\n                    return { value: left.value * right.value }\n                case \"/\":\n                    return { value: left.value / right.value }\n                case \"%\":\n                    return { value: left.value % right.value }\n                case \"**\":\n                    return { value: Math.pow(left.value, right.value) }\n                case \"|\":\n                    return { value: left.value | right.value }\n                case \"^\":\n                    return { value: left.value ^ right.value }\n                case \"&\":\n                    return { value: left.value & right.value }\n\n                // no default\n            }\n        }\n\n        return null\n    },\n\n    CallExpression(node, initialScope) {\n        const calleeNode = node.callee\n        const args = getElementValues(node.arguments, initialScope)\n\n        if (args != null) {\n            if (calleeNode.type === \"MemberExpression\") {\n                if (calleeNode.property.type === \"PrivateIdentifier\") {\n                    return null\n                }\n                const object = getStaticValueR(calleeNode.object, initialScope)\n                if (object != null) {\n                    if (\n                        object.value == null &&\n                        (object.optional || node.optional)\n                    ) {\n                        return { value: undefined, optional: true }\n                    }\n                    const property = getStaticPropertyNameValue(\n                        calleeNode,\n                        initialScope,\n                    )\n\n                    if (property != null) {\n                        const receiver = object.value\n                        const methodName = property.value\n                        if (callAllowed.has(receiver[methodName])) {\n                            return { value: receiver[methodName](...args) }\n                        }\n                        if (callPassThrough.has(receiver[methodName])) {\n                            return { value: args[0] }\n                        }\n                    }\n                }\n            } else {\n                const callee = getStaticValueR(calleeNode, initialScope)\n                if (callee != null) {\n                    if (callee.value == null && node.optional) {\n                        return { value: undefined, optional: true }\n                    }\n                    const func = callee.value\n                    if (callAllowed.has(func)) {\n                        return { value: func(...args) }\n                    }\n                    if (callPassThrough.has(func)) {\n                        return { value: args[0] }\n                    }\n                }\n            }\n        }\n\n        return null\n    },\n\n    ConditionalExpression(node, initialScope) {\n        const test = getStaticValueR(node.test, initialScope)\n        if (test != null) {\n            return test.value\n                ? getStaticValueR(node.consequent, initialScope)\n                : getStaticValueR(node.alternate, initialScope)\n        }\n        return null\n    },\n\n    ExpressionStatement(node, initialScope) {\n        return getStaticValueR(node.expression, initialScope)\n    },\n\n    Identifier(node, initialScope) {\n        if (initialScope != null) {\n            const variable = findVariable(initialScope, node)\n\n            // Built-in globals.\n            if (\n                variable != null &&\n                variable.defs.length === 0 &&\n                builtinNames.has(variable.name) &&\n                variable.name in globalObject\n            ) {\n                return { value: globalObject[variable.name] }\n            }\n\n            // Constants.\n            if (variable != null && variable.defs.length === 1) {\n                const def = variable.defs[0]\n                if (\n                    def.parent &&\n                    def.parent.kind === \"const\" &&\n                    // TODO(mysticatea): don't support destructuring here.\n                    def.node.id.type === \"Identifier\"\n                ) {\n                    return getStaticValueR(def.node.init, initialScope)\n                }\n            }\n        }\n        return null\n    },\n\n    Literal(node) {\n        //istanbul ignore if : this is implementation-specific behavior.\n        if ((node.regex != null || node.bigint != null) && node.value == null) {\n            // It was a RegExp/BigInt literal, but Node.js didn't support it.\n            return null\n        }\n        return { value: node.value }\n    },\n\n    LogicalExpression(node, initialScope) {\n        const left = getStaticValueR(node.left, initialScope)\n        if (left != null) {\n            if (\n                (node.operator === \"||\" && Boolean(left.value) === true) ||\n                (node.operator === \"&&\" && Boolean(left.value) === false) ||\n                (node.operator === \"??\" && left.value != null)\n            ) {\n                return left\n            }\n\n            const right = getStaticValueR(node.right, initialScope)\n            if (right != null) {\n                return right\n            }\n        }\n\n        return null\n    },\n\n    MemberExpression(node, initialScope) {\n        if (node.property.type === \"PrivateIdentifier\") {\n            return null\n        }\n        const object = getStaticValueR(node.object, initialScope)\n        if (object != null) {\n            if (object.value == null && (object.optional || node.optional)) {\n                return { value: undefined, optional: true }\n            }\n            const property = getStaticPropertyNameValue(node, initialScope)\n\n            if (property != null && !isGetter(object.value, property.value)) {\n                return { value: object.value[property.value] }\n            }\n        }\n        return null\n    },\n\n    ChainExpression(node, initialScope) {\n        const expression = getStaticValueR(node.expression, initialScope)\n        if (expression != null) {\n            return { value: expression.value }\n        }\n        return null\n    },\n\n    NewExpression(node, initialScope) {\n        const callee = getStaticValueR(node.callee, initialScope)\n        const args = getElementValues(node.arguments, initialScope)\n\n        if (callee != null && args != null) {\n            const Func = callee.value\n            if (callAllowed.has(Func)) {\n                return { value: new Func(...args) }\n            }\n        }\n\n        return null\n    },\n\n    ObjectExpression(node, initialScope) {\n        const object = {}\n\n        for (const propertyNode of node.properties) {\n            if (propertyNode.type === \"Property\") {\n                if (propertyNode.kind !== \"init\") {\n                    return null\n                }\n                const key = getStaticPropertyNameValue(\n                    propertyNode,\n                    initialScope,\n                )\n                const value = getStaticValueR(propertyNode.value, initialScope)\n                if (key == null || value == null) {\n                    return null\n                }\n                object[key.value] = value.value\n            } else if (\n                propertyNode.type === \"SpreadElement\" ||\n                propertyNode.type === \"ExperimentalSpreadProperty\"\n            ) {\n                const argument = getStaticValueR(\n                    propertyNode.argument,\n                    initialScope,\n                )\n                if (argument == null) {\n                    return null\n                }\n                Object.assign(object, argument.value)\n            } else {\n                return null\n            }\n        }\n\n        return { value: object }\n    },\n\n    SequenceExpression(node, initialScope) {\n        const last = node.expressions[node.expressions.length - 1]\n        return getStaticValueR(last, initialScope)\n    },\n\n    TaggedTemplateExpression(node, initialScope) {\n        const tag = getStaticValueR(node.tag, initialScope)\n        const expressions = getElementValues(\n            node.quasi.expressions,\n            initialScope,\n        )\n\n        if (tag != null && expressions != null) {\n            const func = tag.value\n            const strings = node.quasi.quasis.map((q) => q.value.cooked)\n            strings.raw = node.quasi.quasis.map((q) => q.value.raw)\n\n            if (func === String.raw) {\n                return { value: func(strings, ...expressions) }\n            }\n        }\n\n        return null\n    },\n\n    TemplateLiteral(node, initialScope) {\n        const expressions = getElementValues(node.expressions, initialScope)\n        if (expressions != null) {\n            let value = node.quasis[0].value.cooked\n            for (let i = 0; i < expressions.length; ++i) {\n                value += expressions[i]\n                value += node.quasis[i + 1].value.cooked\n            }\n            return { value }\n        }\n        return null\n    },\n\n    UnaryExpression(node, initialScope) {\n        if (node.operator === \"delete\") {\n            // Not supported.\n            return null\n        }\n        if (node.operator === \"void\") {\n            return { value: undefined }\n        }\n\n        const arg = getStaticValueR(node.argument, initialScope)\n        if (arg != null) {\n            switch (node.operator) {\n                case \"-\":\n                    return { value: -arg.value }\n                case \"+\":\n                    return { value: +arg.value } //eslint-disable-line no-implicit-coercion\n                case \"!\":\n                    return { value: !arg.value }\n                case \"~\":\n                    return { value: ~arg.value }\n                case \"typeof\":\n                    return { value: typeof arg.value }\n\n                // no default\n            }\n        }\n\n        return null\n    },\n})\n\n/**\n * Get the value of a given node if it's a static value.\n * @param {Node} node The node to get.\n * @param {Scope|undefined} initialScope The scope to start finding variable.\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the node, or `null`.\n */\nfunction getStaticValueR(node, initialScope) {\n    if (node != null && Object.hasOwnProperty.call(operations, node.type)) {\n        return operations[node.type](node, initialScope)\n    }\n    return null\n}\n\n/**\n * Get the static value of property name from a MemberExpression node or a Property node.\n * @param {Node} node The node to get.\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is a computed property node and this scope was given, this checks the computed property name by the `getStringIfConstant` function with the scope, and returns the value of it.\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the property name of the node, or `null`.\n */\nfunction getStaticPropertyNameValue(node, initialScope) {\n    const nameNode = node.type === \"Property\" ? node.key : node.property\n\n    if (node.computed) {\n        return getStaticValueR(nameNode, initialScope)\n    }\n\n    if (nameNode.type === \"Identifier\") {\n        return { value: nameNode.name }\n    }\n\n    if (nameNode.type === \"Literal\") {\n        if (nameNode.bigint) {\n            return { value: nameNode.bigint }\n        }\n        return { value: String(nameNode.value) }\n    }\n\n    return null\n}\n\n/**\n * Get the value of a given node if it's a static value.\n * @param {Node} node The node to get.\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If this scope was given, this tries to resolve identifier references which are in the given node as much as possible.\n * @returns {{value:any}|{value:undefined,optional?:true}|null} The static value of the node, or `null`.\n */\nexport function getStaticValue(node, initialScope = null) {\n    try {\n        return getStaticValueR(node, initialScope)\n    } catch (_error) {\n        return null\n    }\n}\n","import { getStaticValue } from \"./get-static-value\"\n\n/**\n * Get the value of a given node if it's a literal or a template literal.\n * @param {Node} node The node to get.\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is an Identifier node and this scope was given, this checks the variable of the identifier, and returns the value of it if the variable is a constant.\n * @returns {string|null} The value of the node, or `null`.\n */\nexport function getStringIfConstant(node, initialScope = null) {\n    // Handle the literals that the platform doesn't support natively.\n    if (node && node.type === \"Literal\" && node.value === null) {\n        if (node.regex) {\n            return `/${node.regex.pattern}/${node.regex.flags}`\n        }\n        if (node.bigint) {\n            return node.bigint\n        }\n    }\n\n    const evaluated = getStaticValue(node, initialScope)\n    return evaluated && String(evaluated.value)\n}\n","import { getStringIfConstant } from \"./get-string-if-constant\"\n\n/**\n * Get the property name from a MemberExpression node or a Property node.\n * @param {Node} node The node to get.\n * @param {Scope} [initialScope] The scope to start finding variable. Optional. If the node is a computed property node and this scope was given, this checks the computed property name by the `getStringIfConstant` function with the scope, and returns the value of it.\n * @returns {string|null} The property name of the node.\n */\nexport function getPropertyName(node, initialScope) {\n    switch (node.type) {\n        case \"MemberExpression\":\n            if (node.computed) {\n                return getStringIfConstant(node.property, initialScope)\n            }\n            if (node.property.type === \"PrivateIdentifier\") {\n                return null\n            }\n            return node.property.name\n\n        case \"Property\":\n        case \"MethodDefinition\":\n        case \"PropertyDefinition\":\n            if (node.computed) {\n                return getStringIfConstant(node.key, initialScope)\n            }\n            if (node.key.type === \"Literal\") {\n                return String(node.key.value)\n            }\n            if (node.key.type === \"PrivateIdentifier\") {\n                return null\n            }\n            return node.key.name\n\n        // no default\n    }\n\n    return null\n}\n","import { getPropertyName } from \"./get-property-name\"\n\n/**\n * Get the name and kind of the given function node.\n * @param {ASTNode} node - The function node to get.\n * @param {SourceCode} [sourceCode] The source code object to get the code of computed property keys.\n * @returns {string} The name and kind of the function node.\n */\n// eslint-disable-next-line complexity\nexport function getFunctionNameWithKind(node, sourceCode) {\n    const parent = node.parent\n    const tokens = []\n    const isObjectMethod = parent.type === \"Property\" && parent.value === node\n    const isClassMethod =\n        parent.type === \"MethodDefinition\" && parent.value === node\n    const isClassFieldMethod =\n        parent.type === \"PropertyDefinition\" && parent.value === node\n\n    // Modifiers.\n    if (isClassMethod || isClassFieldMethod) {\n        if (parent.static) {\n            tokens.push(\"static\")\n        }\n        if (parent.key.type === \"PrivateIdentifier\") {\n            tokens.push(\"private\")\n        }\n    }\n    if (node.async) {\n        tokens.push(\"async\")\n    }\n    if (node.generator) {\n        tokens.push(\"generator\")\n    }\n\n    // Kinds.\n    if (isObjectMethod || isClassMethod) {\n        if (parent.kind === \"constructor\") {\n            return \"constructor\"\n        }\n        if (parent.kind === \"get\") {\n            tokens.push(\"getter\")\n        } else if (parent.kind === \"set\") {\n            tokens.push(\"setter\")\n        } else {\n            tokens.push(\"method\")\n        }\n    } else if (isClassFieldMethod) {\n        tokens.push(\"method\")\n    } else {\n        if (node.type === \"ArrowFunctionExpression\") {\n            tokens.push(\"arrow\")\n        }\n        tokens.push(\"function\")\n    }\n\n    // Names.\n    if (isObjectMethod || isClassMethod || isClassFieldMethod) {\n        if (parent.key.type === \"PrivateIdentifier\") {\n            tokens.push(`#${parent.key.name}`)\n        } else {\n            const name = getPropertyName(parent)\n            if (name) {\n                tokens.push(`'${name}'`)\n            } else if (sourceCode) {\n                const keyText = sourceCode.getText(parent.key)\n                if (!keyText.includes(\"\\n\")) {\n                    tokens.push(`[${keyText}]`)\n                }\n            }\n        }\n    } else if (node.id) {\n        tokens.push(`'${node.id.name}'`)\n    } else if (\n        parent.type === \"VariableDeclarator\" &&\n        parent.id &&\n        parent.id.type === \"Identifier\"\n    ) {\n        tokens.push(`'${parent.id.name}'`)\n    } else if (\n        (parent.type === \"AssignmentExpression\" ||\n            parent.type === \"AssignmentPattern\") &&\n        parent.left &&\n        parent.left.type === \"Identifier\"\n    ) {\n        tokens.push(`'${parent.left.name}'`)\n    }\n\n    return tokens.join(\" \")\n}\n","import evk from \"eslint-visitor-keys\"\n\nconst typeConversionBinaryOps = Object.freeze(\n    new Set([\n        \"==\",\n        \"!=\",\n        \"<\",\n        \"<=\",\n        \">\",\n        \">=\",\n        \"<<\",\n        \">>\",\n        \">>>\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"%\",\n        \"|\",\n        \"^\",\n        \"&\",\n        \"in\",\n    ]),\n)\nconst typeConversionUnaryOps = Object.freeze(new Set([\"-\", \"+\", \"!\", \"~\"]))\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\nfunction isNode(x) {\n    return x !== null && typeof x === \"object\" && typeof x.type === \"string\"\n}\n\nconst visitor = Object.freeze(\n    Object.assign(Object.create(null), {\n        $visit(node, options, visitorKeys) {\n            const { type } = node\n\n            if (typeof this[type] === \"function\") {\n                return this[type](node, options, visitorKeys)\n            }\n\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n\n        $visitChildren(node, options, visitorKeys) {\n            const { type } = node\n\n            for (const key of visitorKeys[type] || evk.getKeys(node)) {\n                const value = node[key]\n\n                if (Array.isArray(value)) {\n                    for (const element of value) {\n                        if (\n                            isNode(element) &&\n                            this.$visit(element, options, visitorKeys)\n                        ) {\n                            return true\n                        }\n                    }\n                } else if (\n                    isNode(value) &&\n                    this.$visit(value, options, visitorKeys)\n                ) {\n                    return true\n                }\n            }\n\n            return false\n        },\n\n        ArrowFunctionExpression() {\n            return false\n        },\n        AssignmentExpression() {\n            return true\n        },\n        AwaitExpression() {\n            return true\n        },\n        BinaryExpression(node, options, visitorKeys) {\n            if (\n                options.considerImplicitTypeConversion &&\n                typeConversionBinaryOps.has(node.operator) &&\n                (node.left.type !== \"Literal\" || node.right.type !== \"Literal\")\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        CallExpression() {\n            return true\n        },\n        FunctionExpression() {\n            return false\n        },\n        ImportExpression() {\n            return true\n        },\n        MemberExpression(node, options, visitorKeys) {\n            if (options.considerGetters) {\n                return true\n            }\n            if (\n                options.considerImplicitTypeConversion &&\n                node.computed &&\n                node.property.type !== \"Literal\"\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        MethodDefinition(node, options, visitorKeys) {\n            if (\n                options.considerImplicitTypeConversion &&\n                node.computed &&\n                node.key.type !== \"Literal\"\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        NewExpression() {\n            return true\n        },\n        Property(node, options, visitorKeys) {\n            if (\n                options.considerImplicitTypeConversion &&\n                node.computed &&\n                node.key.type !== \"Literal\"\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        PropertyDefinition(node, options, visitorKeys) {\n            if (\n                options.considerImplicitTypeConversion &&\n                node.computed &&\n                node.key.type !== \"Literal\"\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        UnaryExpression(node, options, visitorKeys) {\n            if (node.operator === \"delete\") {\n                return true\n            }\n            if (\n                options.considerImplicitTypeConversion &&\n                typeConversionUnaryOps.has(node.operator) &&\n                node.argument.type !== \"Literal\"\n            ) {\n                return true\n            }\n            return this.$visitChildren(node, options, visitorKeys)\n        },\n        UpdateExpression() {\n            return true\n        },\n        YieldExpression() {\n            return true\n        },\n    }),\n)\n\n/**\n * Check whether a given node has any side effect or not.\n * @param {Node} node The node to get.\n * @param {SourceCode} sourceCode The source code object.\n * @param {object} [options] The option object.\n * @param {boolean} [options.considerGetters=false] If `true` then it considers member accesses as the node which has side effects.\n * @param {boolean} [options.considerImplicitTypeConversion=false] If `true` then it considers implicit type conversion as the node which has side effects.\n * @param {object} [options.visitorKeys=evk.KEYS] The keys to traverse nodes. Use `context.getSourceCode().visitorKeys`.\n * @returns {boolean} `true` if the node has a certain side effect.\n */\nexport function hasSideEffect(\n    node,\n    sourceCode,\n    { considerGetters = false, considerImplicitTypeConversion = false } = {},\n) {\n    return visitor.$visit(\n        node,\n        { considerGetters, considerImplicitTypeConversion },\n        sourceCode.visitorKeys || evk.KEYS,\n    )\n}\n","import { isClosingParenToken, isOpeningParenToken } from \"./token-predicate\"\n\n/**\n * Get the left parenthesis of the parent node syntax if it exists.\n * E.g., `if (a) {}` then the `(`.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {Token|null} The left parenthesis of the parent node syntax\n */\nfunction getParentSyntaxParen(node, sourceCode) {\n    const parent = node.parent\n\n    switch (parent.type) {\n        case \"CallExpression\":\n        case \"NewExpression\":\n            if (parent.arguments.length === 1 && parent.arguments[0] === node) {\n                return sourceCode.getTokenAfter(\n                    parent.callee,\n                    isOpeningParenToken,\n                )\n            }\n            return null\n\n        case \"DoWhileStatement\":\n            if (parent.test === node) {\n                return sourceCode.getTokenAfter(\n                    parent.body,\n                    isOpeningParenToken,\n                )\n            }\n            return null\n\n        case \"IfStatement\":\n        case \"WhileStatement\":\n            if (parent.test === node) {\n                return sourceCode.getFirstToken(parent, 1)\n            }\n            return null\n\n        case \"ImportExpression\":\n            if (parent.source === node) {\n                return sourceCode.getFirstToken(parent, 1)\n            }\n            return null\n\n        case \"SwitchStatement\":\n            if (parent.discriminant === node) {\n                return sourceCode.getFirstToken(parent, 1)\n            }\n            return null\n\n        case \"WithStatement\":\n            if (parent.object === node) {\n                return sourceCode.getFirstToken(parent, 1)\n            }\n            return null\n\n        default:\n            return null\n    }\n}\n\n/**\n * Check whether a given node is parenthesized or not.\n * @param {number} times The number of parantheses.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {boolean} `true` if the node is parenthesized the given times.\n */\n/**\n * Check whether a given node is parenthesized or not.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {boolean} `true` if the node is parenthesized.\n */\nexport function isParenthesized(\n    timesOrNode,\n    nodeOrSourceCode,\n    optionalSourceCode,\n) {\n    let times, node, sourceCode, maybeLeftParen, maybeRightParen\n    if (typeof timesOrNode === \"number\") {\n        times = timesOrNode | 0\n        node = nodeOrSourceCode\n        sourceCode = optionalSourceCode\n        if (!(times >= 1)) {\n            throw new TypeError(\"'times' should be a positive integer.\")\n        }\n    } else {\n        times = 1\n        node = timesOrNode\n        sourceCode = nodeOrSourceCode\n    }\n\n    if (\n        node == null ||\n        // `CatchClause.param` can't be parenthesized, example `try {} catch (error) {}`\n        (node.parent.type === \"CatchClause\" && node.parent.param === node)\n    ) {\n        return false\n    }\n\n    maybeLeftParen = maybeRightParen = node\n    do {\n        maybeLeftParen = sourceCode.getTokenBefore(maybeLeftParen)\n        maybeRightParen = sourceCode.getTokenAfter(maybeRightParen)\n    } while (\n        maybeLeftParen != null &&\n        maybeRightParen != null &&\n        isOpeningParenToken(maybeLeftParen) &&\n        isClosingParenToken(maybeRightParen) &&\n        // Avoid false positive such as `if (a) {}`\n        maybeLeftParen !== getParentSyntaxParen(node, sourceCode) &&\n        --times > 0\n    )\n\n    return times === 0\n}\n","/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\nconst placeholder = /\\$(?:[$&`']|[1-9][0-9]?)/gu\n\n/** @type {WeakMap<PatternMatcher, {pattern:RegExp,escaped:boolean}>} */\nconst internal = new WeakMap()\n\n/**\n * Check whether a given character is escaped or not.\n * @param {string} str The string to check.\n * @param {number} index The location of the character to check.\n * @returns {boolean} `true` if the character is escaped.\n */\nfunction isEscaped(str, index) {\n    let escaped = false\n    for (let i = index - 1; i >= 0 && str.charCodeAt(i) === 0x5c; --i) {\n        escaped = !escaped\n    }\n    return escaped\n}\n\n/**\n * Replace a given string by a given matcher.\n * @param {PatternMatcher} matcher The pattern matcher.\n * @param {string} str The string to be replaced.\n * @param {string} replacement The new substring to replace each matched part.\n * @returns {string} The replaced string.\n */\nfunction replaceS(matcher, str, replacement) {\n    const chunks = []\n    let index = 0\n\n    /** @type {RegExpExecArray} */\n    let match = null\n\n    /**\n     * @param {string} key The placeholder.\n     * @returns {string} The replaced string.\n     */\n    function replacer(key) {\n        switch (key) {\n            case \"$$\":\n                return \"$\"\n            case \"$&\":\n                return match[0]\n            case \"$`\":\n                return str.slice(0, match.index)\n            case \"$'\":\n                return str.slice(match.index + match[0].length)\n            default: {\n                const i = key.slice(1)\n                if (i in match) {\n                    return match[i]\n                }\n                return key\n            }\n        }\n    }\n\n    for (match of matcher.execAll(str)) {\n        chunks.push(str.slice(index, match.index))\n        chunks.push(replacement.replace(placeholder, replacer))\n        index = match.index + match[0].length\n    }\n    chunks.push(str.slice(index))\n\n    return chunks.join(\"\")\n}\n\n/**\n * Replace a given string by a given matcher.\n * @param {PatternMatcher} matcher The pattern matcher.\n * @param {string} str The string to be replaced.\n * @param {(...strs[])=>string} replace The function to replace each matched part.\n * @returns {string} The replaced string.\n */\nfunction replaceF(matcher, str, replace) {\n    const chunks = []\n    let index = 0\n\n    for (const match of matcher.execAll(str)) {\n        chunks.push(str.slice(index, match.index))\n        chunks.push(String(replace(...match, match.index, match.input)))\n        index = match.index + match[0].length\n    }\n    chunks.push(str.slice(index))\n\n    return chunks.join(\"\")\n}\n\n/**\n * The class to find patterns as considering escape sequences.\n */\nexport class PatternMatcher {\n    /**\n     * Initialize this matcher.\n     * @param {RegExp} pattern The pattern to match.\n     * @param {{escaped:boolean}} options The options.\n     */\n    constructor(pattern, { escaped = false } = {}) {\n        if (!(pattern instanceof RegExp)) {\n            throw new TypeError(\"'pattern' should be a RegExp instance.\")\n        }\n        if (!pattern.flags.includes(\"g\")) {\n            throw new Error(\"'pattern' should contains 'g' flag.\")\n        }\n\n        internal.set(this, {\n            pattern: new RegExp(pattern.source, pattern.flags),\n            escaped: Boolean(escaped),\n        })\n    }\n\n    /**\n     * Find the pattern in a given string.\n     * @param {string} str The string to find.\n     * @returns {IterableIterator<RegExpExecArray>} The iterator which iterate the matched information.\n     */\n    *execAll(str) {\n        const { pattern, escaped } = internal.get(this)\n        let match = null\n        let lastIndex = 0\n\n        pattern.lastIndex = 0\n        while ((match = pattern.exec(str)) != null) {\n            if (escaped || !isEscaped(str, match.index)) {\n                lastIndex = pattern.lastIndex\n                yield match\n                pattern.lastIndex = lastIndex\n            }\n        }\n    }\n\n    /**\n     * Check whether the pattern is found in a given string.\n     * @param {string} str The string to check.\n     * @returns {boolean} `true` if the pattern was found in the string.\n     */\n    test(str) {\n        const it = this.execAll(str)\n        const ret = it.next()\n        return !ret.done\n    }\n\n    /**\n     * Replace a given string.\n     * @param {string} str The string to be replaced.\n     * @param {(string|((...strs:string[])=>string))} replacer The string or function to replace. This is the same as the 2nd argument of `String.prototype.replace`.\n     * @returns {string} The replaced string.\n     */\n    [Symbol.replace](str, replacer) {\n        return typeof replacer === \"function\"\n            ? replaceF(this, String(str), replacer)\n            : replaceS(this, String(str), String(replacer))\n    }\n}\n","import { findVariable } from \"./find-variable\"\nimport { getPropertyName } from \"./get-property-name\"\nimport { getStringIfConstant } from \"./get-string-if-constant\"\n\nconst IMPORT_TYPE = /^(?:Import|Export(?:All|Default|Named))Declaration$/u\nconst has = Function.call.bind(Object.hasOwnProperty)\n\nexport const READ = Symbol(\"read\")\nexport const CALL = Symbol(\"call\")\nexport const CONSTRUCT = Symbol(\"construct\")\nexport const ESM = Symbol(\"esm\")\n\nconst requireCall = { require: { [CALL]: true } }\n\n/**\n * Check whether a given variable is modified or not.\n * @param {Variable} variable The variable to check.\n * @returns {boolean} `true` if the variable is modified.\n */\nfunction isModifiedGlobal(variable) {\n    return (\n        variable == null ||\n        variable.defs.length !== 0 ||\n        variable.references.some((r) => r.isWrite())\n    )\n}\n\n/**\n * Check if the value of a given node is passed through to the parent syntax as-is.\n * For example, `a` and `b` in (`a || b` and `c ? a : b`) are passed through.\n * @param {Node} node A node to check.\n * @returns {boolean} `true` if the node is passed through.\n */\nfunction isPassThrough(node) {\n    const parent = node.parent\n\n    switch (parent && parent.type) {\n        case \"ConditionalExpression\":\n            return parent.consequent === node || parent.alternate === node\n        case \"LogicalExpression\":\n            return true\n        case \"SequenceExpression\":\n            return parent.expressions[parent.expressions.length - 1] === node\n        case \"ChainExpression\":\n            return true\n\n        default:\n            return false\n    }\n}\n\n/**\n * The reference tracker.\n */\nexport class ReferenceTracker {\n    /**\n     * Initialize this tracker.\n     * @param {Scope} globalScope The global scope.\n     * @param {object} [options] The options.\n     * @param {\"legacy\"|\"strict\"} [options.mode=\"strict\"] The mode to determine the ImportDeclaration's behavior for CJS modules.\n     * @param {string[]} [options.globalObjectNames=[\"global\",\"globalThis\",\"self\",\"window\"]] The variable names for Global Object.\n     */\n    constructor(\n        globalScope,\n        {\n            mode = \"strict\",\n            globalObjectNames = [\"global\", \"globalThis\", \"self\", \"window\"],\n        } = {},\n    ) {\n        this.variableStack = []\n        this.globalScope = globalScope\n        this.mode = mode\n        this.globalObjectNames = globalObjectNames.slice(0)\n    }\n\n    /**\n     * Iterate the references of global variables.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *iterateGlobalReferences(traceMap) {\n        for (const key of Object.keys(traceMap)) {\n            const nextTraceMap = traceMap[key]\n            const path = [key]\n            const variable = this.globalScope.set.get(key)\n\n            if (isModifiedGlobal(variable)) {\n                continue\n            }\n\n            yield* this._iterateVariableReferences(\n                variable,\n                path,\n                nextTraceMap,\n                true,\n            )\n        }\n\n        for (const key of this.globalObjectNames) {\n            const path = []\n            const variable = this.globalScope.set.get(key)\n\n            if (isModifiedGlobal(variable)) {\n                continue\n            }\n\n            yield* this._iterateVariableReferences(\n                variable,\n                path,\n                traceMap,\n                false,\n            )\n        }\n    }\n\n    /**\n     * Iterate the references of CommonJS modules.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *iterateCjsReferences(traceMap) {\n        for (const { node } of this.iterateGlobalReferences(requireCall)) {\n            const key = getStringIfConstant(node.arguments[0])\n            if (key == null || !has(traceMap, key)) {\n                continue\n            }\n\n            const nextTraceMap = traceMap[key]\n            const path = [key]\n\n            if (nextTraceMap[READ]) {\n                yield {\n                    node,\n                    path,\n                    type: READ,\n                    info: nextTraceMap[READ],\n                }\n            }\n            yield* this._iteratePropertyReferences(node, path, nextTraceMap)\n        }\n    }\n\n    /**\n     * Iterate the references of ES modules.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *iterateEsmReferences(traceMap) {\n        const programNode = this.globalScope.block\n\n        for (const node of programNode.body) {\n            if (!IMPORT_TYPE.test(node.type) || node.source == null) {\n                continue\n            }\n            const moduleId = node.source.value\n\n            if (!has(traceMap, moduleId)) {\n                continue\n            }\n            const nextTraceMap = traceMap[moduleId]\n            const path = [moduleId]\n\n            if (nextTraceMap[READ]) {\n                yield { node, path, type: READ, info: nextTraceMap[READ] }\n            }\n\n            if (node.type === \"ExportAllDeclaration\") {\n                for (const key of Object.keys(nextTraceMap)) {\n                    const exportTraceMap = nextTraceMap[key]\n                    if (exportTraceMap[READ]) {\n                        yield {\n                            node,\n                            path: path.concat(key),\n                            type: READ,\n                            info: exportTraceMap[READ],\n                        }\n                    }\n                }\n            } else {\n                for (const specifier of node.specifiers) {\n                    const esm = has(nextTraceMap, ESM)\n                    const it = this._iterateImportReferences(\n                        specifier,\n                        path,\n                        esm\n                            ? nextTraceMap\n                            : this.mode === \"legacy\"\n                            ? { default: nextTraceMap, ...nextTraceMap }\n                            : { default: nextTraceMap },\n                    )\n\n                    if (esm) {\n                        yield* it\n                    } else {\n                        for (const report of it) {\n                            report.path = report.path.filter(exceptDefault)\n                            if (\n                                report.path.length >= 2 ||\n                                report.type !== READ\n                            ) {\n                                yield report\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Iterate the references for a given variable.\n     * @param {Variable} variable The variable to iterate that references.\n     * @param {string[]} path The current path.\n     * @param {object} traceMap The trace map.\n     * @param {boolean} shouldReport = The flag to report those references.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *_iterateVariableReferences(variable, path, traceMap, shouldReport) {\n        if (this.variableStack.includes(variable)) {\n            return\n        }\n        this.variableStack.push(variable)\n        try {\n            for (const reference of variable.references) {\n                if (!reference.isRead()) {\n                    continue\n                }\n                const node = reference.identifier\n\n                if (shouldReport && traceMap[READ]) {\n                    yield { node, path, type: READ, info: traceMap[READ] }\n                }\n                yield* this._iteratePropertyReferences(node, path, traceMap)\n            }\n        } finally {\n            this.variableStack.pop()\n        }\n    }\n\n    /**\n     * Iterate the references for a given AST node.\n     * @param rootNode The AST node to iterate references.\n     * @param {string[]} path The current path.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    //eslint-disable-next-line complexity\n    *_iteratePropertyReferences(rootNode, path, traceMap) {\n        let node = rootNode\n        while (isPassThrough(node)) {\n            node = node.parent\n        }\n\n        const parent = node.parent\n        if (parent.type === \"MemberExpression\") {\n            if (parent.object === node) {\n                const key = getPropertyName(parent)\n                if (key == null || !has(traceMap, key)) {\n                    return\n                }\n\n                path = path.concat(key) //eslint-disable-line no-param-reassign\n                const nextTraceMap = traceMap[key]\n                if (nextTraceMap[READ]) {\n                    yield {\n                        node: parent,\n                        path,\n                        type: READ,\n                        info: nextTraceMap[READ],\n                    }\n                }\n                yield* this._iteratePropertyReferences(\n                    parent,\n                    path,\n                    nextTraceMap,\n                )\n            }\n            return\n        }\n        if (parent.type === \"CallExpression\") {\n            if (parent.callee === node && traceMap[CALL]) {\n                yield { node: parent, path, type: CALL, info: traceMap[CALL] }\n            }\n            return\n        }\n        if (parent.type === \"NewExpression\") {\n            if (parent.callee === node && traceMap[CONSTRUCT]) {\n                yield {\n                    node: parent,\n                    path,\n                    type: CONSTRUCT,\n                    info: traceMap[CONSTRUCT],\n                }\n            }\n            return\n        }\n        if (parent.type === \"AssignmentExpression\") {\n            if (parent.right === node) {\n                yield* this._iterateLhsReferences(parent.left, path, traceMap)\n                yield* this._iteratePropertyReferences(parent, path, traceMap)\n            }\n            return\n        }\n        if (parent.type === \"AssignmentPattern\") {\n            if (parent.right === node) {\n                yield* this._iterateLhsReferences(parent.left, path, traceMap)\n            }\n            return\n        }\n        if (parent.type === \"VariableDeclarator\") {\n            if (parent.init === node) {\n                yield* this._iterateLhsReferences(parent.id, path, traceMap)\n            }\n        }\n    }\n\n    /**\n     * Iterate the references for a given Pattern node.\n     * @param {Node} patternNode The Pattern node to iterate references.\n     * @param {string[]} path The current path.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *_iterateLhsReferences(patternNode, path, traceMap) {\n        if (patternNode.type === \"Identifier\") {\n            const variable = findVariable(this.globalScope, patternNode)\n            if (variable != null) {\n                yield* this._iterateVariableReferences(\n                    variable,\n                    path,\n                    traceMap,\n                    false,\n                )\n            }\n            return\n        }\n        if (patternNode.type === \"ObjectPattern\") {\n            for (const property of patternNode.properties) {\n                const key = getPropertyName(property)\n\n                if (key == null || !has(traceMap, key)) {\n                    continue\n                }\n\n                const nextPath = path.concat(key)\n                const nextTraceMap = traceMap[key]\n                if (nextTraceMap[READ]) {\n                    yield {\n                        node: property,\n                        path: nextPath,\n                        type: READ,\n                        info: nextTraceMap[READ],\n                    }\n                }\n                yield* this._iterateLhsReferences(\n                    property.value,\n                    nextPath,\n                    nextTraceMap,\n                )\n            }\n            return\n        }\n        if (patternNode.type === \"AssignmentPattern\") {\n            yield* this._iterateLhsReferences(patternNode.left, path, traceMap)\n        }\n    }\n\n    /**\n     * Iterate the references for a given ModuleSpecifier node.\n     * @param {Node} specifierNode The ModuleSpecifier node to iterate references.\n     * @param {string[]} path The current path.\n     * @param {object} traceMap The trace map.\n     * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.\n     */\n    *_iterateImportReferences(specifierNode, path, traceMap) {\n        const type = specifierNode.type\n\n        if (type === \"ImportSpecifier\" || type === \"ImportDefaultSpecifier\") {\n            const key =\n                type === \"ImportDefaultSpecifier\"\n                    ? \"default\"\n                    : specifierNode.imported.name\n            if (!has(traceMap, key)) {\n                return\n            }\n\n            path = path.concat(key) //eslint-disable-line no-param-reassign\n            const nextTraceMap = traceMap[key]\n            if (nextTraceMap[READ]) {\n                yield {\n                    node: specifierNode,\n                    path,\n                    type: READ,\n                    info: nextTraceMap[READ],\n                }\n            }\n            yield* this._iterateVariableReferences(\n                findVariable(this.globalScope, specifierNode.local),\n                path,\n                nextTraceMap,\n                false,\n            )\n\n            return\n        }\n\n        if (type === \"ImportNamespaceSpecifier\") {\n            yield* this._iterateVariableReferences(\n                findVariable(this.globalScope, specifierNode.local),\n                path,\n                traceMap,\n                false,\n            )\n            return\n        }\n\n        if (type === \"ExportSpecifier\") {\n            const key = specifierNode.local.name\n            if (!has(traceMap, key)) {\n                return\n            }\n\n            path = path.concat(key) //eslint-disable-line no-param-reassign\n            const nextTraceMap = traceMap[key]\n            if (nextTraceMap[READ]) {\n                yield {\n                    node: specifierNode,\n                    path,\n                    type: READ,\n                    info: nextTraceMap[READ],\n                }\n            }\n        }\n    }\n}\n\nReferenceTracker.READ = READ\nReferenceTracker.CALL = CALL\nReferenceTracker.CONSTRUCT = CONSTRUCT\nReferenceTracker.ESM = ESM\n\n/**\n * This is a predicate function for Array#filter.\n * @param {string} name A name part.\n * @param {number} index The index of the name.\n * @returns {boolean} `false` if it's default.\n */\nfunction exceptDefault(name, index) {\n    return !(index === 1 && name === \"default\")\n}\n","import { findVariable } from \"./find-variable\"\nimport { getFunctionHeadLocation } from \"./get-function-head-location\"\nimport { getFunctionNameWithKind } from \"./get-function-name-with-kind\"\nimport { getInnermostScope } from \"./get-innermost-scope\"\nimport { getPropertyName } from \"./get-property-name\"\nimport { getStaticValue } from \"./get-static-value\"\nimport { getStringIfConstant } from \"./get-string-if-constant\"\nimport { hasSideEffect } from \"./has-side-effect\"\nimport { isParenthesized } from \"./is-parenthesized\"\nimport { PatternMatcher } from \"./pattern-matcher\"\nimport {\n    CALL,\n    CONSTRUCT,\n    ESM,\n    READ,\n    ReferenceTracker,\n} from \"./reference-tracker\"\nimport {\n    isArrowToken,\n    isClosingBraceToken,\n    isClosingBracketToken,\n    isClosingParenToken,\n    isColonToken,\n    isCommaToken,\n    isCommentToken,\n    isNotArrowToken,\n    isNotClosingBraceToken,\n    isNotClosingBracketToken,\n    isNotClosingParenToken,\n    isNotColonToken,\n    isNotCommaToken,\n    isNotCommentToken,\n    isNotOpeningBraceToken,\n    isNotOpeningBracketToken,\n    isNotOpeningParenToken,\n    isNotSemicolonToken,\n    isOpeningBraceToken,\n    isOpeningBracketToken,\n    isOpeningParenToken,\n    isSemicolonToken,\n} from \"./token-predicate\"\n\nexport default {\n    CALL,\n    CONSTRUCT,\n    ESM,\n    findVariable,\n    getFunctionHeadLocation,\n    getFunctionNameWithKind,\n    getInnermostScope,\n    getPropertyName,\n    getStaticValue,\n    getStringIfConstant,\n    hasSideEffect,\n    isArrowToken,\n    isClosingBraceToken,\n    isClosingBracketToken,\n    isClosingParenToken,\n    isColonToken,\n    isCommaToken,\n    isCommentToken,\n    isNotArrowToken,\n    isNotClosingBraceToken,\n    isNotClosingBracketToken,\n    isNotClosingParenToken,\n    isNotColonToken,\n    isNotCommaToken,\n    isNotCommentToken,\n    isNotOpeningBraceToken,\n    isNotOpeningBracketToken,\n    isNotOpeningParenToken,\n    isNotSemicolonToken,\n    isOpeningBraceToken,\n    isOpeningBracketToken,\n    isOpeningParenToken,\n    isParenthesized,\n    isSemicolonToken,\n    PatternMatcher,\n    READ,\n    ReferenceTracker,\n}\nexport {\n    CALL,\n    CONSTRUCT,\n    ESM,\n    findVariable,\n    getFunctionHeadLocation,\n    getFunctionNameWithKind,\n    getInnermostScope,\n    getPropertyName,\n    getStaticValue,\n    getStringIfConstant,\n    hasSideEffect,\n    isArrowToken,\n    isClosingBraceToken,\n    isClosingBracketToken,\n    isClosingParenToken,\n    isColonToken,\n    isCommaToken,\n    isCommentToken,\n    isNotArrowToken,\n    isNotClosingBraceToken,\n    isNotClosingBracketToken,\n    isNotClosingParenToken,\n    isNotColonToken,\n    isNotCommaToken,\n    isNotCommentToken,\n    isNotOpeningBraceToken,\n    isNotOpeningBracketToken,\n    isNotOpeningParenToken,\n    isNotSemicolonToken,\n    isOpeningBraceToken,\n    isOpeningBracketToken,\n    isOpeningParenToken,\n    isParenthesized,\n    isSemicolonToken,\n    PatternMatcher,\n    READ,\n    ReferenceTracker,\n}\n"]},"metadata":{},"sourceType":"script"}