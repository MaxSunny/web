{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)\r\n * @author Vincent Lemeunier\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); // Maximum array length by the ECMAScript Specification.\n\n\nconst MAX_ARRAY_LENGTH = 2 ** 32 - 1; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\r\n * Convert the value to bigint if it's a string. Otherwise return the value as-is.\r\n * @param {bigint|number|string} x The value to normalize.\r\n * @returns {bigint|number} The normalized value.\r\n */\n\nfunction normalizeIgnoreValue(x) {\n  if (typeof x === \"string\") {\n    return BigInt(x.slice(0, -1));\n  }\n\n  return x;\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow magic numbers\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-magic-numbers\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        detectObjects: {\n          type: \"boolean\",\n          default: false\n        },\n        enforceConst: {\n          type: \"boolean\",\n          default: false\n        },\n        ignore: {\n          type: \"array\",\n          items: {\n            anyOf: [{\n              type: \"number\"\n            }, {\n              type: \"string\",\n              pattern: \"^[+-]?(?:0|[1-9][0-9]*)n$\"\n            }]\n          },\n          uniqueItems: true\n        },\n        ignoreArrayIndexes: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreDefaultValues: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      useConst: \"Number constants declarations must use 'const'.\",\n      noMagic: \"No magic number: {{raw}}.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0] || {},\n          detectObjects = !!config.detectObjects,\n          enforceConst = !!config.enforceConst,\n          ignore = (config.ignore || []).map(normalizeIgnoreValue),\n          ignoreArrayIndexes = !!config.ignoreArrayIndexes,\n          ignoreDefaultValues = !!config.ignoreDefaultValues;\n    const okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];\n    /**\r\n     * Returns whether the rule is configured to ignore the given value\r\n     * @param {bigint|number} value The value to check\r\n     * @returns {boolean} true if the value is ignored\r\n     */\n\n    function isIgnoredValue(value) {\n      return ignore.indexOf(value) !== -1;\n    }\n    /**\r\n     * Returns whether the number is a default value assignment.\r\n     * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n     * @returns {boolean} true if the number is a default value\r\n     */\n\n\n    function isDefaultValue(fullNumberNode) {\n      const parent = fullNumberNode.parent;\n      return parent.type === \"AssignmentPattern\" && parent.right === fullNumberNode;\n    }\n    /**\r\n     * Returns whether the given node is used as a radix within parseInt() or Number.parseInt()\r\n     * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n     * @returns {boolean} true if the node is radix\r\n     */\n\n\n    function isParseIntRadix(fullNumberNode) {\n      const parent = fullNumberNode.parent;\n      return parent.type === \"CallExpression\" && fullNumberNode === parent.arguments[1] && (astUtils.isSpecificId(parent.callee, \"parseInt\") || astUtils.isSpecificMemberAccess(parent.callee, \"Number\", \"parseInt\"));\n    }\n    /**\r\n     * Returns whether the given node is a direct child of a JSX node.\r\n     * In particular, it aims to detect numbers used as prop values in JSX tags.\r\n     * Example: <input maxLength={10} />\r\n     * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n     * @returns {boolean} true if the node is a JSX number\r\n     */\n\n\n    function isJSXNumber(fullNumberNode) {\n      return fullNumberNode.parent.type.indexOf(\"JSX\") === 0;\n    }\n    /**\r\n     * Returns whether the given node is used as an array index.\r\n     * Value must coerce to a valid array index name: \"0\", \"1\", \"2\" ... \"4294967294\".\r\n     *\r\n     * All other values, like \"-1\", \"2.5\", or \"4294967295\", are just \"normal\" object properties,\r\n     * which can be created and accessed on an array in addition to the array index properties,\r\n     * but they don't affect array's length and are not considered by methods such as .map(), .forEach() etc.\r\n     *\r\n     * The maximum array length by the specification is 2 ** 32 - 1 = 4294967295,\r\n     * thus the maximum valid index is 2 ** 32 - 2 = 4294967294.\r\n     *\r\n     * All notations are allowed, as long as the value coerces to one of \"0\", \"1\", \"2\" ... \"4294967294\".\r\n     *\r\n     * Valid examples:\r\n     * a[0], a[1], a[1.2e1], a[0xAB], a[0n], a[1n]\r\n     * a[-0] (same as a[0] because -0 coerces to \"0\")\r\n     * a[-0n] (-0n evaluates to 0n)\r\n     *\r\n     * Invalid examples:\r\n     * a[-1], a[-0xAB], a[-1n], a[2.5], a[1.23e1], a[12e-1]\r\n     * a[4294967295] (above the max index, it's an access to a regular property a[\"4294967295\"])\r\n     * a[999999999999999999999] (even if it wasn't above the max index, it would be a[\"1e+21\"])\r\n     * a[1e310] (same as a[\"Infinity\"])\r\n     * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n     * @param {bigint|number} value Value expressed by the fullNumberNode\r\n     * @returns {boolean} true if the node is a valid array index\r\n     */\n\n\n    function isArrayIndex(fullNumberNode, value) {\n      const parent = fullNumberNode.parent;\n      return parent.type === \"MemberExpression\" && parent.property === fullNumberNode && (Number.isInteger(value) || typeof value === \"bigint\") && value >= 0 && value < MAX_ARRAY_LENGTH;\n    }\n\n    return {\n      Literal(node) {\n        if (!astUtils.isNumericLiteral(node)) {\n          return;\n        }\n\n        let fullNumberNode;\n        let value;\n        let raw; // Treat unary minus as a part of the number\n\n        if (node.parent.type === \"UnaryExpression\" && node.parent.operator === \"-\") {\n          fullNumberNode = node.parent;\n          value = -node.value;\n          raw = `-${node.raw}`;\n        } else {\n          fullNumberNode = node;\n          value = node.value;\n          raw = node.raw;\n        }\n\n        const parent = fullNumberNode.parent; // Always allow radix arguments and JSX props\n\n        if (isIgnoredValue(value) || ignoreDefaultValues && isDefaultValue(fullNumberNode) || isParseIntRadix(fullNumberNode) || isJSXNumber(fullNumberNode) || ignoreArrayIndexes && isArrayIndex(fullNumberNode, value)) {\n          return;\n        }\n\n        if (parent.type === \"VariableDeclarator\") {\n          if (enforceConst && parent.parent.kind !== \"const\") {\n            context.report({\n              node: fullNumberNode,\n              messageId: \"useConst\"\n            });\n          }\n        } else if (okTypes.indexOf(parent.type) === -1 || parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\") {\n          context.report({\n            node: fullNumberNode,\n            messageId: \"noMagic\",\n            data: {\n              raw\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-magic-numbers.js"],"names":["astUtils","require","MAX_ARRAY_LENGTH","normalizeIgnoreValue","x","BigInt","slice","module","exports","meta","type","docs","description","recommended","url","schema","properties","detectObjects","default","enforceConst","ignore","items","anyOf","pattern","uniqueItems","ignoreArrayIndexes","ignoreDefaultValues","additionalProperties","messages","useConst","noMagic","create","context","config","options","map","okTypes","isIgnoredValue","value","indexOf","isDefaultValue","fullNumberNode","parent","right","isParseIntRadix","arguments","isSpecificId","callee","isSpecificMemberAccess","isJSXNumber","isArrayIndex","property","Number","isInteger","Literal","node","isNumericLiteral","raw","operator","kind","report","messageId","left","data"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)\r\n * @author Vincent Lemeunier\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n// Maximum array length by the ECMAScript Specification.\r\nconst MAX_ARRAY_LENGTH = 2 ** 32 - 1;\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Convert the value to bigint if it's a string. Otherwise return the value as-is.\r\n * @param {bigint|number|string} x The value to normalize.\r\n * @returns {bigint|number} The normalized value.\r\n */\r\nfunction normalizeIgnoreValue(x) {\r\n    if (typeof x === \"string\") {\r\n        return BigInt(x.slice(0, -1));\r\n    }\r\n    return x;\r\n}\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow magic numbers\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-magic-numbers\"\r\n        },\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                detectObjects: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                },\r\n                enforceConst: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                },\r\n                ignore: {\r\n                    type: \"array\",\r\n                    items: {\r\n                        anyOf: [\r\n                            { type: \"number\" },\r\n                            { type: \"string\", pattern: \"^[+-]?(?:0|[1-9][0-9]*)n$\" }\r\n                        ]\r\n                    },\r\n                    uniqueItems: true\r\n                },\r\n                ignoreArrayIndexes: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                },\r\n                ignoreDefaultValues: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            useConst: \"Number constants declarations must use 'const'.\",\r\n            noMagic: \"No magic number: {{raw}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const config = context.options[0] || {},\r\n            detectObjects = !!config.detectObjects,\r\n            enforceConst = !!config.enforceConst,\r\n            ignore = (config.ignore || []).map(normalizeIgnoreValue),\r\n            ignoreArrayIndexes = !!config.ignoreArrayIndexes,\r\n            ignoreDefaultValues = !!config.ignoreDefaultValues;\r\n\r\n        const okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];\r\n\r\n        /**\r\n         * Returns whether the rule is configured to ignore the given value\r\n         * @param {bigint|number} value The value to check\r\n         * @returns {boolean} true if the value is ignored\r\n         */\r\n        function isIgnoredValue(value) {\r\n            return ignore.indexOf(value) !== -1;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the number is a default value assignment.\r\n         * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n         * @returns {boolean} true if the number is a default value\r\n         */\r\n        function isDefaultValue(fullNumberNode) {\r\n            const parent = fullNumberNode.parent;\r\n\r\n            return parent.type === \"AssignmentPattern\" && parent.right === fullNumberNode;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the given node is used as a radix within parseInt() or Number.parseInt()\r\n         * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n         * @returns {boolean} true if the node is radix\r\n         */\r\n        function isParseIntRadix(fullNumberNode) {\r\n            const parent = fullNumberNode.parent;\r\n\r\n            return parent.type === \"CallExpression\" && fullNumberNode === parent.arguments[1] &&\r\n                (\r\n                    astUtils.isSpecificId(parent.callee, \"parseInt\") ||\r\n                    astUtils.isSpecificMemberAccess(parent.callee, \"Number\", \"parseInt\")\r\n                );\r\n        }\r\n\r\n        /**\r\n         * Returns whether the given node is a direct child of a JSX node.\r\n         * In particular, it aims to detect numbers used as prop values in JSX tags.\r\n         * Example: <input maxLength={10} />\r\n         * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n         * @returns {boolean} true if the node is a JSX number\r\n         */\r\n        function isJSXNumber(fullNumberNode) {\r\n            return fullNumberNode.parent.type.indexOf(\"JSX\") === 0;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the given node is used as an array index.\r\n         * Value must coerce to a valid array index name: \"0\", \"1\", \"2\" ... \"4294967294\".\r\n         *\r\n         * All other values, like \"-1\", \"2.5\", or \"4294967295\", are just \"normal\" object properties,\r\n         * which can be created and accessed on an array in addition to the array index properties,\r\n         * but they don't affect array's length and are not considered by methods such as .map(), .forEach() etc.\r\n         *\r\n         * The maximum array length by the specification is 2 ** 32 - 1 = 4294967295,\r\n         * thus the maximum valid index is 2 ** 32 - 2 = 4294967294.\r\n         *\r\n         * All notations are allowed, as long as the value coerces to one of \"0\", \"1\", \"2\" ... \"4294967294\".\r\n         *\r\n         * Valid examples:\r\n         * a[0], a[1], a[1.2e1], a[0xAB], a[0n], a[1n]\r\n         * a[-0] (same as a[0] because -0 coerces to \"0\")\r\n         * a[-0n] (-0n evaluates to 0n)\r\n         *\r\n         * Invalid examples:\r\n         * a[-1], a[-0xAB], a[-1n], a[2.5], a[1.23e1], a[12e-1]\r\n         * a[4294967295] (above the max index, it's an access to a regular property a[\"4294967295\"])\r\n         * a[999999999999999999999] (even if it wasn't above the max index, it would be a[\"1e+21\"])\r\n         * a[1e310] (same as a[\"Infinity\"])\r\n         * @param {ASTNode} fullNumberNode `Literal` or `UnaryExpression` full number node\r\n         * @param {bigint|number} value Value expressed by the fullNumberNode\r\n         * @returns {boolean} true if the node is a valid array index\r\n         */\r\n        function isArrayIndex(fullNumberNode, value) {\r\n            const parent = fullNumberNode.parent;\r\n\r\n            return parent.type === \"MemberExpression\" && parent.property === fullNumberNode &&\r\n                (Number.isInteger(value) || typeof value === \"bigint\") &&\r\n                value >= 0 && value < MAX_ARRAY_LENGTH;\r\n        }\r\n\r\n        return {\r\n            Literal(node) {\r\n                if (!astUtils.isNumericLiteral(node)) {\r\n                    return;\r\n                }\r\n\r\n                let fullNumberNode;\r\n                let value;\r\n                let raw;\r\n\r\n                // Treat unary minus as a part of the number\r\n                if (node.parent.type === \"UnaryExpression\" && node.parent.operator === \"-\") {\r\n                    fullNumberNode = node.parent;\r\n                    value = -node.value;\r\n                    raw = `-${node.raw}`;\r\n                } else {\r\n                    fullNumberNode = node;\r\n                    value = node.value;\r\n                    raw = node.raw;\r\n                }\r\n\r\n                const parent = fullNumberNode.parent;\r\n\r\n                // Always allow radix arguments and JSX props\r\n                if (\r\n                    isIgnoredValue(value) ||\r\n                    (ignoreDefaultValues && isDefaultValue(fullNumberNode)) ||\r\n                    isParseIntRadix(fullNumberNode) ||\r\n                    isJSXNumber(fullNumberNode) ||\r\n                    (ignoreArrayIndexes && isArrayIndex(fullNumberNode, value))\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                if (parent.type === \"VariableDeclarator\") {\r\n                    if (enforceConst && parent.parent.kind !== \"const\") {\r\n                        context.report({\r\n                            node: fullNumberNode,\r\n                            messageId: \"useConst\"\r\n                        });\r\n                    }\r\n                } else if (\r\n                    okTypes.indexOf(parent.type) === -1 ||\r\n                    (parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\")\r\n                ) {\r\n                    context.report({\r\n                        node: fullNumberNode,\r\n                        messageId: \"noMagic\",\r\n                        data: {\r\n                            raw\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}