{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\r\n * @author Ian Christian Myers\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning `function` declarations\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-func-assign\"\n    },\n    schema: [],\n    messages: {\n      isAFunction: \"'{{name}}' is a function.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Reports a reference if is non initializer and writable.\r\n     * @param {References} references Collection of reference to check.\r\n     * @returns {void}\r\n     */\n    function checkReference(references) {\n      astUtils.getModifyingReferences(references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"isAFunction\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n    /**\r\n     * Finds and reports references that are non initializer and writable.\r\n     * @param {Variable} variable A variable to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkVariable(variable) {\n      if (variable.defs[0].type === \"FunctionName\") {\n        checkReference(variable.references);\n      }\n    }\n    /**\r\n     * Checks parameters of a given function node.\r\n     * @param {ASTNode} node A function node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkForFunction(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n\n    return {\n      FunctionDeclaration: checkForFunction,\n      FunctionExpression: checkForFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-func-assign.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","isAFunction","create","context","checkReference","references","getModifyingReferences","forEach","reference","report","node","identifier","messageId","data","name","checkVariable","variable","defs","checkForFunction","getDeclaredVariables","FunctionDeclaration","FunctionExpression"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8CADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE;AADP;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAChChB,MAAAA,QAAQ,CAACiB,sBAAT,CAAgCD,UAAhC,EAA4CE,OAA5C,CAAoDC,SAAS,IAAI;AAC7DL,QAAAA,OAAO,CAACM,MAAR,CAAe;AACXC,UAAAA,IAAI,EAAEF,SAAS,CAACG,UADL;AAEXC,UAAAA,SAAS,EAAE,aAFA;AAGXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAEN,SAAS,CAACG,UAAV,CAAqBG;AADzB;AAHK,SAAf;AAOH,OARD;AASH;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,UAAIA,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBvB,IAAjB,KAA0B,cAA9B,EAA8C;AAC1CU,QAAAA,cAAc,CAACY,QAAQ,CAACX,UAAV,CAAd;AACH;AACJ;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASa,gBAAT,CAA0BR,IAA1B,EAAgC;AAC5BP,MAAAA,OAAO,CAACgB,oBAAR,CAA6BT,IAA7B,EAAmCH,OAAnC,CAA2CQ,aAA3C;AACH;;AAED,WAAO;AACHK,MAAAA,mBAAmB,EAAEF,gBADlB;AAEHG,MAAAA,kBAAkB,EAAEH;AAFjB,KAAP;AAIH;;AA5DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\r\n * @author Ian Christian Myers\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow reassigning `function` declarations\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-func-assign\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            isAFunction: \"'{{name}}' is a function.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Reports a reference if is non initializer and writable.\r\n         * @param {References} references Collection of reference to check.\r\n         * @returns {void}\r\n         */\r\n        function checkReference(references) {\r\n            astUtils.getModifyingReferences(references).forEach(reference => {\r\n                context.report({\r\n                    node: reference.identifier,\r\n                    messageId: \"isAFunction\",\r\n                    data: {\r\n                        name: reference.identifier.name\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Finds and reports references that are non initializer and writable.\r\n         * @param {Variable} variable A variable to check.\r\n         * @returns {void}\r\n         */\r\n        function checkVariable(variable) {\r\n            if (variable.defs[0].type === \"FunctionName\") {\r\n                checkReference(variable.references);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks parameters of a given function node.\r\n         * @param {ASTNode} node A function node to check.\r\n         * @returns {void}\r\n         */\r\n        function checkForFunction(node) {\r\n            context.getDeclaredVariables(node).forEach(checkVariable);\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: checkForFunction,\r\n            FunctionExpression: checkForFunction\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}