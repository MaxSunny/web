{"ast":null,"code":"/**\r\n * @fileoverview Rule to restrict what can be thrown as an exception.\r\n * @author Dieter Oberkofler\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow throwing literals as exceptions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-throw-literal\"\n    },\n    schema: [],\n    messages: {\n      object: \"Expected an error object to be thrown.\",\n      undef: \"Do not throw undefined.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ThrowStatement(node) {\n        if (!astUtils.couldBeError(node.argument)) {\n          context.report({\n            node,\n            messageId: \"object\"\n          });\n        } else if (node.argument.type === \"Identifier\") {\n          if (node.argument.name === \"undefined\") {\n            context.report({\n              node,\n              messageId: \"undef\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-throw-literal.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","object","undef","create","context","ThrowStatement","node","couldBeError","argument","report","messageId","name"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,0CADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,wCADF;AAENC,MAAAA,KAAK,EAAE;AAFD;AAXR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,YAAI,CAACjB,QAAQ,CAACkB,YAAT,CAAsBD,IAAI,CAACE,QAA3B,CAAL,EAA2C;AACvCJ,UAAAA,OAAO,CAACK,MAAR,CAAe;AAAEH,YAAAA,IAAF;AAAQI,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH,SAFD,MAEO,IAAIJ,IAAI,CAACE,QAAL,CAAcd,IAAd,KAAuB,YAA3B,EAAyC;AAC5C,cAAIY,IAAI,CAACE,QAAL,CAAcG,IAAd,KAAuB,WAA3B,EAAwC;AACpCP,YAAAA,OAAO,CAACK,MAAR,CAAe;AAAEH,cAAAA,IAAF;AAAQI,cAAAA,SAAS,EAAE;AAAnB,aAAf;AACH;AACJ;AAEJ;;AAXE,KAAP;AAeH;;AAnCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to restrict what can be thrown as an exception.\r\n * @author Dieter Oberkofler\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow throwing literals as exceptions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-throw-literal\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            object: \"Expected an error object to be thrown.\",\r\n            undef: \"Do not throw undefined.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n\r\n            ThrowStatement(node) {\r\n                if (!astUtils.couldBeError(node.argument)) {\r\n                    context.report({ node, messageId: \"object\" });\r\n                } else if (node.argument.type === \"Identifier\") {\r\n                    if (node.argument.name === \"undefined\") {\r\n                        context.report({ node, messageId: \"undef\" });\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}