{"ast":null,"code":"/**\r\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\r\n * @author Toru Nagashima\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks whether or not a node is a `.apply()` for variadic.\r\n * @param {ASTNode} node A CallExpression node to check.\r\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\r\n */\n\n\nfunction isVariadicApplyCalling(node) {\n  return astUtils.isSpecificMemberAccess(node.callee, null, \"apply\") && node.arguments.length === 2 && node.arguments[1].type !== \"ArrayExpression\" && node.arguments[1].type !== \"SpreadElement\";\n}\n/**\r\n * Checks whether or not `thisArg` is not changed by `.apply()`.\r\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\r\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\r\n * @param {RuleContext} context The ESLint rule context object.\r\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\r\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, context) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, context);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require spread operators instead of `.apply()`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-spread\"\n    },\n    schema: [],\n    fixable: null,\n    messages: {\n      preferSpread: \"Use the spread operator instead of '.apply()'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isVariadicApplyCalling(node)) {\n          return;\n        }\n\n        const applied = astUtils.skipChainExpression(astUtils.skipChainExpression(node.callee).object);\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            messageId: \"preferSpread\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-spread.js"],"names":["astUtils","require","isVariadicApplyCalling","node","isSpecificMemberAccess","callee","arguments","length","type","isValidThisArg","expectedThis","thisArg","context","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","recommended","url","schema","fixable","messages","preferSpread","create","sourceCode","getSourceCode","CallExpression","applied","skipChainExpression","object","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC,SACIH,QAAQ,CAACI,sBAAT,CAAgCD,IAAI,CAACE,MAArC,EAA6C,IAA7C,EAAmD,OAAnD,KACAF,IAAI,CAACG,SAAL,CAAeC,MAAf,KAA0B,CAD1B,IAEAJ,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBE,IAAlB,KAA2B,iBAF3B,IAGAL,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBE,IAAlB,KAA2B,eAJ/B;AAMH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwD;AACpD,MAAI,CAACF,YAAL,EAAmB;AACf,WAAOV,QAAQ,CAACa,iBAAT,CAA2BF,OAA3B,CAAP;AACH;;AACD,SAAOX,QAAQ,CAACc,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,OAA5C,CAAP;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFT,IAAAA,IAAI,EAAE,YADJ;AAGFU,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAUFC,IAAAA,OAAO,EAAE,IAVP;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACd,OAAD,EAAU;AACZ,UAAMe,UAAU,GAAGf,OAAO,CAACgB,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,cAAc,CAAC1B,IAAD,EAAO;AACjB,YAAI,CAACD,sBAAsB,CAACC,IAAD,CAA3B,EAAmC;AAC/B;AACH;;AAED,cAAM2B,OAAO,GAAG9B,QAAQ,CAAC+B,mBAAT,CAA6B/B,QAAQ,CAAC+B,mBAAT,CAA6B5B,IAAI,CAACE,MAAlC,EAA0C2B,MAAvE,CAAhB;AACA,cAAMtB,YAAY,GAAIoB,OAAO,CAACtB,IAAR,KAAiB,kBAAlB,GAAwCsB,OAAO,CAACE,MAAhD,GAAyD,IAA9E;AACA,cAAMrB,OAAO,GAAGR,IAAI,CAACG,SAAL,CAAe,CAAf,CAAhB;;AAEA,YAAIG,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBgB,UAAxB,CAAlB,EAAuD;AACnDf,UAAAA,OAAO,CAACqB,MAAR,CAAe;AACX9B,YAAAA,IADW;AAEX+B,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AAhBE,KAAP;AAkBH;;AAvCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks whether or not a node is a `.apply()` for variadic.\r\n * @param {ASTNode} node A CallExpression node to check.\r\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\r\n */\r\nfunction isVariadicApplyCalling(node) {\r\n    return (\r\n        astUtils.isSpecificMemberAccess(node.callee, null, \"apply\") &&\r\n        node.arguments.length === 2 &&\r\n        node.arguments[1].type !== \"ArrayExpression\" &&\r\n        node.arguments[1].type !== \"SpreadElement\"\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether or not `thisArg` is not changed by `.apply()`.\r\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\r\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\r\n * @param {RuleContext} context The ESLint rule context object.\r\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\r\n */\r\nfunction isValidThisArg(expectedThis, thisArg, context) {\r\n    if (!expectedThis) {\r\n        return astUtils.isNullOrUndefined(thisArg);\r\n    }\r\n    return astUtils.equalTokens(expectedThis, thisArg, context);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require spread operators instead of `.apply()`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-spread\"\r\n        },\r\n\r\n        schema: [],\r\n        fixable: null,\r\n\r\n        messages: {\r\n            preferSpread: \"Use the spread operator instead of '.apply()'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n            CallExpression(node) {\r\n                if (!isVariadicApplyCalling(node)) {\r\n                    return;\r\n                }\r\n\r\n                const applied = astUtils.skipChainExpression(astUtils.skipChainExpression(node.callee).object);\r\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\r\n                const thisArg = node.arguments[0];\r\n\r\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"preferSpread\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}