{"ast":null,"code":"/**\r\n * @fileoverview Rule to check use of chained assignment expressions\r\n * @author Stewart Rand\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow use of chained assignment expressions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-multi-assign\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        ignoreNonDeclaration: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedChain: \"Unexpected chained assignment.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n    const options = context.options[0] || {\n      ignoreNonDeclaration: false\n    };\n    const selectors = [\"VariableDeclarator > AssignmentExpression.init\", \"PropertyDefinition > AssignmentExpression.value\"];\n\n    if (!options.ignoreNonDeclaration) {\n      selectors.push(\"AssignmentExpression > AssignmentExpression.right\");\n    }\n\n    return {\n      [selectors](node) {\n        context.report({\n          node,\n          messageId: \"unexpectedChain\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-multi-assign.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","ignoreNonDeclaration","default","additionalProperties","messages","unexpectedChain","create","context","options","selectors","push","node","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAGA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CAAC;AACLL,MAAAA,IAAI,EAAE,QADD;AAELM,MAAAA,UAAU,EAAE;AACRC,QAAAA,oBAAoB,EAAE;AAClBP,UAAAA,IAAI,EAAE,SADY;AAElBQ,UAAAA,OAAO,EAAE;AAFS;AADd,OAFP;AAQLC,MAAAA,oBAAoB,EAAE;AARjB,KAAD,CATN;AAoBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AApBR,GADO;;AA0BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;AACA,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,KAAsB;AAClCP,MAAAA,oBAAoB,EAAE;AADY,KAAtC;AAGA,UAAMQ,SAAS,GAAG,CACd,gDADc,EAEd,iDAFc,CAAlB;;AAKA,QAAI,CAACD,OAAO,CAACP,oBAAb,EAAmC;AAC/BQ,MAAAA,SAAS,CAACC,IAAV,CAAe,mDAAf;AACH;;AAED,WAAO;AACH,OAACD,SAAD,EAAYE,IAAZ,EAAkB;AACdJ,QAAAA,OAAO,CAACK,MAAR,CAAe;AACXD,UAAAA,IADW;AAEXE,UAAAA,SAAS,EAAE;AAFA,SAAf;AAIH;;AANE,KAAP;AASH;;AApDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to check use of chained assignment expressions\r\n * @author Stewart Rand\r\n */\r\n\r\n\"use strict\";\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow use of chained assignment expressions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-multi-assign\"\r\n        },\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                ignoreNonDeclaration: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            unexpectedChain: \"Unexpected chained assignment.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n        const options = context.options[0] || {\r\n            ignoreNonDeclaration: false\r\n        };\r\n        const selectors = [\r\n            \"VariableDeclarator > AssignmentExpression.init\",\r\n            \"PropertyDefinition > AssignmentExpression.value\"\r\n        ];\r\n\r\n        if (!options.ignoreNonDeclaration) {\r\n            selectors.push(\"AssignmentExpression > AssignmentExpression.right\");\r\n        }\r\n\r\n        return {\r\n            [selectors](node) {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"unexpectedChain\"\r\n                });\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}