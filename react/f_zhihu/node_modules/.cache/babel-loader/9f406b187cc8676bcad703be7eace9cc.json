{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when using javascript: urls\r\n * @author Ilya Volodin\r\n */\n\n/* eslint no-script-url: 0 -- Code is checking to report such URLs */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `javascript:` urls\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-script-url\"\n    },\n    schema: [],\n    messages: {\n      unexpectedScriptURL: \"Script URL is a form of eval.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Check whether a node's static value starts with \"javascript:\" or not.\r\n     * And report an error for unexpected script URL.\r\n     * @param {ASTNode} node node to check\r\n     * @returns {void}\r\n     */\n    function check(node) {\n      const value = astUtils.getStaticStringValue(node);\n\n      if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\n        context.report({\n          node,\n          messageId: \"unexpectedScriptURL\"\n        });\n      }\n    }\n\n    return {\n      Literal(node) {\n        if (node.value && typeof node.value === \"string\") {\n          check(node);\n        }\n      },\n\n      TemplateLiteral(node) {\n        if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\n          check(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-script-url.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpectedScriptURL","create","context","check","node","value","getStaticStringValue","toLowerCase","indexOf","report","messageId","Literal","TemplateLiteral","parent"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6BADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,mBAAmB,EAAE;AADf;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACA;AACQ,aAASC,KAAT,CAAeC,IAAf,EAAqB;AACjB,YAAMC,KAAK,GAAGjB,QAAQ,CAACkB,oBAAT,CAA8BF,IAA9B,CAAd;;AAEA,UAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,MAA+C,CAAhF,EAAmF;AAC/EN,QAAAA,OAAO,CAACO,MAAR,CAAe;AAAEL,UAAAA,IAAF;AAAQM,UAAAA,SAAS,EAAE;AAAnB,SAAf;AACH;AACJ;;AACD,WAAO;AACHC,MAAAA,OAAO,CAACP,IAAD,EAAO;AACV,YAAIA,IAAI,CAACC,KAAL,IAAc,OAAOD,IAAI,CAACC,KAAZ,KAAsB,QAAxC,EAAkD;AAC9CF,UAAAA,KAAK,CAACC,IAAD,CAAL;AACH;AACJ,OALE;;AAMHQ,MAAAA,eAAe,CAACR,IAAD,EAAO;AAClB,YAAI,EAAEA,IAAI,CAACS,MAAL,IAAeT,IAAI,CAACS,MAAL,CAAYpB,IAAZ,KAAqB,0BAAtC,CAAJ,EAAuE;AACnEU,UAAAA,KAAK,CAACC,IAAD,CAAL;AACH;AACJ;;AAVE,KAAP;AAYH;;AA5CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when using javascript: urls\r\n * @author Ilya Volodin\r\n */\r\n/* eslint no-script-url: 0 -- Code is checking to report such URLs */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow `javascript:` urls\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-script-url\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedScriptURL: \"Script URL is a form of eval.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Check whether a node's static value starts with \"javascript:\" or not.\r\n         * And report an error for unexpected script URL.\r\n         * @param {ASTNode} node node to check\r\n         * @returns {void}\r\n         */\r\n        function check(node) {\r\n            const value = astUtils.getStaticStringValue(node);\r\n\r\n            if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\r\n                context.report({ node, messageId: \"unexpectedScriptURL\" });\r\n            }\r\n        }\r\n        return {\r\n            Literal(node) {\r\n                if (node.value && typeof node.value === \"string\") {\r\n                    check(node);\r\n                }\r\n            },\r\n            TemplateLiteral(node) {\r\n                if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\r\n                    check(node);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}