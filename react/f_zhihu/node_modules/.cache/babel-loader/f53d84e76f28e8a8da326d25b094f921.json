{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce the position of line comments\r\n * @author Alberto Rodríguez\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce position of line comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/line-comment-position\"\n    },\n    schema: [{\n      oneOf: [{\n        enum: [\"above\", \"beside\"]\n      }, {\n        type: \"object\",\n        properties: {\n          position: {\n            enum: [\"above\", \"beside\"]\n          },\n          ignorePattern: {\n            type: \"string\"\n          },\n          applyDefaultPatterns: {\n            type: \"boolean\"\n          },\n          applyDefaultIgnorePatterns: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      above: \"Expected comment to be above code.\",\n      beside: \"Expected comment to be beside code.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    let above,\n        ignorePattern,\n        applyDefaultIgnorePatterns = true;\n\n    if (!options || typeof options === \"string\") {\n      above = !options || options === \"above\";\n    } else {\n      above = !options.position || options.position === \"above\";\n      ignorePattern = options.ignorePattern;\n\n      if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\n        applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\n      } else {\n        applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\n      }\n    }\n\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const fallThroughRegExp = /^\\s*falls?\\s?through/u;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.filter(token => token.type === \"Line\").forEach(node => {\n          if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\n            return;\n          }\n\n          if (ignorePattern && customIgnoreRegExp.test(node.value)) {\n            return;\n          }\n\n          const previous = sourceCode.getTokenBefore(node, {\n            includeComments: true\n          });\n          const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\n\n          if (above) {\n            if (isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"above\"\n              });\n            }\n          } else {\n            if (!isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"beside\"\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/line-comment-position.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","enum","properties","position","ignorePattern","applyDefaultPatterns","applyDefaultIgnorePatterns","additionalProperties","messages","above","beside","create","context","options","Object","prototype","hasOwnProperty","call","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","fallThroughRegExp","customIgnoreRegExp","RegExp","sourceCode","getSourceCode","Program","comments","getAllComments","filter","token","forEach","node","test","value","previous","getTokenBefore","includeComments","isOnSameLine","loc","end","line","start","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mCADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIC,QAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,QAAV;AADV,OADG,EAIH;AACIP,QAAAA,IAAI,EAAE,QADV;AAEIQ,QAAAA,UAAU,EAAE;AACRC,UAAAA,QAAQ,EAAE;AACNF,YAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,QAAV;AADA,WADF;AAIRG,UAAAA,aAAa,EAAE;AACXV,YAAAA,IAAI,EAAE;AADK,WAJP;AAORW,UAAAA,oBAAoB,EAAE;AAClBX,YAAAA,IAAI,EAAE;AADY,WAPd;AAURY,UAAAA,0BAA0B,EAAE;AACxBZ,YAAAA,IAAI,EAAE;AADkB;AAVpB,SAFhB;AAgBIa,QAAAA,oBAAoB,EAAE;AAhB1B,OAJG;AADX,KADI,CATN;AAoCFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE,oCADD;AAENC,MAAAA,MAAM,EAAE;AAFF;AApCR,GADO;;AA2CbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,CAAhB;AAEA,QAAIJ,KAAJ;AAAA,QACIL,aADJ;AAAA,QAEIE,0BAA0B,GAAG,IAFjC;;AAIA,QAAI,CAACO,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AACzCJ,MAAAA,KAAK,GAAG,CAACI,OAAD,IAAYA,OAAO,KAAK,OAAhC;AAEH,KAHD,MAGO;AACHJ,MAAAA,KAAK,GAAG,CAACI,OAAO,CAACV,QAAT,IAAqBU,OAAO,CAACV,QAAR,KAAqB,OAAlD;AACAC,MAAAA,aAAa,GAAGS,OAAO,CAACT,aAAxB;;AAEA,UAAIU,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,OAArC,EAA8C,4BAA9C,CAAJ,EAAiF;AAC7EP,QAAAA,0BAA0B,GAAGO,OAAO,CAACP,0BAArC;AACH,OAFD,MAEO;AACHA,QAAAA,0BAA0B,GAAGO,OAAO,CAACR,oBAAR,KAAiC,KAA9D;AACH;AACJ;;AAED,UAAMa,mBAAmB,GAAG7B,QAAQ,CAAC8B,uBAArC;AACA,UAAMC,iBAAiB,GAAG,uBAA1B;AACA,UAAMC,kBAAkB,GAAG,IAAIC,MAAJ,CAAWlB,aAAX,EAA0B,GAA1B,CAA3B;AACA,UAAMmB,UAAU,GAAGX,OAAO,CAACY,aAAR,EAAnB,CAxBY,CA0BZ;AACA;AACA;;AAEA,WAAO;AACHC,MAAAA,OAAO,GAAG;AACN,cAAMC,QAAQ,GAAGH,UAAU,CAACI,cAAX,EAAjB;AAEAD,QAAAA,QAAQ,CAACE,MAAT,CAAgBC,KAAK,IAAIA,KAAK,CAACnC,IAAN,KAAe,MAAxC,EAAgDoC,OAAhD,CAAwDC,IAAI,IAAI;AAC5D,cAAIzB,0BAA0B,KAAKY,mBAAmB,CAACc,IAApB,CAAyBD,IAAI,CAACE,KAA9B,KAAwCb,iBAAiB,CAACY,IAAlB,CAAuBD,IAAI,CAACE,KAA5B,CAA7C,CAA9B,EAAgH;AAC5G;AACH;;AAED,cAAI7B,aAAa,IAAIiB,kBAAkB,CAACW,IAAnB,CAAwBD,IAAI,CAACE,KAA7B,CAArB,EAA0D;AACtD;AACH;;AAED,gBAAMC,QAAQ,GAAGX,UAAU,CAACY,cAAX,CAA0BJ,IAA1B,EAAgC;AAAEK,YAAAA,eAAe,EAAE;AAAnB,WAAhC,CAAjB;AACA,gBAAMC,YAAY,GAAGH,QAAQ,IAAIA,QAAQ,CAACI,GAAT,CAAaC,GAAb,CAAiBC,IAAjB,KAA0BT,IAAI,CAACO,GAAL,CAASG,KAAT,CAAeD,IAA1E;;AAEA,cAAI/B,KAAJ,EAAW;AACP,gBAAI4B,YAAJ,EAAkB;AACdzB,cAAAA,OAAO,CAAC8B,MAAR,CAAe;AACXX,gBAAAA,IADW;AAEXY,gBAAAA,SAAS,EAAE;AAFA,eAAf;AAIH;AACJ,WAPD,MAOO;AACH,gBAAI,CAACN,YAAL,EAAmB;AACfzB,cAAAA,OAAO,CAAC8B,MAAR,CAAe;AACXX,gBAAAA,IADW;AAEXY,gBAAAA,SAAS,EAAE;AAFA,eAAf;AAIH;AACJ;AACJ,SA3BD;AA4BH;;AAhCE,KAAP;AAkCH;;AA3GY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to enforce the position of line comments\r\n * @author Alberto Rodríguez\r\n */\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce position of line comments\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/line-comment-position\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                oneOf: [\r\n                    {\r\n                        enum: [\"above\", \"beside\"]\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            position: {\r\n                                enum: [\"above\", \"beside\"]\r\n                            },\r\n                            ignorePattern: {\r\n                                type: \"string\"\r\n                            },\r\n                            applyDefaultPatterns: {\r\n                                type: \"boolean\"\r\n                            },\r\n                            applyDefaultIgnorePatterns: {\r\n                                type: \"boolean\"\r\n                            }\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        messages: {\r\n            above: \"Expected comment to be above code.\",\r\n            beside: \"Expected comment to be beside code.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0];\r\n\r\n        let above,\r\n            ignorePattern,\r\n            applyDefaultIgnorePatterns = true;\r\n\r\n        if (!options || typeof options === \"string\") {\r\n            above = !options || options === \"above\";\r\n\r\n        } else {\r\n            above = !options.position || options.position === \"above\";\r\n            ignorePattern = options.ignorePattern;\r\n\r\n            if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\r\n                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\r\n            } else {\r\n                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\r\n            }\r\n        }\r\n\r\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\r\n        const fallThroughRegExp = /^\\s*falls?\\s?through/u;\r\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            Program() {\r\n                const comments = sourceCode.getAllComments();\r\n\r\n                comments.filter(token => token.type === \"Line\").forEach(node => {\r\n                    if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\r\n                        return;\r\n                    }\r\n\r\n                    if (ignorePattern && customIgnoreRegExp.test(node.value)) {\r\n                        return;\r\n                    }\r\n\r\n                    const previous = sourceCode.getTokenBefore(node, { includeComments: true });\r\n                    const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\r\n\r\n                    if (above) {\r\n                        if (isOnSameLine) {\r\n                            context.report({\r\n                                node,\r\n                                messageId: \"above\"\r\n                            });\r\n                        }\r\n                    } else {\r\n                        if (!isOnSameLine) {\r\n                            context.report({\r\n                                node,\r\n                                messageId: \"beside\"\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}