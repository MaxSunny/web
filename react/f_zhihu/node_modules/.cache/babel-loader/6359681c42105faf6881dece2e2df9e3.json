{"ast":null,"code":"/**\r\n * @fileoverview Disallows or enforces spaces inside computed properties.\r\n * @author Jamund Ferguson\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside computed property brackets\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/computed-property-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        enforceForClassMembers: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n\n    const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Reports that there shouldn't be a space after the first token\r\n     * @param {ASTNode} node The node to report in the event of an error.\r\n     * @param {Token} token The token to use for the report.\r\n     * @param {Token} tokenAfter The token after `token`.\r\n     * @returns {void}\r\n     */\n\n    function reportNoBeginningSpace(node, token, tokenAfter) {\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: tokenAfter.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n        }\n\n      });\n    }\n    /**\r\n     * Reports that there shouldn't be a space before the last token\r\n     * @param {ASTNode} node The node to report in the event of an error.\r\n     * @param {Token} token The token to use for the report.\r\n     * @param {Token} tokenBefore The token before `token`.\r\n     * @returns {void}\r\n     */\n\n\n    function reportNoEndingSpace(node, token, tokenBefore) {\n      context.report({\n        node,\n        loc: {\n          start: tokenBefore.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\r\n     * Reports that there should be a space after the first token\r\n     * @param {ASTNode} node The node to report in the event of an error.\r\n     * @param {Token} token The token to use for the report.\r\n     * @returns {void}\r\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\r\n     * Reports that there should be a space before the last token\r\n     * @param {ASTNode} node The node to report in the event of an error.\r\n     * @param {Token} token The token to use for the report.\r\n     * @returns {void}\r\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\r\n     * Returns a function that checks the spacing of a node on the property name\r\n     * that was passed in.\r\n     * @param {string} propertyName The property on the node to check for spacing\r\n     * @returns {Function} A function that will check spacing on a node\r\n     */\n\n\n    function checkSpacing(propertyName) {\n      return function (node) {\n        if (!node.computed) {\n          return;\n        }\n\n        const property = node[propertyName];\n        const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n              first = sourceCode.getTokenAfter(before, {\n          includeComments: true\n        }),\n              after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n              last = sourceCode.getTokenBefore(after, {\n          includeComments: true\n        });\n\n        if (astUtils.isTokenOnSameLine(before, first)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n              reportRequiredBeginningSpace(node, before);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(before, first)) {\n              reportNoBeginningSpace(node, before, first);\n            }\n          }\n        }\n\n        if (astUtils.isTokenOnSameLine(last, after)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n              reportRequiredEndingSpace(node, after);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(last, after)) {\n              reportNoEndingSpace(node, after, last);\n            }\n          }\n        }\n      };\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    const listeners = {\n      Property: checkSpacing(\"key\"),\n      MemberExpression: checkSpacing(\"property\")\n    };\n\n    if (enforceForClassMembers) {\n      listeners.MethodDefinition = listeners.PropertyDefinition = listeners.Property;\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/computed-property-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","properties","enforceForClassMembers","default","additionalProperties","messages","unexpectedSpaceBefore","unexpectedSpaceAfter","missingSpaceBefore","missingSpaceAfter","create","context","sourceCode","getSourceCode","propertyNameMustBeSpaced","options","reportNoBeginningSpace","node","token","tokenAfter","report","loc","start","end","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","tokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","checkSpacing","propertyName","computed","property","before","getTokenBefore","isOpeningBracketToken","first","getTokenAfter","includeComments","after","isClosingBracketToken","last","isTokenOnSameLine","isSpaceBetweenTokens","listeners","Property","MemberExpression","MethodDefinition","PropertyDefinition"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Disallows or enforces spaces inside computed properties.\r\n * @author Jamund Ferguson\r\n */\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce consistent spacing inside computed property brackets\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/computed-property-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"always\", \"never\"]\r\n            },\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    enforceForClassMembers: {\r\n                        type: \"boolean\",\r\n                        default: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\r\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\r\n\r\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\r\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\r\n        const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Reports that there shouldn't be a space after the first token\r\n         * @param {ASTNode} node The node to report in the event of an error.\r\n         * @param {Token} token The token to use for the report.\r\n         * @param {Token} tokenAfter The token after `token`.\r\n         * @returns {void}\r\n         */\r\n        function reportNoBeginningSpace(node, token, tokenAfter) {\r\n            context.report({\r\n                node,\r\n                loc: { start: token.loc.end, end: tokenAfter.loc.start },\r\n                messageId: \"unexpectedSpaceAfter\",\r\n                data: {\r\n                    tokenValue: token.value\r\n                },\r\n                fix(fixer) {\r\n                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Reports that there shouldn't be a space before the last token\r\n         * @param {ASTNode} node The node to report in the event of an error.\r\n         * @param {Token} token The token to use for the report.\r\n         * @param {Token} tokenBefore The token before `token`.\r\n         * @returns {void}\r\n         */\r\n        function reportNoEndingSpace(node, token, tokenBefore) {\r\n            context.report({\r\n                node,\r\n                loc: { start: tokenBefore.loc.end, end: token.loc.start },\r\n                messageId: \"unexpectedSpaceBefore\",\r\n                data: {\r\n                    tokenValue: token.value\r\n                },\r\n                fix(fixer) {\r\n                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Reports that there should be a space after the first token\r\n         * @param {ASTNode} node The node to report in the event of an error.\r\n         * @param {Token} token The token to use for the report.\r\n         * @returns {void}\r\n         */\r\n        function reportRequiredBeginningSpace(node, token) {\r\n            context.report({\r\n                node,\r\n                loc: token.loc,\r\n                messageId: \"missingSpaceAfter\",\r\n                data: {\r\n                    tokenValue: token.value\r\n                },\r\n                fix(fixer) {\r\n                    return fixer.insertTextAfter(token, \" \");\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Reports that there should be a space before the last token\r\n         * @param {ASTNode} node The node to report in the event of an error.\r\n         * @param {Token} token The token to use for the report.\r\n         * @returns {void}\r\n         */\r\n        function reportRequiredEndingSpace(node, token) {\r\n            context.report({\r\n                node,\r\n                loc: token.loc,\r\n                messageId: \"missingSpaceBefore\",\r\n                data: {\r\n                    tokenValue: token.value\r\n                },\r\n                fix(fixer) {\r\n                    return fixer.insertTextBefore(token, \" \");\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Returns a function that checks the spacing of a node on the property name\r\n         * that was passed in.\r\n         * @param {string} propertyName The property on the node to check for spacing\r\n         * @returns {Function} A function that will check spacing on a node\r\n         */\r\n        function checkSpacing(propertyName) {\r\n            return function(node) {\r\n                if (!node.computed) {\r\n                    return;\r\n                }\r\n\r\n                const property = node[propertyName];\r\n\r\n                const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\r\n                    first = sourceCode.getTokenAfter(before, { includeComments: true }),\r\n                    after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\r\n                    last = sourceCode.getTokenBefore(after, { includeComments: true });\r\n\r\n                if (astUtils.isTokenOnSameLine(before, first)) {\r\n                    if (propertyNameMustBeSpaced) {\r\n                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\r\n                            reportRequiredBeginningSpace(node, before);\r\n                        }\r\n                    } else {\r\n                        if (sourceCode.isSpaceBetweenTokens(before, first)) {\r\n                            reportNoBeginningSpace(node, before, first);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (astUtils.isTokenOnSameLine(last, after)) {\r\n                    if (propertyNameMustBeSpaced) {\r\n                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\r\n                            reportRequiredEndingSpace(node, after);\r\n                        }\r\n                    } else {\r\n                        if (sourceCode.isSpaceBetweenTokens(last, after)) {\r\n                            reportNoEndingSpace(node, after, last);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        const listeners = {\r\n            Property: checkSpacing(\"key\"),\r\n            MemberExpression: checkSpacing(\"property\")\r\n        };\r\n\r\n        if (enforceForClassMembers) {\r\n            listeners.MethodDefinition =\r\n                listeners.PropertyDefinition = listeners.Property;\r\n        }\r\n\r\n        return listeners;\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}