{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\r\n * @author Milos Djermanovic\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n/**\r\n * Returns unicode escape sequence that represents the given character.\r\n * @param {string} character A single code unit.\r\n * @returns {string} \"\\uXXXX\" sequence.\r\n */\n\nfunction getUnicodeEscape(character) {\n  return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\"\n    },\n    hasSuggestions: true,\n    schema: [],\n    messages: {\n      decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n      // suggestions\n      refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n      escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Creates a new Suggestion object.\r\n     * @param {string} messageId \"refactor\" or \"escapeBackslash\".\r\n     * @param {int[]} range The range to replace.\r\n     * @param {string} replacement New text for the range.\r\n     * @returns {Object} Suggestion\r\n     */\n\n    function createSuggestion(messageId, range, replacement) {\n      return {\n        messageId,\n        data: {\n          original: sourceCode.getText().slice(...range),\n          replacement\n        },\n\n        fix(fixer) {\n          return fixer.replaceTextRange(range, replacement);\n        }\n\n      };\n    }\n\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        }\n\n        if (!QUICK_TEST_REGEX.test(node.raw)) {\n          return;\n        }\n\n        const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n        let match;\n\n        while (match = regex.exec(node.raw)) {\n          const {\n            previousEscape,\n            decimalEscape\n          } = match.groups;\n          const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n          const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n          const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n          const suggest = []; // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n\n          if (previousEscape === \"\\\\0\") {\n            /*\r\n             * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\r\n             * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\r\n             * an octal escape while fixing a decimal escape, we provide different suggestions.\r\n             */\n            suggest.push(createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\n            \"refactor\", [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd], `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`), createSuggestion( // \"\\8\" -> \"\\u0038\"\n            \"refactor\", decimalEscapeRange, getUnicodeEscape(decimalEscape[1])));\n          } else {\n            suggest.push(createSuggestion( // \"\\8\" -> \"8\"\n            \"refactor\", decimalEscapeRange, decimalEscape[1]));\n          }\n\n          suggest.push(createSuggestion( // \"\\8\" -> \"\\\\8\"\n          \"escapeBackslash\", decimalEscapeRange, `\\\\${decimalEscape}`));\n          context.report({\n            node,\n            loc: {\n              start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n              end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n            },\n            messageId: \"decimalEscape\",\n            data: {\n              decimalEscape\n            },\n            suggest\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-nonoctal-decimal-escape.js"],"names":["QUICK_TEST_REGEX","getUnicodeEscape","character","charCodeAt","toString","padStart","module","exports","meta","type","docs","description","recommended","url","hasSuggestions","schema","messages","decimalEscape","refactor","escapeBackslash","create","context","sourceCode","getSourceCode","createSuggestion","messageId","range","replacement","data","original","getText","slice","fix","fixer","replaceTextRange","Literal","node","value","test","raw","regex","match","exec","previousEscape","groups","decimalEscapeRangeEnd","index","length","decimalEscapeRangeStart","decimalEscapeRange","suggest","push","report","loc","start","getLocFromIndex","end"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\r\n * @author Milos Djermanovic\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\r\n\r\n/**\r\n * Returns unicode escape sequence that represents the given character.\r\n * @param {string} character A single code unit.\r\n * @returns {string} \"\\uXXXX\" sequence.\r\n */\r\nfunction getUnicodeEscape(character) {\r\n    return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\"\r\n        },\r\n\r\n        hasSuggestions: true,\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\r\n\r\n            // suggestions\r\n            refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\r\n            escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Creates a new Suggestion object.\r\n         * @param {string} messageId \"refactor\" or \"escapeBackslash\".\r\n         * @param {int[]} range The range to replace.\r\n         * @param {string} replacement New text for the range.\r\n         * @returns {Object} Suggestion\r\n         */\r\n        function createSuggestion(messageId, range, replacement) {\r\n            return {\r\n                messageId,\r\n                data: {\r\n                    original: sourceCode.getText().slice(...range),\r\n                    replacement\r\n                },\r\n                fix(fixer) {\r\n                    return fixer.replaceTextRange(range, replacement);\r\n                }\r\n            };\r\n        }\r\n\r\n        return {\r\n            Literal(node) {\r\n                if (typeof node.value !== \"string\") {\r\n                    return;\r\n                }\r\n\r\n                if (!QUICK_TEST_REGEX.test(node.raw)) {\r\n                    return;\r\n                }\r\n\r\n                const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\r\n                let match;\r\n\r\n                while ((match = regex.exec(node.raw))) {\r\n                    const { previousEscape, decimalEscape } = match.groups;\r\n                    const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\r\n                    const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\r\n                    const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\r\n                    const suggest = [];\r\n\r\n                    // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\r\n                    if (previousEscape === \"\\\\0\") {\r\n\r\n                        /*\r\n                         * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\r\n                         * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\r\n                         * an octal escape while fixing a decimal escape, we provide different suggestions.\r\n                         */\r\n                        suggest.push(\r\n                            createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\r\n                                \"refactor\",\r\n                                [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd],\r\n                                `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`\r\n                            ),\r\n                            createSuggestion( // \"\\8\" -> \"\\u0038\"\r\n                                \"refactor\",\r\n                                decimalEscapeRange,\r\n                                getUnicodeEscape(decimalEscape[1])\r\n                            )\r\n                        );\r\n                    } else {\r\n                        suggest.push(\r\n                            createSuggestion( // \"\\8\" -> \"8\"\r\n                                \"refactor\",\r\n                                decimalEscapeRange,\r\n                                decimalEscape[1]\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    suggest.push(\r\n                        createSuggestion( // \"\\8\" -> \"\\\\8\"\r\n                            \"escapeBackslash\",\r\n                            decimalEscapeRange,\r\n                            `\\\\${decimalEscape}`\r\n                        )\r\n                    );\r\n\r\n                    context.report({\r\n                        node,\r\n                        loc: {\r\n                            start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\r\n                            end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\r\n                        },\r\n                        messageId: \"decimalEscape\",\r\n                        data: {\r\n                            decimalEscape\r\n                        },\r\n                        suggest\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}