{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow empty functions.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst ALLOW_OPTIONS = Object.freeze([\"functions\", \"arrowFunctions\", \"generatorFunctions\", \"methods\", \"generatorMethods\", \"getters\", \"setters\", \"constructors\", \"asyncFunctions\", \"asyncMethods\"]);\n/**\r\n * Gets the kind of a given function node.\r\n * @param {ASTNode} node A function node to get. This is one of\r\n *      an ArrowFunctionExpression, a FunctionDeclaration, or a\r\n *      FunctionExpression.\r\n * @returns {string} The kind of the function. This is one of \"functions\",\r\n *      \"arrowFunctions\", \"generatorFunctions\", \"asyncFunctions\", \"methods\",\r\n *      \"generatorMethods\", \"asyncMethods\", \"getters\", \"setters\", and\r\n *      \"constructors\".\r\n */\n\nfunction getKind(node) {\n  const parent = node.parent;\n  let kind = \"\";\n\n  if (node.type === \"ArrowFunctionExpression\") {\n    return \"arrowFunctions\";\n  } // Detects main kind.\n\n\n  if (parent.type === \"Property\") {\n    if (parent.kind === \"get\") {\n      return \"getters\";\n    }\n\n    if (parent.kind === \"set\") {\n      return \"setters\";\n    }\n\n    kind = parent.method ? \"methods\" : \"functions\";\n  } else if (parent.type === \"MethodDefinition\") {\n    if (parent.kind === \"get\") {\n      return \"getters\";\n    }\n\n    if (parent.kind === \"set\") {\n      return \"setters\";\n    }\n\n    if (parent.kind === \"constructor\") {\n      return \"constructors\";\n    }\n\n    kind = \"methods\";\n  } else {\n    kind = \"functions\";\n  } // Detects prefix.\n\n\n  let prefix = \"\";\n\n  if (node.generator) {\n    prefix = \"generator\";\n  } else if (node.async) {\n    prefix = \"async\";\n  } else {\n    return kind;\n  }\n\n  return prefix + kind[0].toUpperCase() + kind.slice(1);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow empty functions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-empty-function\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            enum: ALLOW_OPTIONS\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected empty {{name}}.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Reports a given function node if the node matches the following patterns.\r\n     *\r\n     * - Not allowed by options.\r\n     * - The body is empty.\r\n     * - The body doesn't have any comments.\r\n     * @param {ASTNode} node A function node to report. This is one of\r\n     *      an ArrowFunctionExpression, a FunctionDeclaration, or a\r\n     *      FunctionExpression.\r\n     * @returns {void}\r\n     */\n\n    function reportIfEmpty(node) {\n      const kind = getKind(node);\n      const name = astUtils.getFunctionNameWithKind(node);\n      const innerComments = sourceCode.getTokens(node.body, {\n        includeComments: true,\n        filter: astUtils.isCommentToken\n      });\n\n      if (allowed.indexOf(kind) === -1 && node.body.type === \"BlockStatement\" && node.body.body.length === 0 && innerComments.length === 0) {\n        context.report({\n          node,\n          loc: node.body.loc,\n          messageId: \"unexpected\",\n          data: {\n            name\n          }\n        });\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: reportIfEmpty,\n      FunctionDeclaration: reportIfEmpty,\n      FunctionExpression: reportIfEmpty\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-empty-function.js"],"names":["astUtils","require","ALLOW_OPTIONS","Object","freeze","getKind","node","parent","kind","type","method","prefix","generator","async","toUpperCase","slice","module","exports","meta","docs","description","recommended","url","schema","properties","allow","items","enum","uniqueItems","additionalProperties","messages","unexpected","create","context","options","allowed","sourceCode","getSourceCode","reportIfEmpty","name","getFunctionNameWithKind","innerComments","getTokens","body","includeComments","filter","isCommentToken","indexOf","length","report","loc","messageId","data","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow empty functions.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst ALLOW_OPTIONS = Object.freeze([\r\n    \"functions\",\r\n    \"arrowFunctions\",\r\n    \"generatorFunctions\",\r\n    \"methods\",\r\n    \"generatorMethods\",\r\n    \"getters\",\r\n    \"setters\",\r\n    \"constructors\",\r\n    \"asyncFunctions\",\r\n    \"asyncMethods\"\r\n]);\r\n\r\n/**\r\n * Gets the kind of a given function node.\r\n * @param {ASTNode} node A function node to get. This is one of\r\n *      an ArrowFunctionExpression, a FunctionDeclaration, or a\r\n *      FunctionExpression.\r\n * @returns {string} The kind of the function. This is one of \"functions\",\r\n *      \"arrowFunctions\", \"generatorFunctions\", \"asyncFunctions\", \"methods\",\r\n *      \"generatorMethods\", \"asyncMethods\", \"getters\", \"setters\", and\r\n *      \"constructors\".\r\n */\r\nfunction getKind(node) {\r\n    const parent = node.parent;\r\n    let kind = \"\";\r\n\r\n    if (node.type === \"ArrowFunctionExpression\") {\r\n        return \"arrowFunctions\";\r\n    }\r\n\r\n    // Detects main kind.\r\n    if (parent.type === \"Property\") {\r\n        if (parent.kind === \"get\") {\r\n            return \"getters\";\r\n        }\r\n        if (parent.kind === \"set\") {\r\n            return \"setters\";\r\n        }\r\n        kind = parent.method ? \"methods\" : \"functions\";\r\n\r\n    } else if (parent.type === \"MethodDefinition\") {\r\n        if (parent.kind === \"get\") {\r\n            return \"getters\";\r\n        }\r\n        if (parent.kind === \"set\") {\r\n            return \"setters\";\r\n        }\r\n        if (parent.kind === \"constructor\") {\r\n            return \"constructors\";\r\n        }\r\n        kind = \"methods\";\r\n\r\n    } else {\r\n        kind = \"functions\";\r\n    }\r\n\r\n    // Detects prefix.\r\n    let prefix = \"\";\r\n\r\n    if (node.generator) {\r\n        prefix = \"generator\";\r\n    } else if (node.async) {\r\n        prefix = \"async\";\r\n    } else {\r\n        return kind;\r\n    }\r\n    return prefix + kind[0].toUpperCase() + kind.slice(1);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow empty functions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-empty-function\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allow: {\r\n                        type: \"array\",\r\n                        items: { enum: ALLOW_OPTIONS },\r\n                        uniqueItems: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpected: \"Unexpected empty {{name}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0] || {};\r\n        const allowed = options.allow || [];\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Reports a given function node if the node matches the following patterns.\r\n         *\r\n         * - Not allowed by options.\r\n         * - The body is empty.\r\n         * - The body doesn't have any comments.\r\n         * @param {ASTNode} node A function node to report. This is one of\r\n         *      an ArrowFunctionExpression, a FunctionDeclaration, or a\r\n         *      FunctionExpression.\r\n         * @returns {void}\r\n         */\r\n        function reportIfEmpty(node) {\r\n            const kind = getKind(node);\r\n            const name = astUtils.getFunctionNameWithKind(node);\r\n            const innerComments = sourceCode.getTokens(node.body, {\r\n                includeComments: true,\r\n                filter: astUtils.isCommentToken\r\n            });\r\n\r\n            if (allowed.indexOf(kind) === -1 &&\r\n                node.body.type === \"BlockStatement\" &&\r\n                node.body.body.length === 0 &&\r\n                innerComments.length === 0\r\n            ) {\r\n                context.report({\r\n                    node,\r\n                    loc: node.body.loc,\r\n                    messageId: \"unexpected\",\r\n                    data: { name }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            ArrowFunctionExpression: reportIfEmpty,\r\n            FunctionDeclaration: reportIfEmpty,\r\n            FunctionExpression: reportIfEmpty\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}