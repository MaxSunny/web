{"ast":null,"code":"/**\r\n * @fileoverview Flat Config Array\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst {\n  ConfigArray,\n  ConfigArraySymbol\n} = require(\"@humanwhocodes/config-array\");\n\nconst {\n  flatConfigSchema\n} = require(\"./flat-config-schema\");\n\nconst {\n  RuleValidator\n} = require(\"./rule-validator\");\n\nconst {\n  defaultConfig\n} = require(\"./default-config\");\n\nconst recommendedConfig = require(\"../../conf/eslint-recommended\"); //-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n\nconst ruleValidator = new RuleValidator();\n/**\r\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\r\n * @param {string} identifier The identifier to parse.\r\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\r\n *      name.\r\n */\n\nfunction splitPluginIdentifier(identifier) {\n  const parts = identifier.split(\"/\");\n  return {\n    objectName: parts.pop(),\n    pluginName: parts.join(\"/\")\n  };\n} //-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\r\n * Represents an array containing configuration information for ESLint.\r\n */\n\n\nclass FlatConfigArray extends ConfigArray {\n  /**\r\n   * Creates a new instance.\r\n   * @param {*[]} configs An array of configuration information.\r\n   * @param {{basePath: string, baseConfig: FlatConfig}} options The options\r\n   *      to use for the config array instance.\r\n   */\n  constructor(configs) {\n    let {\n      basePath,\n      baseConfig = defaultConfig\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(configs, {\n      basePath,\n      schema: flatConfigSchema\n    });\n\n    if (baseConfig[Symbol.iterator]) {\n      this.unshift(...baseConfig);\n    } else {\n      this.unshift(baseConfig);\n    }\n  }\n  /* eslint-disable class-methods-use-this -- Desired as instance method */\n\n  /**\r\n   * Replaces a config with another config to allow us to put strings\r\n   * in the config array that will be replaced by objects before\r\n   * normalization.\r\n   * @param {Object} config The config to preprocess.\r\n   * @returns {Object} The preprocessed config.\r\n   */\n\n\n  [ConfigArraySymbol.preprocessConfig](config) {\n    if (config === \"eslint:recommended\") {\n      return recommendedConfig;\n    }\n\n    if (config === \"eslint:all\") {\n      /*\r\n       * Load `eslint-all.js` here instead of at the top level to avoid loading all rule modules\r\n       * when it isn't necessary. `eslint-all.js` reads `meta` of rule objects to filter out deprecated ones,\r\n       * so requiring `eslint-all.js` module loads all rule modules as a consequence.\r\n       */\n      return require(\"../../conf/eslint-all\");\n    }\n\n    return config;\n  }\n  /**\r\n   * Finalizes the config by replacing plugin references with their objects\r\n   * and validating rule option schemas.\r\n   * @param {Object} config The config to finalize.\r\n   * @returns {Object} The finalized config.\r\n   * @throws {TypeError} If the config is invalid.\r\n   */\n\n\n  [ConfigArraySymbol.finalizeConfig](config) {\n    const {\n      plugins,\n      languageOptions,\n      processor\n    } = config; // Check parser value\n\n    if (languageOptions && languageOptions.parser && typeof languageOptions.parser === \"string\") {\n      const {\n        pluginName,\n        objectName: parserName\n      } = splitPluginIdentifier(languageOptions.parser);\n\n      if (!plugins || !plugins[pluginName] || !plugins[pluginName].parsers || !plugins[pluginName].parsers[parserName]) {\n        throw new TypeError(`Key \"parser\": Could not find \"${parserName}\" in plugin \"${pluginName}\".`);\n      }\n\n      languageOptions.parser = plugins[pluginName].parsers[parserName];\n    } // Check processor value\n\n\n    if (processor && typeof processor === \"string\") {\n      const {\n        pluginName,\n        objectName: processorName\n      } = splitPluginIdentifier(processor);\n\n      if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[processorName]) {\n        throw new TypeError(`Key \"processor\": Could not find \"${processorName}\" in plugin \"${pluginName}\".`);\n      }\n\n      config.processor = plugins[pluginName].processors[processorName];\n    }\n\n    ruleValidator.validate(config);\n    return config;\n  }\n  /* eslint-enable class-methods-use-this -- Desired as instance method */\n\n\n}\n\nexports.FlatConfigArray = FlatConfigArray;","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/config/flat-config-array.js"],"names":["ConfigArray","ConfigArraySymbol","require","flatConfigSchema","RuleValidator","defaultConfig","recommendedConfig","ruleValidator","splitPluginIdentifier","identifier","parts","split","objectName","pop","pluginName","join","FlatConfigArray","constructor","configs","basePath","baseConfig","schema","Symbol","iterator","unshift","preprocessConfig","config","finalizeConfig","plugins","languageOptions","processor","parser","parserName","parsers","TypeError","processorName","processors","validate","exports"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Flat Config Array\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------------------------------\r\n// Requirements\r\n//-----------------------------------------------------------------------------\r\n\r\nconst { ConfigArray, ConfigArraySymbol } = require(\"@humanwhocodes/config-array\");\r\nconst { flatConfigSchema } = require(\"./flat-config-schema\");\r\nconst { RuleValidator } = require(\"./rule-validator\");\r\nconst { defaultConfig } = require(\"./default-config\");\r\nconst recommendedConfig = require(\"../../conf/eslint-recommended\");\r\n\r\n//-----------------------------------------------------------------------------\r\n// Helpers\r\n//-----------------------------------------------------------------------------\r\n\r\nconst ruleValidator = new RuleValidator();\r\n\r\n/**\r\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\r\n * @param {string} identifier The identifier to parse.\r\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\r\n *      name.\r\n */\r\nfunction splitPluginIdentifier(identifier) {\r\n    const parts = identifier.split(\"/\");\r\n\r\n    return {\r\n        objectName: parts.pop(),\r\n        pluginName: parts.join(\"/\")\r\n    };\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// Exports\r\n//-----------------------------------------------------------------------------\r\n\r\n/**\r\n * Represents an array containing configuration information for ESLint.\r\n */\r\nclass FlatConfigArray extends ConfigArray {\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     * @param {*[]} configs An array of configuration information.\r\n     * @param {{basePath: string, baseConfig: FlatConfig}} options The options\r\n     *      to use for the config array instance.\r\n     */\r\n    constructor(configs, { basePath, baseConfig = defaultConfig } = {}) {\r\n        super(configs, {\r\n            basePath,\r\n            schema: flatConfigSchema\r\n        });\r\n\r\n        if (baseConfig[Symbol.iterator]) {\r\n            this.unshift(...baseConfig);\r\n        } else {\r\n            this.unshift(baseConfig);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable class-methods-use-this -- Desired as instance method */\r\n    /**\r\n     * Replaces a config with another config to allow us to put strings\r\n     * in the config array that will be replaced by objects before\r\n     * normalization.\r\n     * @param {Object} config The config to preprocess.\r\n     * @returns {Object} The preprocessed config.\r\n     */\r\n    [ConfigArraySymbol.preprocessConfig](config) {\r\n        if (config === \"eslint:recommended\") {\r\n            return recommendedConfig;\r\n        }\r\n\r\n        if (config === \"eslint:all\") {\r\n\r\n            /*\r\n             * Load `eslint-all.js` here instead of at the top level to avoid loading all rule modules\r\n             * when it isn't necessary. `eslint-all.js` reads `meta` of rule objects to filter out deprecated ones,\r\n             * so requiring `eslint-all.js` module loads all rule modules as a consequence.\r\n             */\r\n            return require(\"../../conf/eslint-all\");\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Finalizes the config by replacing plugin references with their objects\r\n     * and validating rule option schemas.\r\n     * @param {Object} config The config to finalize.\r\n     * @returns {Object} The finalized config.\r\n     * @throws {TypeError} If the config is invalid.\r\n     */\r\n    [ConfigArraySymbol.finalizeConfig](config) {\r\n\r\n        const { plugins, languageOptions, processor } = config;\r\n\r\n        // Check parser value\r\n        if (languageOptions && languageOptions.parser && typeof languageOptions.parser === \"string\") {\r\n            const { pluginName, objectName: parserName } = splitPluginIdentifier(languageOptions.parser);\r\n\r\n            if (!plugins || !plugins[pluginName] || !plugins[pluginName].parsers || !plugins[pluginName].parsers[parserName]) {\r\n                throw new TypeError(`Key \"parser\": Could not find \"${parserName}\" in plugin \"${pluginName}\".`);\r\n            }\r\n\r\n            languageOptions.parser = plugins[pluginName].parsers[parserName];\r\n        }\r\n\r\n        // Check processor value\r\n        if (processor && typeof processor === \"string\") {\r\n            const { pluginName, objectName: processorName } = splitPluginIdentifier(processor);\r\n\r\n            if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[processorName]) {\r\n                throw new TypeError(`Key \"processor\": Could not find \"${processorName}\" in plugin \"${pluginName}\".`);\r\n            }\r\n\r\n            config.processor = plugins[pluginName].processors[processorName];\r\n        }\r\n\r\n        ruleValidator.validate(config);\r\n\r\n        return config;\r\n    }\r\n    /* eslint-enable class-methods-use-this -- Desired as instance method */\r\n\r\n}\r\n\r\nexports.FlatConfigArray = FlatConfigArray;\r\n"]},"metadata":{},"sourceType":"script"}