{"ast":null,"code":"/**\r\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\r\n * @author Keith Cirkel <http://keithcirkel.co.uk>\r\n * @deprecated in ESLint v3.9.0\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `Reflect` methods where applicable\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-reflect\"\n    },\n    deprecated: true,\n    replacedBy: [],\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            enum: [\"apply\", \"call\", \"delete\", \"defineProperty\", \"getOwnPropertyDescriptor\", \"getPrototypeOf\", \"setPrototypeOf\", \"isExtensible\", \"getOwnPropertyNames\", \"preventExtensions\"]\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\n    }\n  },\n\n  create(context) {\n    const existingNames = {\n      apply: \"Function.prototype.apply\",\n      call: \"Function.prototype.call\",\n      defineProperty: \"Object.defineProperty\",\n      getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Object.getPrototypeOf\",\n      setPrototypeOf: \"Object.setPrototypeOf\",\n      isExtensible: \"Object.isExtensible\",\n      getOwnPropertyNames: \"Object.getOwnPropertyNames\",\n      preventExtensions: \"Object.preventExtensions\"\n    };\n    const reflectSubstitutes = {\n      apply: \"Reflect.apply\",\n      call: \"Reflect.apply\",\n      defineProperty: \"Reflect.defineProperty\",\n      getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Reflect.getPrototypeOf\",\n      setPrototypeOf: \"Reflect.setPrototypeOf\",\n      isExtensible: \"Reflect.isExtensible\",\n      getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\n      preventExtensions: \"Reflect.preventExtensions\"\n    };\n    const exceptions = (context.options[0] || {}).exceptions || [];\n    /**\r\n     * Reports the Reflect violation based on the `existing` and `substitute`\r\n     * @param {Object} node The node that violates the rule.\r\n     * @param {string} existing The existing method name that has been used.\r\n     * @param {string} substitute The Reflect substitute that should be used.\r\n     * @returns {void}\r\n     */\n\n    function report(node, existing, substitute) {\n      context.report({\n        node,\n        messageId: \"preferReflect\",\n        data: {\n          existing,\n          substitute\n        }\n      });\n    }\n\n    return {\n      CallExpression(node) {\n        const methodName = (node.callee.property || {}).name;\n        const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\n        const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\n        const userConfiguredException = exceptions.indexOf(methodName) !== -1;\n\n        if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\n          report(node, existingNames[methodName], reflectSubstitutes[methodName]);\n        }\n      },\n\n      UnaryExpression(node) {\n        const isDeleteOperator = node.operator === \"delete\";\n        const targetsIdentifier = node.argument.type === \"Identifier\";\n        const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\n\n        if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\n          report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-reflect.js"],"names":["module","exports","meta","type","docs","description","recommended","url","deprecated","replacedBy","schema","properties","exceptions","items","enum","uniqueItems","additionalProperties","messages","preferReflect","create","context","existingNames","apply","call","defineProperty","getOwnPropertyDescriptor","getPrototypeOf","setPrototypeOf","isExtensible","getOwnPropertyNames","preventExtensions","reflectSubstitutes","options","report","node","existing","substitute","messageId","data","CallExpression","methodName","callee","property","name","isReflectCall","object","hasReflectSubstitute","Object","prototype","hasOwnProperty","userConfiguredException","indexOf","UnaryExpression","isDeleteOperator","operator","targetsIdentifier","argument"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\r\n * @author Keith Cirkel <http://keithcirkel.co.uk>\r\n * @deprecated in ESLint v3.9.0\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require `Reflect` methods where applicable\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-reflect\"\r\n        },\r\n\r\n        deprecated: true,\r\n\r\n        replacedBy: [],\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    exceptions: {\r\n                        type: \"array\",\r\n                        items: {\r\n                            enum: [\r\n                                \"apply\",\r\n                                \"call\",\r\n                                \"delete\",\r\n                                \"defineProperty\",\r\n                                \"getOwnPropertyDescriptor\",\r\n                                \"getPrototypeOf\",\r\n                                \"setPrototypeOf\",\r\n                                \"isExtensible\",\r\n                                \"getOwnPropertyNames\",\r\n                                \"preventExtensions\"\r\n                            ]\r\n                        },\r\n                        uniqueItems: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const existingNames = {\r\n            apply: \"Function.prototype.apply\",\r\n            call: \"Function.prototype.call\",\r\n            defineProperty: \"Object.defineProperty\",\r\n            getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\r\n            getPrototypeOf: \"Object.getPrototypeOf\",\r\n            setPrototypeOf: \"Object.setPrototypeOf\",\r\n            isExtensible: \"Object.isExtensible\",\r\n            getOwnPropertyNames: \"Object.getOwnPropertyNames\",\r\n            preventExtensions: \"Object.preventExtensions\"\r\n        };\r\n\r\n        const reflectSubstitutes = {\r\n            apply: \"Reflect.apply\",\r\n            call: \"Reflect.apply\",\r\n            defineProperty: \"Reflect.defineProperty\",\r\n            getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\r\n            getPrototypeOf: \"Reflect.getPrototypeOf\",\r\n            setPrototypeOf: \"Reflect.setPrototypeOf\",\r\n            isExtensible: \"Reflect.isExtensible\",\r\n            getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\r\n            preventExtensions: \"Reflect.preventExtensions\"\r\n        };\r\n\r\n        const exceptions = (context.options[0] || {}).exceptions || [];\r\n\r\n        /**\r\n         * Reports the Reflect violation based on the `existing` and `substitute`\r\n         * @param {Object} node The node that violates the rule.\r\n         * @param {string} existing The existing method name that has been used.\r\n         * @param {string} substitute The Reflect substitute that should be used.\r\n         * @returns {void}\r\n         */\r\n        function report(node, existing, substitute) {\r\n            context.report({\r\n                node,\r\n                messageId: \"preferReflect\",\r\n                data: {\r\n                    existing,\r\n                    substitute\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            CallExpression(node) {\r\n                const methodName = (node.callee.property || {}).name;\r\n                const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\r\n                const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\r\n                const userConfiguredException = exceptions.indexOf(methodName) !== -1;\r\n\r\n                if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\r\n                    report(node, existingNames[methodName], reflectSubstitutes[methodName]);\r\n                }\r\n            },\r\n            UnaryExpression(node) {\r\n                const isDeleteOperator = node.operator === \"delete\";\r\n                const targetsIdentifier = node.argument.type === \"Identifier\";\r\n                const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\r\n\r\n                if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\r\n                    report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}