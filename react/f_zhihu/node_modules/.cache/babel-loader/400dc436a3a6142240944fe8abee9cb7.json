{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag octal escape sequences in string literals.\r\n * @author Ian Christian Myers\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow octal escape sequences in string literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-octal-escape\"\n    },\n    schema: [],\n    messages: {\n      octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n    }\n  },\n\n  create(context) {\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        } // \\0 represents a valid NULL character if it isn't followed by a digit.\n\n\n        const match = node.raw.match(/^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su);\n\n        if (match) {\n          context.report({\n            node,\n            messageId: \"octalEscapeSequence\",\n            data: {\n              sequence: match[1]\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-octal-escape.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","octalEscapeSequence","create","context","Literal","node","value","match","raw","report","messageId","data","sequence"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,oDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,mBAAmB,EAAE;AADf;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AACV,YAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAChC;AACH,SAHS,CAKV;;;AACA,cAAMC,KAAK,GAAGF,IAAI,CAACG,GAAL,CAASD,KAAT,CACV,kEADU,CAAd;;AAIA,YAAIA,KAAJ,EAAW;AACPJ,UAAAA,OAAO,CAACM,MAAR,CAAe;AACXJ,YAAAA,IADW;AAEXK,YAAAA,SAAS,EAAE,qBAFA;AAGXC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,QAAQ,EAAEL,KAAK,CAAC,CAAD;AAAjB;AAHK,WAAf;AAKH;AACJ;;AAnBE,KAAP;AAuBH;;AA1CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag octal escape sequences in string literals.\r\n * @author Ian Christian Myers\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow octal escape sequences in string literals\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-octal-escape\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n\r\n            Literal(node) {\r\n                if (typeof node.value !== \"string\") {\r\n                    return;\r\n                }\r\n\r\n                // \\0 represents a valid NULL character if it isn't followed by a digit.\r\n                const match = node.raw.match(\r\n                    /^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su\r\n                );\r\n\r\n                if (match) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"octalEscapeSequence\",\r\n                        data: { sequence: match[1] }\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}