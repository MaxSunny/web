{"ast":null,"code":"/**\r\n * @fileoverview Enforce a maximum number of classes per file\r\n * @author James Garbutt <https://github.com/43081j>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of classes per file\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-classes-per-file\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 1\n      }, {\n        type: \"object\",\n        properties: {\n          ignoreExpressions: {\n            type: \"boolean\"\n          },\n          max: {\n            type: \"integer\",\n            minimum: 1\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      maximumExceeded: \"File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}.\"\n    }\n  },\n\n  create(context) {\n    const [option = {}] = context.options;\n    const [ignoreExpressions, max] = typeof option === \"number\" ? [false, option || 1] : [option.ignoreExpressions, option.max || 1];\n    let classCount = 0;\n    return {\n      Program() {\n        classCount = 0;\n      },\n\n      \"Program:exit\"(node) {\n        if (classCount > max) {\n          context.report({\n            node,\n            messageId: \"maximumExceeded\",\n            data: {\n              classCount,\n              max\n            }\n          });\n        }\n      },\n\n      \"ClassDeclaration\"() {\n        classCount++;\n      },\n\n      \"ClassExpression\"() {\n        if (!ignoreExpressions) {\n          classCount++;\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/max-classes-per-file.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","ignoreExpressions","max","additionalProperties","messages","maximumExceeded","create","context","option","options","classCount","Program","node","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;AAGA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8CADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIN,QAAAA,IAAI,EAAE,SADV;AAEIO,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIP,QAAAA,IAAI,EAAE,QADV;AAEIQ,QAAAA,UAAU,EAAE;AACRC,UAAAA,iBAAiB,EAAE;AACfT,YAAAA,IAAI,EAAE;AADS,WADX;AAIRU,UAAAA,GAAG,EAAE;AACDV,YAAAA,IAAI,EAAE,SADL;AAEDO,YAAAA,OAAO,EAAE;AAFR;AAJG,SAFhB;AAWII,QAAAA,oBAAoB,EAAE;AAX1B,OALG;AADX,KADI,CATN;AAiCFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAjCR,GADO;;AAsCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAM,CAACC,MAAM,GAAG,EAAV,IAAgBD,OAAO,CAACE,OAA9B;AACA,UAAM,CAACR,iBAAD,EAAoBC,GAApB,IAA2B,OAAOM,MAAP,KAAkB,QAAlB,GAC3B,CAAC,KAAD,EAAQA,MAAM,IAAI,CAAlB,CAD2B,GAE3B,CAACA,MAAM,CAACP,iBAAR,EAA2BO,MAAM,CAACN,GAAP,IAAc,CAAzC,CAFN;AAIA,QAAIQ,UAAU,GAAG,CAAjB;AAEA,WAAO;AACHC,MAAAA,OAAO,GAAG;AACND,QAAAA,UAAU,GAAG,CAAb;AACH,OAHE;;AAIH,qBAAeE,IAAf,EAAqB;AACjB,YAAIF,UAAU,GAAGR,GAAjB,EAAsB;AAClBK,UAAAA,OAAO,CAACM,MAAR,CAAe;AACXD,YAAAA,IADW;AAEXE,YAAAA,SAAS,EAAE,iBAFA;AAGXC,YAAAA,IAAI,EAAE;AACFL,cAAAA,UADE;AAEFR,cAAAA;AAFE;AAHK,WAAf;AAQH;AACJ,OAfE;;AAgBH,2BAAqB;AACjBQ,QAAAA,UAAU;AACb,OAlBE;;AAmBH,0BAAoB;AAChB,YAAI,CAACT,iBAAL,EAAwB;AACpBS,UAAAA,UAAU;AACb;AACJ;;AAvBE,KAAP;AAyBH;;AAvEY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Enforce a maximum number of classes per file\r\n * @author James Garbutt <https://github.com/43081j>\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce a maximum number of classes per file\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/max-classes-per-file\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                oneOf: [\r\n                    {\r\n                        type: \"integer\",\r\n                        minimum: 1\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            ignoreExpressions: {\r\n                                type: \"boolean\"\r\n                            },\r\n                            max: {\r\n                                type: \"integer\",\r\n                                minimum: 1\r\n                            }\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            maximumExceeded: \"File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}.\"\r\n        }\r\n    },\r\n    create(context) {\r\n        const [option = {}] = context.options;\r\n        const [ignoreExpressions, max] = typeof option === \"number\"\r\n            ? [false, option || 1]\r\n            : [option.ignoreExpressions, option.max || 1];\r\n\r\n        let classCount = 0;\r\n\r\n        return {\r\n            Program() {\r\n                classCount = 0;\r\n            },\r\n            \"Program:exit\"(node) {\r\n                if (classCount > max) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"maximumExceeded\",\r\n                        data: {\r\n                            classCount,\r\n                            max\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            \"ClassDeclaration\"() {\r\n                classCount++;\r\n            },\r\n            \"ClassExpression\"() {\r\n                if (!ignoreExpressions) {\r\n                    classCount++;\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}