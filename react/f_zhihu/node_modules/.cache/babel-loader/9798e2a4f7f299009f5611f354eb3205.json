{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of arguments.callee and arguments.caller.\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `arguments.caller` or `arguments.callee`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-caller\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Avoid arguments.{{prop}}.\"\n    }\n  },\n\n  create(context) {\n    return {\n      MemberExpression(node) {\n        const objectName = node.object.name,\n              propertyName = node.property.name;\n\n        if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/u)) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              prop: propertyName\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-caller.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","MemberExpression","node","objectName","object","name","propertyName","property","computed","match","report","messageId","data","prop"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,cAAMC,UAAU,GAAGD,IAAI,CAACE,MAAL,CAAYC,IAA/B;AAAA,cACIC,YAAY,GAAGJ,IAAI,CAACK,QAAL,CAAcF,IADjC;;AAGA,YAAIF,UAAU,KAAK,WAAf,IAA8B,CAACD,IAAI,CAACM,QAApC,IAAgDF,YAAhD,IAAgEA,YAAY,CAACG,KAAb,CAAmB,cAAnB,CAApE,EAAwG;AACpGT,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAER,YAAAA,IAAF;AAAQS,YAAAA,SAAS,EAAE,YAAnB;AAAiCC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,IAAI,EAAEP;AAAR;AAAvC,WAAf;AACH;AAEJ;;AAVE,KAAP;AAaH;;AAhCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of arguments.callee and arguments.caller.\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow the use of `arguments.caller` or `arguments.callee`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-caller\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Avoid arguments.{{prop}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        return {\r\n\r\n            MemberExpression(node) {\r\n                const objectName = node.object.name,\r\n                    propertyName = node.property.name;\r\n\r\n                if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/u)) {\r\n                    context.report({ node, messageId: \"unexpected\", data: { prop: propertyName } });\r\n                }\r\n\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}