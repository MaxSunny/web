{"ast":null,"code":"/**\r\n * @fileoverview A rule to disallow duplicate name in class members.\r\n * @author Toru Nagashima\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate class members\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate name '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    let stack = [];\n    /**\r\n     * Gets state of a given member name.\r\n     * @param {string} name A name of a member.\r\n     * @param {boolean} isStatic A flag which specifies that is a static member.\r\n     * @returns {Object} A state of a given member name.\r\n     *   - retv.init {boolean} A flag which shows the name is declared as normal member.\r\n     *   - retv.get {boolean} A flag which shows the name is declared as getter.\r\n     *   - retv.set {boolean} A flag which shows the name is declared as setter.\r\n     */\n\n    function getState(name, isStatic) {\n      const stateMap = stack[stack.length - 1];\n      const key = `$${name}`; // to avoid \"__proto__\".\n\n      if (!stateMap[key]) {\n        stateMap[key] = {\n          nonStatic: {\n            init: false,\n            get: false,\n            set: false\n          },\n          static: {\n            init: false,\n            get: false,\n            set: false\n          }\n        };\n      }\n\n      return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n    }\n\n    return {\n      // Initializes the stack of state of member declarations.\n      Program() {\n        stack = [];\n      },\n\n      // Initializes state of member declarations for the class.\n      ClassBody() {\n        stack.push(Object.create(null));\n      },\n\n      // Disposes the state for the class.\n      \"ClassBody:exit\"() {\n        stack.pop();\n      },\n\n      // Reports the node if its name has been declared already.\n      \"MethodDefinition, PropertyDefinition\"(node) {\n        const name = astUtils.getStaticPropertyName(node);\n        const kind = node.type === \"MethodDefinition\" ? node.kind : \"field\";\n\n        if (name === null || kind === \"constructor\") {\n          return;\n        }\n\n        const state = getState(name, node.static);\n        let isDuplicate = false;\n\n        if (kind === \"get\") {\n          isDuplicate = state.init || state.get;\n          state.get = true;\n        } else if (kind === \"set\") {\n          isDuplicate = state.init || state.set;\n          state.set = true;\n        } else {\n          isDuplicate = state.init || state.get || state.set;\n          state.init = true;\n        }\n\n        if (isDuplicate) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-dupe-class-members.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","stack","getState","name","isStatic","stateMap","length","key","nonStatic","init","get","set","static","Program","ClassBody","push","Object","pop","node","getStaticPropertyName","kind","state","isDuplicate","report","messageId","data"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview A rule to disallow duplicate name in class members.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow duplicate class members\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Duplicate name '{{name}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        let stack = [];\r\n\r\n        /**\r\n         * Gets state of a given member name.\r\n         * @param {string} name A name of a member.\r\n         * @param {boolean} isStatic A flag which specifies that is a static member.\r\n         * @returns {Object} A state of a given member name.\r\n         *   - retv.init {boolean} A flag which shows the name is declared as normal member.\r\n         *   - retv.get {boolean} A flag which shows the name is declared as getter.\r\n         *   - retv.set {boolean} A flag which shows the name is declared as setter.\r\n         */\r\n        function getState(name, isStatic) {\r\n            const stateMap = stack[stack.length - 1];\r\n            const key = `$${name}`; // to avoid \"__proto__\".\r\n\r\n            if (!stateMap[key]) {\r\n                stateMap[key] = {\r\n                    nonStatic: { init: false, get: false, set: false },\r\n                    static: { init: false, get: false, set: false }\r\n                };\r\n            }\r\n\r\n            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\r\n        }\r\n\r\n        return {\r\n\r\n            // Initializes the stack of state of member declarations.\r\n            Program() {\r\n                stack = [];\r\n            },\r\n\r\n            // Initializes state of member declarations for the class.\r\n            ClassBody() {\r\n                stack.push(Object.create(null));\r\n            },\r\n\r\n            // Disposes the state for the class.\r\n            \"ClassBody:exit\"() {\r\n                stack.pop();\r\n            },\r\n\r\n            // Reports the node if its name has been declared already.\r\n            \"MethodDefinition, PropertyDefinition\"(node) {\r\n                const name = astUtils.getStaticPropertyName(node);\r\n                const kind = node.type === \"MethodDefinition\" ? node.kind : \"field\";\r\n\r\n                if (name === null || kind === \"constructor\") {\r\n                    return;\r\n                }\r\n\r\n                const state = getState(name, node.static);\r\n                let isDuplicate = false;\r\n\r\n                if (kind === \"get\") {\r\n                    isDuplicate = (state.init || state.get);\r\n                    state.get = true;\r\n                } else if (kind === \"set\") {\r\n                    isDuplicate = (state.init || state.set);\r\n                    state.set = true;\r\n                } else {\r\n                    isDuplicate = (state.init || state.get || state.set);\r\n                    state.init = true;\r\n                }\r\n\r\n                if (isDuplicate) {\r\n                    context.report({ node, messageId: \"unexpected\", data: { name } });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}