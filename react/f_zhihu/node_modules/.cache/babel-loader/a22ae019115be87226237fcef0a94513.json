{"ast":null,"code":"/**\r\n * @fileoverview Define the cursor which iterates tokens only, with inflated range.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst ForwardTokenCursor = require(\"./forward-token-cursor\"); //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\r\n * The cursor which iterates tokens only, with inflated range.\r\n * This is for the backward compatibility of padding options.\r\n */\n\n\nmodule.exports = class PaddedTokenCursor extends ForwardTokenCursor {\n  /**\r\n   * Initializes this cursor.\r\n   * @param {Token[]} tokens The array of tokens.\r\n   * @param {Comment[]} comments The array of comments.\r\n   * @param {Object} indexMap The map from locations to indices in `tokens`.\r\n   * @param {number} startLoc The start location of the iteration range.\r\n   * @param {number} endLoc The end location of the iteration range.\r\n   * @param {number} beforeCount The number of tokens this cursor iterates before start.\r\n   * @param {number} afterCount The number of tokens this cursor iterates after end.\r\n   */\n  constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {\n    super(tokens, comments, indexMap, startLoc, endLoc);\n    this.index = Math.max(0, this.index - beforeCount);\n    this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/source-code/token-store/padded-token-cursor.js"],"names":["ForwardTokenCursor","require","module","exports","PaddedTokenCursor","constructor","tokens","comments","indexMap","startLoc","endLoc","beforeCount","afterCount","index","Math","max","indexEnd","min","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,wBAAD,CAAlC,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,iBAAN,SAAgCJ,kBAAhC,CAAmD;AAEhE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIK,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,WAA/C,EAA4DC,UAA5D,EAAwE;AAC/E,UAAMN,MAAN,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,MAA5C;AACA,SAAKG,KAAL,GAAaC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKF,KAAL,GAAaF,WAAzB,CAAb;AACA,SAAKK,QAAL,GAAgBF,IAAI,CAACG,GAAL,CAASX,MAAM,CAACY,MAAP,GAAgB,CAAzB,EAA4B,KAAKF,QAAL,GAAgBJ,UAA5C,CAAhB;AACH;;AAhB+D,CAApE","sourcesContent":["/**\r\n * @fileoverview Define the cursor which iterates tokens only, with inflated range.\r\n * @author Toru Nagashima\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst ForwardTokenCursor = require(\"./forward-token-cursor\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Exports\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * The cursor which iterates tokens only, with inflated range.\r\n * This is for the backward compatibility of padding options.\r\n */\r\nmodule.exports = class PaddedTokenCursor extends ForwardTokenCursor {\r\n\r\n    /**\r\n     * Initializes this cursor.\r\n     * @param {Token[]} tokens The array of tokens.\r\n     * @param {Comment[]} comments The array of comments.\r\n     * @param {Object} indexMap The map from locations to indices in `tokens`.\r\n     * @param {number} startLoc The start location of the iteration range.\r\n     * @param {number} endLoc The end location of the iteration range.\r\n     * @param {number} beforeCount The number of tokens this cursor iterates before start.\r\n     * @param {number} afterCount The number of tokens this cursor iterates after end.\r\n     */\r\n    constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {\r\n        super(tokens, comments, indexMap, startLoc, endLoc);\r\n        this.index = Math.max(0, this.index - beforeCount);\r\n        this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}