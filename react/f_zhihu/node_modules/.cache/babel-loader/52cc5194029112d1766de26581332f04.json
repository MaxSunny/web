{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of console object\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `console`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-console\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          minItems: 1,\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected console statement.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    /**\r\n     * Checks whether the given reference is 'console' or not.\r\n     * @param {eslint-scope.Reference} reference The reference to check.\r\n     * @returns {boolean} `true` if the reference is 'console'.\r\n     */\n\n    function isConsole(reference) {\n      const id = reference.identifier;\n      return id && id.name === \"console\";\n    }\n    /**\r\n     * Checks whether the property name of the given MemberExpression node\r\n     * is allowed by options or not.\r\n     * @param {ASTNode} node The MemberExpression node to check.\r\n     * @returns {boolean} `true` if the property name of the node is allowed.\r\n     */\n\n\n    function isAllowed(node) {\n      const propertyName = astUtils.getStaticPropertyName(node);\n      return propertyName && allowed.indexOf(propertyName) !== -1;\n    }\n    /**\r\n     * Checks whether the given reference is a member access which is not\r\n     * allowed by options or not.\r\n     * @param {eslint-scope.Reference} reference The reference to check.\r\n     * @returns {boolean} `true` if the reference is a member access which\r\n     *      is not allowed by options.\r\n     */\n\n\n    function isMemberAccessExceptAllowed(reference) {\n      const node = reference.identifier;\n      const parent = node.parent;\n      return parent.type === \"MemberExpression\" && parent.object === node && !isAllowed(parent);\n    }\n    /**\r\n     * Reports the given reference as a violation.\r\n     * @param {eslint-scope.Reference} reference The reference to report.\r\n     * @returns {void}\r\n     */\n\n\n    function report(reference) {\n      const node = reference.identifier.parent;\n      context.report({\n        node,\n        loc: node.loc,\n        messageId: \"unexpected\"\n      });\n    }\n\n    return {\n      \"Program:exit\"() {\n        const scope = context.getScope();\n        const consoleVar = astUtils.getVariableByName(scope, \"console\");\n        const shadowed = consoleVar && consoleVar.defs.length > 0;\n        /*\r\n         * 'scope.through' includes all references to undefined\r\n         * variables. If the variable 'console' is not defined, it uses\r\n         * 'scope.through'.\r\n         */\n\n        const references = consoleVar ? consoleVar.references : scope.through.filter(isConsole);\n\n        if (!shadowed) {\n          references.filter(isMemberAccessExceptAllowed).forEach(report);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-console.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","allow","items","minItems","uniqueItems","additionalProperties","messages","unexpected","create","context","options","allowed","isConsole","reference","id","identifier","name","isAllowed","node","propertyName","getStaticPropertyName","indexOf","isMemberAccessExceptAllowed","parent","object","report","loc","messageId","scope","getScope","consoleVar","getVariableByName","shadowed","defs","length","references","through","filter","forEach"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of console object\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow the use of `console`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-console\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allow: {\r\n                        type: \"array\",\r\n                        items: {\r\n                            type: \"string\"\r\n                        },\r\n                        minItems: 1,\r\n                        uniqueItems: true\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpected: \"Unexpected console statement.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0] || {};\r\n        const allowed = options.allow || [];\r\n\r\n        /**\r\n         * Checks whether the given reference is 'console' or not.\r\n         * @param {eslint-scope.Reference} reference The reference to check.\r\n         * @returns {boolean} `true` if the reference is 'console'.\r\n         */\r\n        function isConsole(reference) {\r\n            const id = reference.identifier;\r\n\r\n            return id && id.name === \"console\";\r\n        }\r\n\r\n        /**\r\n         * Checks whether the property name of the given MemberExpression node\r\n         * is allowed by options or not.\r\n         * @param {ASTNode} node The MemberExpression node to check.\r\n         * @returns {boolean} `true` if the property name of the node is allowed.\r\n         */\r\n        function isAllowed(node) {\r\n            const propertyName = astUtils.getStaticPropertyName(node);\r\n\r\n            return propertyName && allowed.indexOf(propertyName) !== -1;\r\n        }\r\n\r\n        /**\r\n         * Checks whether the given reference is a member access which is not\r\n         * allowed by options or not.\r\n         * @param {eslint-scope.Reference} reference The reference to check.\r\n         * @returns {boolean} `true` if the reference is a member access which\r\n         *      is not allowed by options.\r\n         */\r\n        function isMemberAccessExceptAllowed(reference) {\r\n            const node = reference.identifier;\r\n            const parent = node.parent;\r\n\r\n            return (\r\n                parent.type === \"MemberExpression\" &&\r\n                parent.object === node &&\r\n                !isAllowed(parent)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Reports the given reference as a violation.\r\n         * @param {eslint-scope.Reference} reference The reference to report.\r\n         * @returns {void}\r\n         */\r\n        function report(reference) {\r\n            const node = reference.identifier.parent;\r\n\r\n            context.report({\r\n                node,\r\n                loc: node.loc,\r\n                messageId: \"unexpected\"\r\n            });\r\n        }\r\n\r\n        return {\r\n            \"Program:exit\"() {\r\n                const scope = context.getScope();\r\n                const consoleVar = astUtils.getVariableByName(scope, \"console\");\r\n                const shadowed = consoleVar && consoleVar.defs.length > 0;\r\n\r\n                /*\r\n                 * 'scope.through' includes all references to undefined\r\n                 * variables. If the variable 'console' is not defined, it uses\r\n                 * 'scope.through'.\r\n                 */\r\n                const references = consoleVar\r\n                    ? consoleVar.references\r\n                    : scope.through.filter(isConsole);\r\n\r\n                if (!shadowed) {\r\n                    references\r\n                        .filter(isMemberAccessExceptAllowed)\r\n                        .forEach(report);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}