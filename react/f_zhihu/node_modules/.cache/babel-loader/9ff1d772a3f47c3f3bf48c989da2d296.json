{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when the same variable is declared more then once.\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow variable redeclaration\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-redeclare\"\n    },\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const options = {\n      builtinGlobals: Boolean(context.options.length === 0 || context.options[0].builtinGlobals)\n    };\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Iterate declarations of a given variable.\r\n     * @param {escope.variable} variable The variable object to iterate declarations.\r\n     * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\r\n     */\n\n    function* iterateDeclarations(variable) {\n      if (options.builtinGlobals && (variable.eslintImplicitGlobalSetting === \"readonly\" || variable.eslintImplicitGlobalSetting === \"writable\")) {\n        yield {\n          type: \"builtin\"\n        };\n      }\n\n      for (const id of variable.identifiers) {\n        yield {\n          type: \"syntax\",\n          node: id,\n          loc: id.loc\n        };\n      }\n\n      if (variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: \"comment\",\n            node: comment,\n            loc: astUtils.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n    }\n    /**\r\n     * Find variables in a given scope and flag redeclared ones.\r\n     * @param {Scope} scope An eslint-scope scope object.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n        /*\r\n         * If the type of a declaration is different from the type of\r\n         * the first declaration, it shows the location of the first\r\n         * declaration.\r\n         */\n\n\n        const detailMessageId = declaration.type === \"builtin\" ? \"redeclaredAsBuiltin\" : \"redeclaredBySyntax\";\n        const data = {\n          id: variable.name\n        }; // Report extra declarations.\n\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? \"redeclared\" : detailMessageId;\n          context.report({\n            node,\n            loc,\n            messageId,\n            data\n          });\n        }\n      }\n    }\n    /**\r\n     * Find variables in the current scope.\r\n     * @param {ASTNode} node The node of the current scope.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function checkForBlock(node) {\n      const scope = context.getScope();\n      /*\r\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\r\n       * `scope.block` is a different node in such a case.\r\n       */\n\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope();\n        findVariablesInScope(scope); // Node.js or ES modules has a special scope.\n\n        if (scope.type === \"global\" && scope.childScopes[0] && // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      StaticBlock: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-redeclare.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","schema","properties","builtinGlobals","default","additionalProperties","create","context","options","Boolean","length","sourceCode","getSourceCode","iterateDeclarations","variable","eslintImplicitGlobalSetting","id","identifiers","node","loc","eslintExplicitGlobalComments","comment","getNameLocationInGlobalDirectiveComment","name","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","StaticBlock","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag when the same variable is declared more then once.\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow variable redeclaration\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-redeclare\"\r\n        },\r\n\r\n        messages: {\r\n            redeclared: \"'{{id}}' is already defined.\",\r\n            redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\r\n            redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    builtinGlobals: { type: \"boolean\", default: true }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ]\r\n    },\r\n\r\n    create(context) {\r\n        const options = {\r\n            builtinGlobals: Boolean(\r\n                context.options.length === 0 ||\r\n                context.options[0].builtinGlobals\r\n            )\r\n        };\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Iterate declarations of a given variable.\r\n         * @param {escope.variable} variable The variable object to iterate declarations.\r\n         * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\r\n         */\r\n        function *iterateDeclarations(variable) {\r\n            if (options.builtinGlobals && (\r\n                variable.eslintImplicitGlobalSetting === \"readonly\" ||\r\n                variable.eslintImplicitGlobalSetting === \"writable\"\r\n            )) {\r\n                yield { type: \"builtin\" };\r\n            }\r\n\r\n            for (const id of variable.identifiers) {\r\n                yield { type: \"syntax\", node: id, loc: id.loc };\r\n            }\r\n\r\n            if (variable.eslintExplicitGlobalComments) {\r\n                for (const comment of variable.eslintExplicitGlobalComments) {\r\n                    yield {\r\n                        type: \"comment\",\r\n                        node: comment,\r\n                        loc: astUtils.getNameLocationInGlobalDirectiveComment(\r\n                            sourceCode,\r\n                            comment,\r\n                            variable.name\r\n                        )\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Find variables in a given scope and flag redeclared ones.\r\n         * @param {Scope} scope An eslint-scope scope object.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function findVariablesInScope(scope) {\r\n            for (const variable of scope.variables) {\r\n                const [\r\n                    declaration,\r\n                    ...extraDeclarations\r\n                ] = iterateDeclarations(variable);\r\n\r\n                if (extraDeclarations.length === 0) {\r\n                    continue;\r\n                }\r\n\r\n                /*\r\n                 * If the type of a declaration is different from the type of\r\n                 * the first declaration, it shows the location of the first\r\n                 * declaration.\r\n                 */\r\n                const detailMessageId = declaration.type === \"builtin\"\r\n                    ? \"redeclaredAsBuiltin\"\r\n                    : \"redeclaredBySyntax\";\r\n                const data = { id: variable.name };\r\n\r\n                // Report extra declarations.\r\n                for (const { type, node, loc } of extraDeclarations) {\r\n                    const messageId = type === declaration.type\r\n                        ? \"redeclared\"\r\n                        : detailMessageId;\r\n\r\n                    context.report({ node, loc, messageId, data });\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Find variables in the current scope.\r\n         * @param {ASTNode} node The node of the current scope.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkForBlock(node) {\r\n            const scope = context.getScope();\r\n\r\n            /*\r\n             * In ES5, some node type such as `BlockStatement` doesn't have that scope.\r\n             * `scope.block` is a different node in such a case.\r\n             */\r\n            if (scope.block === node) {\r\n                findVariablesInScope(scope);\r\n            }\r\n        }\r\n\r\n        return {\r\n            Program() {\r\n                const scope = context.getScope();\r\n\r\n                findVariablesInScope(scope);\r\n\r\n                // Node.js or ES modules has a special scope.\r\n                if (\r\n                    scope.type === \"global\" &&\r\n                    scope.childScopes[0] &&\r\n\r\n                    // The special scope's block is the Program node.\r\n                    scope.block === scope.childScopes[0].block\r\n                ) {\r\n                    findVariablesInScope(scope.childScopes[0]);\r\n                }\r\n            },\r\n\r\n            FunctionDeclaration: checkForBlock,\r\n            FunctionExpression: checkForBlock,\r\n            ArrowFunctionExpression: checkForBlock,\r\n\r\n            StaticBlock: checkForBlock,\r\n\r\n            BlockStatement: checkForBlock,\r\n            ForStatement: checkForBlock,\r\n            ForInStatement: checkForBlock,\r\n            ForOfStatement: checkForBlock,\r\n            SwitchStatement: checkForBlock\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}