{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier\r\n * @author Ian Christian Myers\r\n * @deprecated in ESLint v5.1.0\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-catch-shadow\"\n    },\n    replacedBy: [\"no-shadow\"],\n    deprecated: true,\n    schema: [],\n    messages: {\n      mutable: \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Check if the parameters are been shadowed\r\n     * @param {Object} scope current scope\r\n     * @param {string} name parameter name\r\n     * @returns {boolean} True is its been shadowed\r\n     */\n    function paramIsShadowing(scope, name) {\n      return astUtils.getVariableByName(scope, name) !== null;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"CatchClause[param!=null]\"(node) {\n        let scope = context.getScope();\n        /*\r\n         * When ecmaVersion >= 6, CatchClause creates its own scope\r\n         * so start from one upper scope to exclude the current node\r\n         */\n\n        if (scope.block === node) {\n          scope = scope.upper;\n        }\n\n        if (paramIsShadowing(scope, node.param.name)) {\n          context.report({\n            node,\n            messageId: \"mutable\",\n            data: {\n              name: node.param.name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-catch-shadow.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","replacedBy","deprecated","schema","messages","mutable","create","context","paramIsShadowing","scope","name","getVariableByName","node","getScope","block","upper","param","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gFADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,UAAU,EAAE,CAAC,WAAD,CATV;AAWFC,IAAAA,UAAU,EAAE,IAXV;AAYFC,IAAAA,MAAM,EAAE,EAZN;AAcFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,OAAO,EAAE;AADH;AAdR,GADO;;AAoBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;AACA;AACQ,aAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AACnC,aAAOnB,QAAQ,CAACoB,iBAAT,CAA2BF,KAA3B,EAAkCC,IAAlC,MAA4C,IAAnD;AACH,KAdW,CAgBZ;AACA;AACA;;;AAEA,WAAO;AAEH,iCAA2BE,IAA3B,EAAiC;AAC7B,YAAIH,KAAK,GAAGF,OAAO,CAACM,QAAR,EAAZ;AAEA;AAChB;AACA;AACA;;AACgB,YAAIJ,KAAK,CAACK,KAAN,KAAgBF,IAApB,EAA0B;AACtBH,UAAAA,KAAK,GAAGA,KAAK,CAACM,KAAd;AACH;;AAED,YAAIP,gBAAgB,CAACC,KAAD,EAAQG,IAAI,CAACI,KAAL,CAAWN,IAAnB,CAApB,EAA8C;AAC1CH,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAEL,YAAAA,IAAF;AAAQM,YAAAA,SAAS,EAAE,SAAnB;AAA8BC,YAAAA,IAAI,EAAE;AAAET,cAAAA,IAAI,EAAEE,IAAI,CAACI,KAAL,CAAWN;AAAnB;AAApC,WAAf;AACH;AACJ;;AAhBE,KAAP;AAmBH;;AA3DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier\r\n * @author Ian Christian Myers\r\n * @deprecated in ESLint v5.1.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-catch-shadow\"\r\n        },\r\n\r\n        replacedBy: [\"no-shadow\"],\r\n\r\n        deprecated: true,\r\n        schema: [],\r\n\r\n        messages: {\r\n            mutable: \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Check if the parameters are been shadowed\r\n         * @param {Object} scope current scope\r\n         * @param {string} name parameter name\r\n         * @returns {boolean} True is its been shadowed\r\n         */\r\n        function paramIsShadowing(scope, name) {\r\n            return astUtils.getVariableByName(scope, name) !== null;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            \"CatchClause[param!=null]\"(node) {\r\n                let scope = context.getScope();\r\n\r\n                /*\r\n                 * When ecmaVersion >= 6, CatchClause creates its own scope\r\n                 * so start from one upper scope to exclude the current node\r\n                 */\r\n                if (scope.block === node) {\r\n                    scope = scope.upper;\r\n                }\r\n\r\n                if (paramIsShadowing(scope, node.param.name)) {\r\n                    context.report({ node, messageId: \"mutable\", data: { name: node.param.name } });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}