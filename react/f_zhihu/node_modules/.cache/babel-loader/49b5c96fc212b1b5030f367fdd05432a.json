{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow async functions which have no `await` expression.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Capitalize the 1st letter of the given text.\r\n * @param {string} text The text to capitalize.\r\n * @returns {string} The text that the 1st letter was capitalized.\r\n */\n\n\nfunction capitalizeFirstLetter(text) {\n  return text[0].toUpperCase() + text.slice(1);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow async functions which have no `await` expression\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-await\"\n    },\n    schema: [],\n    messages: {\n      missingAwait: \"{{name}} has no 'await' expression.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\r\n     * Push the scope info object to the stack.\r\n     * @returns {void}\r\n     */\n\n    function enterFunction() {\n      scopeInfo = {\n        upper: scopeInfo,\n        hasAwait: false\n      };\n    }\n    /**\r\n     * Pop the top scope info object from the stack.\r\n     * Also, it reports the function if needed.\r\n     * @param {ASTNode} node The node to report.\r\n     * @returns {void}\r\n     */\n\n\n    function exitFunction(node) {\n      if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n        context.report({\n          node,\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          messageId: \"missingAwait\",\n          data: {\n            name: capitalizeFirstLetter(astUtils.getFunctionNameWithKind(node))\n          }\n        });\n      }\n\n      scopeInfo = scopeInfo.upper;\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n      ArrowFunctionExpression: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n\n      AwaitExpression() {\n        if (!scopeInfo) {\n          return;\n        }\n\n        scopeInfo.hasAwait = true;\n      },\n\n      ForOfStatement(node) {\n        if (!scopeInfo) {\n          return;\n        }\n\n        if (node.await) {\n          scopeInfo.hasAwait = true;\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/require-await.js"],"names":["astUtils","require","capitalizeFirstLetter","text","toUpperCase","slice","module","exports","meta","type","docs","description","recommended","url","schema","messages","missingAwait","create","context","sourceCode","getSourceCode","scopeInfo","enterFunction","upper","hasAwait","exitFunction","node","generator","async","isEmptyFunction","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","AwaitExpression","ForOfStatement","await"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACjC,SAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,KAAwBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAA/B;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,QAAIC,SAAS,GAAG,IAAhB;AAEA;AACR;AACA;AACA;;AACQ,aAASC,aAAT,GAAyB;AACrBD,MAAAA,SAAS,GAAG;AACRE,QAAAA,KAAK,EAAEF,SADC;AAERG,QAAAA,QAAQ,EAAE;AAFF,OAAZ;AAIH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,UAAI,CAACA,IAAI,CAACC,SAAN,IAAmBD,IAAI,CAACE,KAAxB,IAAiC,CAACP,SAAS,CAACG,QAA5C,IAAwD,CAACxB,QAAQ,CAAC6B,eAAT,CAAyBH,IAAzB,CAA7D,EAA6F;AACzFR,QAAAA,OAAO,CAACY,MAAR,CAAe;AACXJ,UAAAA,IADW;AAEXK,UAAAA,GAAG,EAAE/B,QAAQ,CAACgC,kBAAT,CAA4BN,IAA5B,EAAkCP,UAAlC,CAFM;AAGXc,UAAAA,SAAS,EAAE,cAHA;AAIXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAEjC,qBAAqB,CACvBF,QAAQ,CAACoC,uBAAT,CAAiCV,IAAjC,CADuB;AADzB;AAJK,SAAf;AAUH;;AAEDL,MAAAA,SAAS,GAAGA,SAAS,CAACE,KAAtB;AACH;;AAED,WAAO;AACHc,MAAAA,mBAAmB,EAAEf,aADlB;AAEHgB,MAAAA,kBAAkB,EAAEhB,aAFjB;AAGHiB,MAAAA,uBAAuB,EAAEjB,aAHtB;AAIH,kCAA4BG,YAJzB;AAKH,iCAA2BA,YALxB;AAMH,sCAAgCA,YAN7B;;AAQHe,MAAAA,eAAe,GAAG;AACd,YAAI,CAACnB,SAAL,EAAgB;AACZ;AACH;;AAEDA,QAAAA,SAAS,CAACG,QAAV,GAAqB,IAArB;AACH,OAdE;;AAeHiB,MAAAA,cAAc,CAACf,IAAD,EAAO;AACjB,YAAI,CAACL,SAAL,EAAgB;AACZ;AACH;;AAED,YAAIK,IAAI,CAACgB,KAAT,EAAgB;AACZrB,UAAAA,SAAS,CAACG,QAAV,GAAqB,IAArB;AACH;AACJ;;AAvBE,KAAP;AAyBH;;AAhFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow async functions which have no `await` expression.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Capitalize the 1st letter of the given text.\r\n * @param {string} text The text to capitalize.\r\n * @returns {string} The text that the 1st letter was capitalized.\r\n */\r\nfunction capitalizeFirstLetter(text) {\r\n    return text[0].toUpperCase() + text.slice(1);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow async functions which have no `await` expression\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/require-await\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            missingAwait: \"{{name}} has no 'await' expression.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        let scopeInfo = null;\r\n\r\n        /**\r\n         * Push the scope info object to the stack.\r\n         * @returns {void}\r\n         */\r\n        function enterFunction() {\r\n            scopeInfo = {\r\n                upper: scopeInfo,\r\n                hasAwait: false\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Pop the top scope info object from the stack.\r\n         * Also, it reports the function if needed.\r\n         * @param {ASTNode} node The node to report.\r\n         * @returns {void}\r\n         */\r\n        function exitFunction(node) {\r\n            if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\r\n                context.report({\r\n                    node,\r\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\r\n                    messageId: \"missingAwait\",\r\n                    data: {\r\n                        name: capitalizeFirstLetter(\r\n                            astUtils.getFunctionNameWithKind(node)\r\n                        )\r\n                    }\r\n                });\r\n            }\r\n\r\n            scopeInfo = scopeInfo.upper;\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: enterFunction,\r\n            FunctionExpression: enterFunction,\r\n            ArrowFunctionExpression: enterFunction,\r\n            \"FunctionDeclaration:exit\": exitFunction,\r\n            \"FunctionExpression:exit\": exitFunction,\r\n            \"ArrowFunctionExpression:exit\": exitFunction,\r\n\r\n            AwaitExpression() {\r\n                if (!scopeInfo) {\r\n                    return;\r\n                }\r\n\r\n                scopeInfo.hasAwait = true;\r\n            },\r\n            ForOfStatement(node) {\r\n                if (!scopeInfo) {\r\n                    return;\r\n                }\r\n\r\n                if (node.await) {\r\n                    scopeInfo.hasAwait = true;\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}