{"ast":null,"code":"/**\r\n * @fileoverview Disallow string concatenation when using __dirname and __filename\r\n * @author Nicholas C. Zakas\r\n * @deprecated in ESLint v7.0.0\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow string concatenation with `__dirname` and `__filename`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-path-concat\"\n    },\n    schema: [],\n    messages: {\n      usePathFunctions: \"Use path.join() or path.resolve() instead of + to create paths.\"\n    }\n  },\n\n  create(context) {\n    const MATCHER = /^__(?:dir|file)name$/u; //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      BinaryExpression(node) {\n        const left = node.left,\n              right = node.right;\n\n        if (node.operator === \"+\" && (left.type === \"Identifier\" && MATCHER.test(left.name) || right.type === \"Identifier\" && MATCHER.test(right.name))) {\n          context.report({\n            node,\n            messageId: \"usePathFunctions\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-path-concat.js"],"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","schema","messages","usePathFunctions","create","context","MATCHER","BinaryExpression","node","left","right","operator","test","name","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,IADV;AAGFC,IAAAA,UAAU,EAAE,EAHV;AAKFC,IAAAA,IAAI,EAAE,YALJ;AAOFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,iEADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAPJ;AAaFC,IAAAA,MAAM,EAAE,EAbN;AAeFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE;AADZ;AAfR,GADO;;AAqBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,OAAO,GAAG,uBAAhB,CAFY,CAIZ;AACA;AACA;;AAEA,WAAO;AAEHC,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AAEnB,cAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AAAA,cACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;;AAGA,YAAIF,IAAI,CAACG,QAAL,KAAkB,GAAlB,KACMF,IAAI,CAACb,IAAL,KAAc,YAAd,IAA8BU,OAAO,CAACM,IAAR,CAAaH,IAAI,CAACI,IAAlB,CAA/B,IACAH,KAAK,CAACd,IAAN,KAAe,YAAf,IAA+BU,OAAO,CAACM,IAAR,CAAaF,KAAK,CAACG,IAAnB,CAFpC,CAAJ,EAGE;AAEER,UAAAA,OAAO,CAACS,MAAR,CAAe;AACXN,YAAAA,IADW;AAEXO,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AAjBE,KAAP;AAqBH;;AAlDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Disallow string concatenation when using __dirname and __filename\r\n * @author Nicholas C. Zakas\r\n * @deprecated in ESLint v7.0.0\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        deprecated: true,\r\n\r\n        replacedBy: [],\r\n\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow string concatenation with `__dirname` and `__filename`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-path-concat\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            usePathFunctions: \"Use path.join() or path.resolve() instead of + to create paths.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const MATCHER = /^__(?:dir|file)name$/u;\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            BinaryExpression(node) {\r\n\r\n                const left = node.left,\r\n                    right = node.right;\r\n\r\n                if (node.operator === \"+\" &&\r\n                        ((left.type === \"Identifier\" && MATCHER.test(left.name)) ||\r\n                        (right.type === \"Identifier\" && MATCHER.test(right.name)))\r\n                ) {\r\n\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"usePathFunctions\"\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}