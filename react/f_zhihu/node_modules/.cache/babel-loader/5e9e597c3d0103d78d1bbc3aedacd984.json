{"ast":null,"code":"/**\r\n * @fileoverview enforce the location of single-line statements\r\n * @author Teddy Katz\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst POSITION_SCHEMA = {\n  enum: [\"beside\", \"below\", \"any\"]\n};\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce the location of single-line statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n    },\n    fixable: \"whitespace\",\n    schema: [POSITION_SCHEMA, {\n      properties: {\n        overrides: {\n          properties: {\n            if: POSITION_SCHEMA,\n            else: POSITION_SCHEMA,\n            while: POSITION_SCHEMA,\n            do: POSITION_SCHEMA,\n            for: POSITION_SCHEMA\n          },\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expectNoLinebreak: \"Expected no linebreak before this statement.\",\n      expectLinebreak: \"Expected a linebreak before this statement.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\r\n     * Gets the applicable preference for a particular keyword\r\n     * @param {string} keywordName The name of a keyword, e.g. 'if'\r\n     * @returns {string} The applicable option for the keyword, e.g. 'beside'\r\n     */\n\n    function getOption(keywordName) {\n      return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] || context.options[0] || \"beside\";\n    }\n    /**\r\n     * Validates the location of a single-line statement\r\n     * @param {ASTNode} node The single-line statement\r\n     * @param {string} keywordName The applicable keyword name for the single-line statement\r\n     * @returns {void}\r\n     */\n\n\n    function validateStatement(node, keywordName) {\n      const option = getOption(keywordName);\n\n      if (node.type === \"BlockStatement\" || option === \"any\") {\n        return;\n      }\n\n      const tokenBefore = sourceCode.getTokenBefore(node);\n\n      if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\n        context.report({\n          node,\n          messageId: \"expectLinebreak\",\n          fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n        });\n      } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n        context.report({\n          node,\n          messageId: \"expectNoLinebreak\",\n\n          fix(fixer) {\n            if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\n              return null;\n            }\n\n            return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\n          }\n\n        });\n      }\n    } //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n\n    return {\n      IfStatement(node) {\n        validateStatement(node.consequent, \"if\"); // Check the `else` node, but don't check 'else if' statements.\n\n        if (node.alternate && node.alternate.type !== \"IfStatement\") {\n          validateStatement(node.alternate, \"else\");\n        }\n      },\n\n      WhileStatement: node => validateStatement(node.body, \"while\"),\n      DoWhileStatement: node => validateStatement(node.body, \"do\"),\n      ForStatement: node => validateStatement(node.body, \"for\"),\n      ForInStatement: node => validateStatement(node.body, \"for\"),\n      ForOfStatement: node => validateStatement(node.body, \"for\")\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/nonblock-statement-body-position.js"],"names":["POSITION_SCHEMA","enum","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","overrides","if","else","while","do","for","additionalProperties","messages","expectNoLinebreak","expectLinebreak","create","context","sourceCode","getSourceCode","getOption","keywordName","options","validateStatement","node","option","tokenBefore","getTokenBefore","loc","end","line","start","report","messageId","fix","fixer","insertTextBefore","getText","slice","range","trim","replaceTextRange","IfStatement","consequent","alternate","WhileStatement","body","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview enforce the location of single-line statements\r\n * @author Teddy Katz\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\nconst POSITION_SCHEMA = { enum: [\"beside\", \"below\", \"any\"] };\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce the location of single-line statements\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            POSITION_SCHEMA,\r\n            {\r\n                properties: {\r\n                    overrides: {\r\n                        properties: {\r\n                            if: POSITION_SCHEMA,\r\n                            else: POSITION_SCHEMA,\r\n                            while: POSITION_SCHEMA,\r\n                            do: POSITION_SCHEMA,\r\n                            for: POSITION_SCHEMA\r\n                        },\r\n                        additionalProperties: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            expectNoLinebreak: \"Expected no linebreak before this statement.\",\r\n            expectLinebreak: \"Expected a linebreak before this statement.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        //----------------------------------------------------------------------\r\n        // Helpers\r\n        //----------------------------------------------------------------------\r\n\r\n        /**\r\n         * Gets the applicable preference for a particular keyword\r\n         * @param {string} keywordName The name of a keyword, e.g. 'if'\r\n         * @returns {string} The applicable option for the keyword, e.g. 'beside'\r\n         */\r\n        function getOption(keywordName) {\r\n            return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] ||\r\n                context.options[0] ||\r\n                \"beside\";\r\n        }\r\n\r\n        /**\r\n         * Validates the location of a single-line statement\r\n         * @param {ASTNode} node The single-line statement\r\n         * @param {string} keywordName The applicable keyword name for the single-line statement\r\n         * @returns {void}\r\n         */\r\n        function validateStatement(node, keywordName) {\r\n            const option = getOption(keywordName);\r\n\r\n            if (node.type === \"BlockStatement\" || option === \"any\") {\r\n                return;\r\n            }\r\n\r\n            const tokenBefore = sourceCode.getTokenBefore(node);\r\n\r\n            if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"expectLinebreak\",\r\n                    fix: fixer => fixer.insertTextBefore(node, \"\\n\")\r\n                });\r\n            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"expectNoLinebreak\",\r\n                    fix(fixer) {\r\n                        if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\r\n                            return null;\r\n                        }\r\n                        return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        //----------------------------------------------------------------------\r\n        // Public\r\n        //----------------------------------------------------------------------\r\n\r\n        return {\r\n            IfStatement(node) {\r\n                validateStatement(node.consequent, \"if\");\r\n\r\n                // Check the `else` node, but don't check 'else if' statements.\r\n                if (node.alternate && node.alternate.type !== \"IfStatement\") {\r\n                    validateStatement(node.alternate, \"else\");\r\n                }\r\n            },\r\n            WhileStatement: node => validateStatement(node.body, \"while\"),\r\n            DoWhileStatement: node => validateStatement(node.body, \"do\"),\r\n            ForStatement: node => validateStatement(node.body, \"for\"),\r\n            ForInStatement: node => validateStatement(node.body, \"for\"),\r\n            ForOfStatement: node => validateStatement(node.body, \"for\")\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}