{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag the generator functions that does not have yield.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require generator functions to contain `yield`\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/require-yield\"\n    },\n    schema: [],\n    messages: {\n      missingYield: \"This generator function does not have 'yield'.\"\n    }\n  },\n\n  create(context) {\n    const stack = [];\n    /**\r\n     * If the node is a generator function, start counting `yield` keywords.\r\n     * @param {Node} node A function node to check.\r\n     * @returns {void}\r\n     */\n\n    function beginChecking(node) {\n      if (node.generator) {\n        stack.push(0);\n      }\n    }\n    /**\r\n     * If the node is a generator function, end counting `yield` keywords, then\r\n     * reports result.\r\n     * @param {Node} node A function node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function endChecking(node) {\n      if (!node.generator) {\n        return;\n      }\n\n      const countYield = stack.pop();\n\n      if (countYield === 0 && node.body.body.length > 0) {\n        context.report({\n          node,\n          messageId: \"missingYield\"\n        });\n      }\n    }\n\n    return {\n      FunctionDeclaration: beginChecking,\n      \"FunctionDeclaration:exit\": endChecking,\n      FunctionExpression: beginChecking,\n      \"FunctionExpression:exit\": endChecking,\n\n      // Increases the count of `yield` keyword.\n      YieldExpression() {\n        /* istanbul ignore else */\n        if (stack.length > 0) {\n          stack[stack.length - 1] += 1;\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/require-yield.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","missingYield","create","context","stack","beginChecking","node","generator","push","endChecking","countYield","pop","body","length","report","messageId","FunctionDeclaration","FunctionExpression","YieldExpression"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,KAAK,GAAG,EAAd;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,UAAIA,IAAI,CAACC,SAAT,EAAoB;AAChBH,QAAAA,KAAK,CAACI,IAAN,CAAW,CAAX;AACH;AACJ;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASC,WAAT,CAAqBH,IAArB,EAA2B;AACvB,UAAI,CAACA,IAAI,CAACC,SAAV,EAAqB;AACjB;AACH;;AAED,YAAMG,UAAU,GAAGN,KAAK,CAACO,GAAN,EAAnB;;AAEA,UAAID,UAAU,KAAK,CAAf,IAAoBJ,IAAI,CAACM,IAAL,CAAUA,IAAV,CAAeC,MAAf,GAAwB,CAAhD,EAAmD;AAC/CV,QAAAA,OAAO,CAACW,MAAR,CAAe;AAAER,UAAAA,IAAF;AAAQS,UAAAA,SAAS,EAAE;AAAnB,SAAf;AACH;AACJ;;AAED,WAAO;AACHC,MAAAA,mBAAmB,EAAEX,aADlB;AAEH,kCAA4BI,WAFzB;AAGHQ,MAAAA,kBAAkB,EAAEZ,aAHjB;AAIH,iCAA2BI,WAJxB;;AAMH;AACAS,MAAAA,eAAe,GAAG;AAEd;AACA,YAAId,KAAK,CAACS,MAAN,GAAe,CAAnB,EAAsB;AAClBT,UAAAA,KAAK,CAACA,KAAK,CAACS,MAAN,GAAe,CAAhB,CAAL,IAA2B,CAA3B;AACH;AACJ;;AAbE,KAAP;AAeH;;AAhEY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag the generator functions that does not have yield.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require generator functions to contain `yield`\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/require-yield\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            missingYield: \"This generator function does not have 'yield'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const stack = [];\r\n\r\n        /**\r\n         * If the node is a generator function, start counting `yield` keywords.\r\n         * @param {Node} node A function node to check.\r\n         * @returns {void}\r\n         */\r\n        function beginChecking(node) {\r\n            if (node.generator) {\r\n                stack.push(0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * If the node is a generator function, end counting `yield` keywords, then\r\n         * reports result.\r\n         * @param {Node} node A function node to check.\r\n         * @returns {void}\r\n         */\r\n        function endChecking(node) {\r\n            if (!node.generator) {\r\n                return;\r\n            }\r\n\r\n            const countYield = stack.pop();\r\n\r\n            if (countYield === 0 && node.body.body.length > 0) {\r\n                context.report({ node, messageId: \"missingYield\" });\r\n            }\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: beginChecking,\r\n            \"FunctionDeclaration:exit\": endChecking,\r\n            FunctionExpression: beginChecking,\r\n            \"FunctionExpression:exit\": endChecking,\r\n\r\n            // Increases the count of `yield` keyword.\r\n            YieldExpression() {\r\n\r\n                /* istanbul ignore else */\r\n                if (stack.length > 0) {\r\n                    stack[stack.length - 1] += 1;\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}