{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag comparison where left part is the same as the right\r\n * part.\r\n * @author Ilya Volodin\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow comparisons where both sides are exactly the same\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-self-compare\"\n    },\n    schema: [],\n    messages: {\n      comparingToSelf: \"Comparing to itself is potentially pointless.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Determines whether two nodes are composed of the same tokens.\r\n     * @param {ASTNode} nodeA The first node\r\n     * @param {ASTNode} nodeB The second node\r\n     * @returns {boolean} true if the nodes have identical token representations\r\n     */\n\n    function hasSameTokens(nodeA, nodeB) {\n      const tokensA = sourceCode.getTokens(nodeA);\n      const tokensB = sourceCode.getTokens(nodeB);\n      return tokensA.length === tokensB.length && tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n    }\n\n    return {\n      BinaryExpression(node) {\n        const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n\n        if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n          context.report({\n            node,\n            messageId: \"comparingToSelf\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-self-compare.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","comparingToSelf","create","context","sourceCode","getSourceCode","hasSameTokens","nodeA","nodeB","tokensA","getTokens","tokensB","length","every","token","index","value","BinaryExpression","node","operators","Set","has","operator","left","right","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,4DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,aAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACjC,YAAMC,OAAO,GAAGL,UAAU,CAACM,SAAX,CAAqBH,KAArB,CAAhB;AACA,YAAMI,OAAO,GAAGP,UAAU,CAACM,SAAX,CAAqBF,KAArB,CAAhB;AAEA,aAAOC,OAAO,CAACG,MAAR,KAAmBD,OAAO,CAACC,MAA3B,IACHH,OAAO,CAACI,KAAR,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACpB,IAAN,KAAeiB,OAAO,CAACI,KAAD,CAAP,CAAerB,IAA9B,IAAsCoB,KAAK,CAACE,KAAN,KAAgBL,OAAO,CAACI,KAAD,CAAP,CAAeC,KAArG,CADJ;AAEH;;AAED,WAAO;AAEHC,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,cAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,IAA3C,CAAR,CAAlB;;AAEA,YAAID,SAAS,CAACE,GAAV,CAAcH,IAAI,CAACI,QAAnB,KAAgChB,aAAa,CAACY,IAAI,CAACK,IAAN,EAAYL,IAAI,CAACM,KAAjB,CAAjD,EAA0E;AACtErB,UAAAA,OAAO,CAACsB,MAAR,CAAe;AAAEP,YAAAA,IAAF;AAAQQ,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH;AACJ;;AARE,KAAP;AAWH;;AA7CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag comparison where left part is the same as the right\r\n * part.\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow comparisons where both sides are exactly the same\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-self-compare\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            comparingToSelf: \"Comparing to itself is potentially pointless.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Determines whether two nodes are composed of the same tokens.\r\n         * @param {ASTNode} nodeA The first node\r\n         * @param {ASTNode} nodeB The second node\r\n         * @returns {boolean} true if the nodes have identical token representations\r\n         */\r\n        function hasSameTokens(nodeA, nodeB) {\r\n            const tokensA = sourceCode.getTokens(nodeA);\r\n            const tokensB = sourceCode.getTokens(nodeB);\r\n\r\n            return tokensA.length === tokensB.length &&\r\n                tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\r\n        }\r\n\r\n        return {\r\n\r\n            BinaryExpression(node) {\r\n                const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\r\n\r\n                if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\r\n                    context.report({ node, messageId: \"comparingToSelf\" });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}