{"ast":null,"code":"/**\r\n * @fileoverview Rule to check that spaced function application\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n * @deprecated in ESLint v3.3.0\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow spacing between function identifiers and their applications (deprecated)\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-spaced-func\"\n    },\n    deprecated: true,\n    replacedBy: [\"func-call-spacing\"],\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      noSpacedFunction: \"Unexpected space between function name and paren.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Check if open space is present in a function name\r\n     * @param {ASTNode} node node to evaluate\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function detectOpenSpaces(node) {\n      const lastCalleeToken = sourceCode.getLastToken(node.callee);\n      let prevToken = lastCalleeToken,\n          parenToken = sourceCode.getTokenAfter(lastCalleeToken); // advances to an open parenthesis.\n\n      while (parenToken && parenToken.range[1] < node.range[1] && parenToken.value !== \"(\") {\n        prevToken = parenToken;\n        parenToken = sourceCode.getTokenAfter(parenToken);\n      } // look for a space between the callee and the open paren\n\n\n      if (parenToken && parenToken.range[1] < node.range[1] && sourceCode.isSpaceBetweenTokens(prevToken, parenToken)) {\n        context.report({\n          node,\n          loc: lastCalleeToken.loc.start,\n          messageId: \"noSpacedFunction\",\n\n          fix(fixer) {\n            return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n          }\n\n        });\n      }\n    }\n\n    return {\n      CallExpression: detectOpenSpaces,\n      NewExpression: detectOpenSpaces\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-spaced-func.js"],"names":["module","exports","meta","type","docs","description","recommended","url","deprecated","replacedBy","fixable","schema","messages","noSpacedFunction","create","context","sourceCode","getSourceCode","detectOpenSpaces","node","lastCalleeToken","getLastToken","callee","prevToken","parenToken","getTokenAfter","range","value","isSpaceBetweenTokens","report","loc","start","messageId","fix","fixer","removeRange","CallExpression","NewExpression"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mFADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,UAAU,EAAE,IATV;AAWFC,IAAAA,UAAU,EAAE,CAAC,mBAAD,CAXV;AAaFC,IAAAA,OAAO,EAAE,YAbP;AAcFC,IAAAA,MAAM,EAAE,EAdN;AAgBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE;AADZ;AAhBR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,aAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,YAAMC,eAAe,GAAGJ,UAAU,CAACK,YAAX,CAAwBF,IAAI,CAACG,MAA7B,CAAxB;AACA,UAAIC,SAAS,GAAGH,eAAhB;AAAA,UACII,UAAU,GAAGR,UAAU,CAACS,aAAX,CAAyBL,eAAzB,CADjB,CAF4B,CAK5B;;AACA,aACII,UAAU,IACVA,UAAU,CAACE,KAAX,CAAiB,CAAjB,IAAsBP,IAAI,CAACO,KAAL,CAAW,CAAX,CADtB,IAEAF,UAAU,CAACG,KAAX,KAAqB,GAHzB,EAIE;AACEJ,QAAAA,SAAS,GAAGC,UAAZ;AACAA,QAAAA,UAAU,GAAGR,UAAU,CAACS,aAAX,CAAyBD,UAAzB,CAAb;AACH,OAb2B,CAe5B;;;AACA,UAAIA,UAAU,IACVA,UAAU,CAACE,KAAX,CAAiB,CAAjB,IAAsBP,IAAI,CAACO,KAAL,CAAW,CAAX,CADtB,IAEAV,UAAU,CAACY,oBAAX,CAAgCL,SAAhC,EAA2CC,UAA3C,CAFJ,EAGE;AACET,QAAAA,OAAO,CAACc,MAAR,CAAe;AACXV,UAAAA,IADW;AAEXW,UAAAA,GAAG,EAAEV,eAAe,CAACU,GAAhB,CAAoBC,KAFd;AAGXC,UAAAA,SAAS,EAAE,kBAHA;;AAIXC,UAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,mBAAOA,KAAK,CAACC,WAAN,CAAkB,CAACZ,SAAS,CAACG,KAAV,CAAgB,CAAhB,CAAD,EAAqBF,UAAU,CAACE,KAAX,CAAiB,CAAjB,CAArB,CAAlB,CAAP;AACH;;AANU,SAAf;AAQH;AACJ;;AAED,WAAO;AACHU,MAAAA,cAAc,EAAElB,gBADb;AAEHmB,MAAAA,aAAa,EAAEnB;AAFZ,KAAP;AAKH;;AApEY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to check that spaced function application\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n * @deprecated in ESLint v3.3.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"disallow spacing between function identifiers and their applications (deprecated)\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-spaced-func\"\r\n        },\r\n\r\n        deprecated: true,\r\n\r\n        replacedBy: [\"func-call-spacing\"],\r\n\r\n        fixable: \"whitespace\",\r\n        schema: [],\r\n\r\n        messages: {\r\n            noSpacedFunction: \"Unexpected space between function name and paren.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Check if open space is present in a function name\r\n         * @param {ASTNode} node node to evaluate\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function detectOpenSpaces(node) {\r\n            const lastCalleeToken = sourceCode.getLastToken(node.callee);\r\n            let prevToken = lastCalleeToken,\r\n                parenToken = sourceCode.getTokenAfter(lastCalleeToken);\r\n\r\n            // advances to an open parenthesis.\r\n            while (\r\n                parenToken &&\r\n                parenToken.range[1] < node.range[1] &&\r\n                parenToken.value !== \"(\"\r\n            ) {\r\n                prevToken = parenToken;\r\n                parenToken = sourceCode.getTokenAfter(parenToken);\r\n            }\r\n\r\n            // look for a space between the callee and the open paren\r\n            if (parenToken &&\r\n                parenToken.range[1] < node.range[1] &&\r\n                sourceCode.isSpaceBetweenTokens(prevToken, parenToken)\r\n            ) {\r\n                context.report({\r\n                    node,\r\n                    loc: lastCalleeToken.loc.start,\r\n                    messageId: \"noSpacedFunction\",\r\n                    fix(fixer) {\r\n                        return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            CallExpression: detectOpenSpaces,\r\n            NewExpression: detectOpenSpaces\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}