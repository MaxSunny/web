{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce placing object properties on separate lines.\r\n * @author Vitor Balocco\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce placing object properties on separate lines\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-property-newline\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowAllPropertiesOnSameLine: {\n          type: \"boolean\",\n          default: false\n        },\n        allowMultiplePropertiesPerLine: {\n          // Deprecated\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\n      propertiesOnNewline: \"Object properties must go on a new line.\"\n    }\n  },\n\n  create(context) {\n    const allowSameLine = context.options[0] && (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine\n    /* Deprecated */\n    );\n    const messageId = allowSameLine ? \"propertiesOnNewlineAll\" : \"propertiesOnNewline\";\n    const sourceCode = context.getSourceCode();\n    return {\n      ObjectExpression(node) {\n        if (allowSameLine) {\n          if (node.properties.length > 1) {\n            const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\n            const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\n\n            if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\n              // All keys and values are on the same line\n              return;\n            }\n          }\n        }\n\n        for (let i = 1; i < node.properties.length; i++) {\n          const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\n          const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\n\n          if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\n            context.report({\n              node,\n              loc: firstTokenOfCurrentProperty.loc,\n              messageId,\n\n              fix(fixer) {\n                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\n                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]]; // Don't perform a fix if there are any comments between the comma and the next property.\n\n                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\n                  return null;\n                }\n\n                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\n              }\n\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/object-property-newline.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","allowAllPropertiesOnSameLine","default","allowMultiplePropertiesPerLine","additionalProperties","fixable","messages","propertiesOnNewlineAll","propertiesOnNewline","create","context","allowSameLine","options","messageId","sourceCode","getSourceCode","ObjectExpression","node","length","firstTokenOfFirstProperty","getFirstToken","lastTokenOfLastProperty","getLastToken","loc","end","line","start","i","lastTokenOfPreviousProperty","firstTokenOfCurrentProperty","report","fix","fixer","comma","getTokenBefore","rangeAfterComma","range","text","slice","trim","replaceTextRange"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce placing object properties on separate lines.\r\n * @author Vitor Balocco\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce placing object properties on separate lines\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/object-property-newline\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allowAllPropertiesOnSameLine: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    },\r\n                    allowMultiplePropertiesPerLine: { // Deprecated\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        messages: {\r\n            propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\r\n            propertiesOnNewline: \"Object properties must go on a new line.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const allowSameLine = context.options[0] && (\r\n            (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine /* Deprecated */)\r\n        );\r\n        const messageId = allowSameLine\r\n            ? \"propertiesOnNewlineAll\"\r\n            : \"propertiesOnNewline\";\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n            ObjectExpression(node) {\r\n                if (allowSameLine) {\r\n                    if (node.properties.length > 1) {\r\n                        const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\r\n                        const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\r\n\r\n                        if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\r\n\r\n                            // All keys and values are on the same line\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i = 1; i < node.properties.length; i++) {\r\n                    const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\r\n                    const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\r\n\r\n                    if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\r\n                        context.report({\r\n                            node,\r\n                            loc: firstTokenOfCurrentProperty.loc,\r\n                            messageId,\r\n                            fix(fixer) {\r\n                                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\r\n                                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]];\r\n\r\n                                // Don't perform a fix if there are any comments between the comma and the next property.\r\n                                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\r\n                                    return null;\r\n                                }\r\n\r\n                                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}