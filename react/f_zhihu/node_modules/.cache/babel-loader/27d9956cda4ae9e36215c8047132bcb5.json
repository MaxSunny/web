{"ast":null,"code":"/**\r\n * @fileoverview An object that creates fix commands for rules.\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n// none!\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Creates a fix command that inserts text at the specified index in the source text.\r\n * @param {int} index The 0-based index at which to insert the new text.\r\n * @param {string} text The text to insert.\r\n * @returns {Object} The fix command.\r\n * @private\r\n */\n\nfunction insertTextAt(index, text) {\n  return {\n    range: [index, index],\n    text\n  };\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\r\n * Creates code fixing commands for rules.\r\n */\n\n\nconst ruleFixer = Object.freeze({\n  /**\r\n   * Creates a fix command that inserts text after the given node or token.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  insertTextAfter(nodeOrToken, text) {\n    return this.insertTextAfterRange(nodeOrToken.range, text);\n  },\n\n  /**\r\n   * Creates a fix command that inserts text after the specified range in the source text.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {int[]} range The range to replace, first item is start of range, second\r\n   *      is end of range.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  insertTextAfterRange(range, text) {\n    return insertTextAt(range[1], text);\n  },\n\n  /**\r\n   * Creates a fix command that inserts text before the given node or token.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  insertTextBefore(nodeOrToken, text) {\n    return this.insertTextBeforeRange(nodeOrToken.range, text);\n  },\n\n  /**\r\n   * Creates a fix command that inserts text before the specified range in the source text.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {int[]} range The range to replace, first item is start of range, second\r\n   *      is end of range.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  insertTextBeforeRange(range, text) {\n    return insertTextAt(range[0], text);\n  },\n\n  /**\r\n   * Creates a fix command that replaces text at the node or token.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {ASTNode|Token} nodeOrToken The node or token to remove.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  replaceText(nodeOrToken, text) {\n    return this.replaceTextRange(nodeOrToken.range, text);\n  },\n\n  /**\r\n   * Creates a fix command that replaces text at the specified range in the source text.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {int[]} range The range to replace, first item is start of range, second\r\n   *      is end of range.\r\n   * @param {string} text The text to insert.\r\n   * @returns {Object} The fix command.\r\n   */\n  replaceTextRange(range, text) {\n    return {\n      range,\n      text\n    };\n  },\n\n  /**\r\n   * Creates a fix command that removes the node or token from the source.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {ASTNode|Token} nodeOrToken The node or token to remove.\r\n   * @returns {Object} The fix command.\r\n   */\n  remove(nodeOrToken) {\n    return this.removeRange(nodeOrToken.range);\n  },\n\n  /**\r\n   * Creates a fix command that removes the specified range of text from the source.\r\n   * The fix is not applied until applyFixes() is called.\r\n   * @param {int[]} range The range to remove, first item is start of range, second\r\n   *      is end of range.\r\n   * @returns {Object} The fix command.\r\n   */\n  removeRange(range) {\n    return {\n      range,\n      text: \"\"\n    };\n  }\n\n});\nmodule.exports = ruleFixer;","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/linter/rule-fixer.js"],"names":["insertTextAt","index","text","range","ruleFixer","Object","freeze","insertTextAfter","nodeOrToken","insertTextAfterRange","insertTextBefore","insertTextBeforeRange","replaceText","replaceTextRange","remove","removeRange","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAE,CAACF,KAAD,EAAQA,KAAR,CADJ;AAEHC,IAAAA;AAFG,GAAP;AAIH,C,CAED;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,MAAME,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc;AAE5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,eAAe,CAACC,WAAD,EAAcN,IAAd,EAAoB;AAC/B,WAAO,KAAKO,oBAAL,CAA0BD,WAAW,CAACL,KAAtC,EAA6CD,IAA7C,CAAP;AACH,GAX2B;;AAa5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIO,EAAAA,oBAAoB,CAACN,KAAD,EAAQD,IAAR,EAAc;AAC9B,WAAOF,YAAY,CAACG,KAAK,CAAC,CAAD,CAAN,EAAWD,IAAX,CAAnB;AACH,GAvB2B;;AAyB5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIQ,EAAAA,gBAAgB,CAACF,WAAD,EAAcN,IAAd,EAAoB;AAChC,WAAO,KAAKS,qBAAL,CAA2BH,WAAW,CAACL,KAAvC,EAA8CD,IAA9C,CAAP;AACH,GAlC2B;;AAoC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIS,EAAAA,qBAAqB,CAACR,KAAD,EAAQD,IAAR,EAAc;AAC/B,WAAOF,YAAY,CAACG,KAAK,CAAC,CAAD,CAAN,EAAWD,IAAX,CAAnB;AACH,GA9C2B;;AAgD5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIU,EAAAA,WAAW,CAACJ,WAAD,EAAcN,IAAd,EAAoB;AAC3B,WAAO,KAAKW,gBAAL,CAAsBL,WAAW,CAACL,KAAlC,EAAyCD,IAAzC,CAAP;AACH,GAzD2B;;AA2D5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIW,EAAAA,gBAAgB,CAACV,KAAD,EAAQD,IAAR,EAAc;AAC1B,WAAO;AACHC,MAAAA,KADG;AAEHD,MAAAA;AAFG,KAAP;AAIH,GAxE2B;;AA0E5B;AACJ;AACA;AACA;AACA;AACA;AACIY,EAAAA,MAAM,CAACN,WAAD,EAAc;AAChB,WAAO,KAAKO,WAAL,CAAiBP,WAAW,CAACL,KAA7B,CAAP;AACH,GAlF2B;;AAoF5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIY,EAAAA,WAAW,CAACZ,KAAD,EAAQ;AACf,WAAO;AACHA,MAAAA,KADG;AAEHD,MAAAA,IAAI,EAAE;AAFH,KAAP;AAIH;;AAhG2B,CAAd,CAAlB;AAqGAc,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["/**\r\n * @fileoverview An object that creates fix commands for rules.\r\n * @author Nicholas C. Zakas\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\n// none!\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Creates a fix command that inserts text at the specified index in the source text.\r\n * @param {int} index The 0-based index at which to insert the new text.\r\n * @param {string} text The text to insert.\r\n * @returns {Object} The fix command.\r\n * @private\r\n */\r\nfunction insertTextAt(index, text) {\r\n    return {\r\n        range: [index, index],\r\n        text\r\n    };\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Public Interface\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Creates code fixing commands for rules.\r\n */\r\n\r\nconst ruleFixer = Object.freeze({\r\n\r\n    /**\r\n     * Creates a fix command that inserts text after the given node or token.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    insertTextAfter(nodeOrToken, text) {\r\n        return this.insertTextAfterRange(nodeOrToken.range, text);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that inserts text after the specified range in the source text.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {int[]} range The range to replace, first item is start of range, second\r\n     *      is end of range.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    insertTextAfterRange(range, text) {\r\n        return insertTextAt(range[1], text);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that inserts text before the given node or token.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    insertTextBefore(nodeOrToken, text) {\r\n        return this.insertTextBeforeRange(nodeOrToken.range, text);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that inserts text before the specified range in the source text.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {int[]} range The range to replace, first item is start of range, second\r\n     *      is end of range.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    insertTextBeforeRange(range, text) {\r\n        return insertTextAt(range[0], text);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that replaces text at the node or token.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    replaceText(nodeOrToken, text) {\r\n        return this.replaceTextRange(nodeOrToken.range, text);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that replaces text at the specified range in the source text.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {int[]} range The range to replace, first item is start of range, second\r\n     *      is end of range.\r\n     * @param {string} text The text to insert.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    replaceTextRange(range, text) {\r\n        return {\r\n            range,\r\n            text\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that removes the node or token from the source.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    remove(nodeOrToken) {\r\n        return this.removeRange(nodeOrToken.range);\r\n    },\r\n\r\n    /**\r\n     * Creates a fix command that removes the specified range of text from the source.\r\n     * The fix is not applied until applyFixes() is called.\r\n     * @param {int[]} range The range to remove, first item is start of range, second\r\n     *      is end of range.\r\n     * @returns {Object} The fix command.\r\n     */\r\n    removeRange(range) {\r\n        return {\r\n            range,\r\n            text: \"\"\r\n        };\r\n    }\r\n\r\n});\r\n\r\n\r\nmodule.exports = ruleFixer;\r\n"]},"metadata":{},"sourceType":"script"}