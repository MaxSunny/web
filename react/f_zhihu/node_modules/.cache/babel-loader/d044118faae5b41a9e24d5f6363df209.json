{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce spacing around colons of switch statements.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce spacing around colons of switch statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/switch-colon-spacing\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      expectedBefore: \"Expected space(s) before this colon.\",\n      expectedAfter: \"Expected space(s) after this colon.\",\n      unexpectedBefore: \"Unexpected space(s) before this colon.\",\n      unexpectedAfter: \"Unexpected space(s) after this colon.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const options = context.options[0] || {};\n    const beforeSpacing = options.before === true; // false by default\n\n    const afterSpacing = options.after !== false; // true by default\n\n    /**\r\n     * Check whether the spacing between the given 2 tokens is valid or not.\r\n     * @param {Token} left The left token to check.\r\n     * @param {Token} right The right token to check.\r\n     * @param {boolean} expected The expected spacing to check. `true` if there should be a space.\r\n     * @returns {boolean} `true` if the spacing between the tokens is valid.\r\n     */\n\n    function isValidSpacing(left, right, expected) {\n      return astUtils.isClosingBraceToken(right) || !astUtils.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === expected;\n    }\n    /**\r\n     * Check whether comments exist between the given 2 tokens.\r\n     * @param {Token} left The left token to check.\r\n     * @param {Token} right The right token to check.\r\n     * @returns {boolean} `true` if comments exist between the given 2 tokens.\r\n     */\n\n\n    function commentsExistBetween(left, right) {\n      return sourceCode.getFirstTokenBetween(left, right, {\n        includeComments: true,\n        filter: astUtils.isCommentToken\n      }) !== null;\n    }\n    /**\r\n     * Fix the spacing between the given 2 tokens.\r\n     * @param {RuleFixer} fixer The fixer to fix.\r\n     * @param {Token} left The left token of fix range.\r\n     * @param {Token} right The right token of fix range.\r\n     * @param {boolean} spacing The spacing style. `true` if there should be a space.\r\n     * @returns {Fix|null} The fix object.\r\n     */\n\n\n    function fix(fixer, left, right, spacing) {\n      if (commentsExistBetween(left, right)) {\n        return null;\n      }\n\n      if (spacing) {\n        return fixer.insertTextAfter(left, \" \");\n      }\n\n      return fixer.removeRange([left.range[1], right.range[0]]);\n    }\n\n    return {\n      SwitchCase(node) {\n        const colonToken = astUtils.getSwitchCaseColonToken(node, sourceCode);\n        const beforeToken = sourceCode.getTokenBefore(colonToken);\n        const afterToken = sourceCode.getTokenAfter(colonToken);\n\n        if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {\n          context.report({\n            node,\n            loc: colonToken.loc,\n            messageId: beforeSpacing ? \"expectedBefore\" : \"unexpectedBefore\",\n            fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)\n          });\n        }\n\n        if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {\n          context.report({\n            node,\n            loc: colonToken.loc,\n            messageId: afterSpacing ? \"expectedAfter\" : \"unexpectedAfter\",\n            fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/switch-colon-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","before","default","after","additionalProperties","fixable","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","options","beforeSpacing","afterSpacing","isValidSpacing","left","right","expected","isClosingBraceToken","isTokenOnSameLine","isSpaceBetweenTokens","commentsExistBetween","getFirstTokenBetween","includeComments","filter","isCommentToken","fix","fixer","spacing","insertTextAfter","removeRange","range","SwitchCase","node","colonToken","getSwitchCaseColonToken","beforeToken","getTokenBefore","afterToken","getTokenAfter","report","loc","messageId"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce spacing around colons of switch statements.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce spacing around colons of switch statements\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/switch-colon-spacing\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    before: { type: \"boolean\", default: false },\r\n                    after: { type: \"boolean\", default: true }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n        fixable: \"whitespace\",\r\n        messages: {\r\n            expectedBefore: \"Expected space(s) before this colon.\",\r\n            expectedAfter: \"Expected space(s) after this colon.\",\r\n            unexpectedBefore: \"Unexpected space(s) before this colon.\",\r\n            unexpectedAfter: \"Unexpected space(s) after this colon.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const options = context.options[0] || {};\r\n        const beforeSpacing = options.before === true; // false by default\r\n        const afterSpacing = options.after !== false; // true by default\r\n\r\n        /**\r\n         * Check whether the spacing between the given 2 tokens is valid or not.\r\n         * @param {Token} left The left token to check.\r\n         * @param {Token} right The right token to check.\r\n         * @param {boolean} expected The expected spacing to check. `true` if there should be a space.\r\n         * @returns {boolean} `true` if the spacing between the tokens is valid.\r\n         */\r\n        function isValidSpacing(left, right, expected) {\r\n            return (\r\n                astUtils.isClosingBraceToken(right) ||\r\n                !astUtils.isTokenOnSameLine(left, right) ||\r\n                sourceCode.isSpaceBetweenTokens(left, right) === expected\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Check whether comments exist between the given 2 tokens.\r\n         * @param {Token} left The left token to check.\r\n         * @param {Token} right The right token to check.\r\n         * @returns {boolean} `true` if comments exist between the given 2 tokens.\r\n         */\r\n        function commentsExistBetween(left, right) {\r\n            return sourceCode.getFirstTokenBetween(\r\n                left,\r\n                right,\r\n                {\r\n                    includeComments: true,\r\n                    filter: astUtils.isCommentToken\r\n                }\r\n            ) !== null;\r\n        }\r\n\r\n        /**\r\n         * Fix the spacing between the given 2 tokens.\r\n         * @param {RuleFixer} fixer The fixer to fix.\r\n         * @param {Token} left The left token of fix range.\r\n         * @param {Token} right The right token of fix range.\r\n         * @param {boolean} spacing The spacing style. `true` if there should be a space.\r\n         * @returns {Fix|null} The fix object.\r\n         */\r\n        function fix(fixer, left, right, spacing) {\r\n            if (commentsExistBetween(left, right)) {\r\n                return null;\r\n            }\r\n            if (spacing) {\r\n                return fixer.insertTextAfter(left, \" \");\r\n            }\r\n            return fixer.removeRange([left.range[1], right.range[0]]);\r\n        }\r\n\r\n        return {\r\n            SwitchCase(node) {\r\n                const colonToken = astUtils.getSwitchCaseColonToken(node, sourceCode);\r\n                const beforeToken = sourceCode.getTokenBefore(colonToken);\r\n                const afterToken = sourceCode.getTokenAfter(colonToken);\r\n\r\n                if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {\r\n                    context.report({\r\n                        node,\r\n                        loc: colonToken.loc,\r\n                        messageId: beforeSpacing ? \"expectedBefore\" : \"unexpectedBefore\",\r\n                        fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)\r\n                    });\r\n                }\r\n                if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {\r\n                    context.report({\r\n                        node,\r\n                        loc: colonToken.loc,\r\n                        messageId: afterSpacing ? \"expectedAfter\" : \"unexpectedAfter\",\r\n                        fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}