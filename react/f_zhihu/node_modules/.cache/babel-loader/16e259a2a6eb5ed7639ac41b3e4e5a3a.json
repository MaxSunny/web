{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around embedded expressions of template strings\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before '}'.\",\n      expectedAfter: \"Expected space(s) after '${'.\",\n      unexpectedBefore: \"Unexpected space(s) before '}'.\",\n      unexpectedAfter: \"Unexpected space(s) after '${'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const always = context.options[0] === \"always\";\n    /**\r\n     * Checks spacing before `}` of a given token.\r\n     * @param {Token} token A token to check. This is a Template token.\r\n     * @returns {void}\r\n     */\n\n    function checkSpacingBefore(token) {\n      if (!token.value.startsWith(\"}\")) {\n        return; // starts with a backtick, this is the first template element in the template literal\n      }\n\n      const prevToken = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      }),\n            hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n\n      if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n        return;\n      }\n\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.start,\n            end: {\n              line: token.loc.start.line,\n              column: token.loc.start.column + 1\n            }\n          },\n          messageId: \"expectedBefore\",\n          fix: fixer => fixer.insertTextBefore(token, \" \")\n        });\n      }\n\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: prevToken.loc.end,\n            end: token.loc.start\n          },\n          messageId: \"unexpectedBefore\",\n          fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n        });\n      }\n    }\n    /**\r\n     * Checks spacing after `${` of a given token.\r\n     * @param {Token} token A token to check. This is a Template token.\r\n     * @returns {void}\r\n     */\n\n\n    function checkSpacingAfter(token) {\n      if (!token.value.endsWith(\"${\")) {\n        return; // ends with a backtick, this is the last template element in the template literal\n      }\n\n      const nextToken = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      }),\n            hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n\n      if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n        return;\n      }\n\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: {\n              line: token.loc.end.line,\n              column: token.loc.end.column - 2\n            },\n            end: token.loc.end\n          },\n          messageId: \"expectedAfter\",\n          fix: fixer => fixer.insertTextAfter(token, \" \")\n        });\n      }\n\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedAfter\",\n          fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n        });\n      }\n    }\n\n    return {\n      TemplateElement(node) {\n        const token = sourceCode.getFirstToken(node);\n        checkSpacingBefore(token);\n        checkSpacingAfter(token);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/template-curly-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","always","options","checkSpacingBefore","token","value","startsWith","prevToken","getTokenBefore","includeComments","hasSpace","isSpaceBetween","isTokenOnSameLine","report","loc","start","end","line","column","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpacingAfter","endsWith","nextToken","getTokenAfter","insertTextAfter","TemplateElement","node","getFirstToken"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"require or disallow spacing around embedded expressions of template strings\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/template-curly-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            { enum: [\"always\", \"never\"] }\r\n        ],\r\n        messages: {\r\n            expectedBefore: \"Expected space(s) before '}'.\",\r\n            expectedAfter: \"Expected space(s) after '${'.\",\r\n            unexpectedBefore: \"Unexpected space(s) before '}'.\",\r\n            unexpectedAfter: \"Unexpected space(s) after '${'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const always = context.options[0] === \"always\";\r\n\r\n        /**\r\n         * Checks spacing before `}` of a given token.\r\n         * @param {Token} token A token to check. This is a Template token.\r\n         * @returns {void}\r\n         */\r\n        function checkSpacingBefore(token) {\r\n            if (!token.value.startsWith(\"}\")) {\r\n                return; // starts with a backtick, this is the first template element in the template literal\r\n            }\r\n\r\n            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true }),\r\n                hasSpace = sourceCode.isSpaceBetween(prevToken, token);\r\n\r\n            if (!astUtils.isTokenOnSameLine(prevToken, token)) {\r\n                return;\r\n            }\r\n\r\n            if (always && !hasSpace) {\r\n                context.report({\r\n                    loc: {\r\n                        start: token.loc.start,\r\n                        end: {\r\n                            line: token.loc.start.line,\r\n                            column: token.loc.start.column + 1\r\n                        }\r\n                    },\r\n                    messageId: \"expectedBefore\",\r\n                    fix: fixer => fixer.insertTextBefore(token, \" \")\r\n                });\r\n            }\r\n\r\n            if (!always && hasSpace) {\r\n                context.report({\r\n                    loc: {\r\n                        start: prevToken.loc.end,\r\n                        end: token.loc.start\r\n                    },\r\n                    messageId: \"unexpectedBefore\",\r\n                    fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks spacing after `${` of a given token.\r\n         * @param {Token} token A token to check. This is a Template token.\r\n         * @returns {void}\r\n         */\r\n        function checkSpacingAfter(token) {\r\n            if (!token.value.endsWith(\"${\")) {\r\n                return; // ends with a backtick, this is the last template element in the template literal\r\n            }\r\n\r\n            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true }),\r\n                hasSpace = sourceCode.isSpaceBetween(token, nextToken);\r\n\r\n            if (!astUtils.isTokenOnSameLine(token, nextToken)) {\r\n                return;\r\n            }\r\n\r\n            if (always && !hasSpace) {\r\n                context.report({\r\n                    loc: {\r\n                        start: {\r\n                            line: token.loc.end.line,\r\n                            column: token.loc.end.column - 2\r\n                        },\r\n                        end: token.loc.end\r\n                    },\r\n                    messageId: \"expectedAfter\",\r\n                    fix: fixer => fixer.insertTextAfter(token, \" \")\r\n                });\r\n            }\r\n\r\n            if (!always && hasSpace) {\r\n                context.report({\r\n                    loc: {\r\n                        start: token.loc.end,\r\n                        end: nextToken.loc.start\r\n                    },\r\n                    messageId: \"unexpectedAfter\",\r\n                    fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            TemplateElement(node) {\r\n                const token = sourceCode.getFirstToken(node);\r\n\r\n                checkSpacingBefore(token);\r\n                checkSpacingAfter(token);\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}