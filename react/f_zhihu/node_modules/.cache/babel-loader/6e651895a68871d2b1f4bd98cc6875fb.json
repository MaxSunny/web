{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce that all class methods use 'this'.\r\n * @author Patrick Williams\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce that class methods utilize `this`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptMethods: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        enforceForClassFields: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingThis: \"Expected 'this' to be used by class {{name}}.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    const enforceForClassFields = config.enforceForClassFields !== false;\n    const exceptMethods = new Set(config.exceptMethods || []);\n    const stack = [];\n    /**\r\n     * Push `this` used flag initialized with `false` onto the stack.\r\n     * @returns {void}\r\n     */\n\n    function pushContext() {\n      stack.push(false);\n    }\n    /**\r\n     * Pop `this` used flag from the stack.\r\n     * @returns {boolean | undefined} `this` used flag\r\n     */\n\n\n    function popContext() {\n      return stack.pop();\n    }\n    /**\r\n     * Initializes the current context to false and pushes it onto the stack.\r\n     * These booleans represent whether 'this' has been used in the context.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function enterFunction() {\n      pushContext();\n    }\n    /**\r\n     * Check if the node is an instance method\r\n     * @param {ASTNode} node node to check\r\n     * @returns {boolean} True if its an instance method\r\n     * @private\r\n     */\n\n\n    function isInstanceMethod(node) {\n      switch (node.type) {\n        case \"MethodDefinition\":\n          return !node.static && node.kind !== \"constructor\";\n\n        case \"PropertyDefinition\":\n          return !node.static && enforceForClassFields;\n\n        default:\n          return false;\n      }\n    }\n    /**\r\n     * Check if the node is an instance method not excluded by config\r\n     * @param {ASTNode} node node to check\r\n     * @returns {boolean} True if it is an instance method, and not excluded by config\r\n     * @private\r\n     */\n\n\n    function isIncludedInstanceMethod(node) {\n      if (isInstanceMethod(node)) {\n        if (node.computed) {\n          return true;\n        }\n\n        const hashIfNeeded = node.key.type === \"PrivateIdentifier\" ? \"#\" : \"\";\n        const name = node.key.type === \"Literal\" ? astUtils.getStaticStringValue(node.key) : node.key.name || \"\";\n        return !exceptMethods.has(hashIfNeeded + name);\n      }\n\n      return false;\n    }\n    /**\r\n     * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\r\n     * Static methods and the constructor are exempt.\r\n     * Then pops the context off the stack.\r\n     * @param {ASTNode} node A function node that was entered.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function exitFunction(node) {\n      const methodUsesThis = popContext();\n\n      if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n        context.report({\n          node,\n          loc: astUtils.getFunctionHeadLoc(node, context.getSourceCode()),\n          messageId: \"missingThis\",\n          data: {\n            name: astUtils.getFunctionNameWithKind(node)\n          }\n        });\n      }\n    }\n    /**\r\n     * Mark the current context as having used 'this'.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function markThisUsed() {\n      if (stack.length) {\n        stack[stack.length - 1] = true;\n      }\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n\n      /*\r\n       * Class field value are implicit functions.\r\n       */\n      \"PropertyDefinition > *.key:exit\": pushContext,\n      \"PropertyDefinition:exit\": popContext,\n\n      /*\r\n       * Class static blocks are implicit functions. They aren't required to use `this`,\r\n       * but we have to push context so that it captures any use of `this` in the static block\r\n       * separately from enclosing contexts, because static blocks have their own `this` and it\r\n       * shouldn't count as used `this` in enclosing contexts.\r\n       */\n      StaticBlock: pushContext,\n      \"StaticBlock:exit\": popContext,\n      ThisExpression: markThisUsed,\n      Super: markThisUsed,\n      ...(enforceForClassFields && {\n        \"PropertyDefinition > ArrowFunctionExpression.value\": enterFunction,\n        \"PropertyDefinition > ArrowFunctionExpression.value:exit\": exitFunction\n      })\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/class-methods-use-this.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","exceptMethods","items","enforceForClassFields","default","additionalProperties","messages","missingThis","create","context","config","Object","assign","options","Set","stack","pushContext","push","popContext","pop","enterFunction","isInstanceMethod","node","static","kind","isIncludedInstanceMethod","computed","hashIfNeeded","key","name","getStaticStringValue","has","exitFunction","methodUsesThis","parent","report","loc","getFunctionHeadLoc","getSourceCode","messageId","data","getFunctionNameWithKind","markThisUsed","length","FunctionDeclaration","FunctionExpression","StaticBlock","ThisExpression","Super"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce that all class methods use 'this'.\r\n * @author Patrick Williams\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce that class methods utilize `this`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/class-methods-use-this\"\r\n        },\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                exceptMethods: {\r\n                    type: \"array\",\r\n                    items: {\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                enforceForClassFields: {\r\n                    type: \"boolean\",\r\n                    default: true\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\r\n        }\r\n    },\r\n    create(context) {\r\n        const config = Object.assign({}, context.options[0]);\r\n        const enforceForClassFields = config.enforceForClassFields !== false;\r\n        const exceptMethods = new Set(config.exceptMethods || []);\r\n\r\n        const stack = [];\r\n\r\n        /**\r\n         * Push `this` used flag initialized with `false` onto the stack.\r\n         * @returns {void}\r\n         */\r\n        function pushContext() {\r\n            stack.push(false);\r\n        }\r\n\r\n        /**\r\n         * Pop `this` used flag from the stack.\r\n         * @returns {boolean | undefined} `this` used flag\r\n         */\r\n        function popContext() {\r\n            return stack.pop();\r\n        }\r\n\r\n        /**\r\n         * Initializes the current context to false and pushes it onto the stack.\r\n         * These booleans represent whether 'this' has been used in the context.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function enterFunction() {\r\n            pushContext();\r\n        }\r\n\r\n        /**\r\n         * Check if the node is an instance method\r\n         * @param {ASTNode} node node to check\r\n         * @returns {boolean} True if its an instance method\r\n         * @private\r\n         */\r\n        function isInstanceMethod(node) {\r\n            switch (node.type) {\r\n                case \"MethodDefinition\":\r\n                    return !node.static && node.kind !== \"constructor\";\r\n                case \"PropertyDefinition\":\r\n                    return !node.static && enforceForClassFields;\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Check if the node is an instance method not excluded by config\r\n         * @param {ASTNode} node node to check\r\n         * @returns {boolean} True if it is an instance method, and not excluded by config\r\n         * @private\r\n         */\r\n        function isIncludedInstanceMethod(node) {\r\n            if (isInstanceMethod(node)) {\r\n                if (node.computed) {\r\n                    return true;\r\n                }\r\n\r\n                const hashIfNeeded = node.key.type === \"PrivateIdentifier\" ? \"#\" : \"\";\r\n                const name = node.key.type === \"Literal\"\r\n                    ? astUtils.getStaticStringValue(node.key)\r\n                    : (node.key.name || \"\");\r\n\r\n                return !exceptMethods.has(hashIfNeeded + name);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\r\n         * Static methods and the constructor are exempt.\r\n         * Then pops the context off the stack.\r\n         * @param {ASTNode} node A function node that was entered.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function exitFunction(node) {\r\n            const methodUsesThis = popContext();\r\n\r\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\r\n                context.report({\r\n                    node,\r\n                    loc: astUtils.getFunctionHeadLoc(node, context.getSourceCode()),\r\n                    messageId: \"missingThis\",\r\n                    data: {\r\n                        name: astUtils.getFunctionNameWithKind(node)\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Mark the current context as having used 'this'.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function markThisUsed() {\r\n            if (stack.length) {\r\n                stack[stack.length - 1] = true;\r\n            }\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: enterFunction,\r\n            \"FunctionDeclaration:exit\": exitFunction,\r\n            FunctionExpression: enterFunction,\r\n            \"FunctionExpression:exit\": exitFunction,\r\n\r\n            /*\r\n             * Class field value are implicit functions.\r\n             */\r\n            \"PropertyDefinition > *.key:exit\": pushContext,\r\n            \"PropertyDefinition:exit\": popContext,\r\n\r\n            /*\r\n             * Class static blocks are implicit functions. They aren't required to use `this`,\r\n             * but we have to push context so that it captures any use of `this` in the static block\r\n             * separately from enclosing contexts, because static blocks have their own `this` and it\r\n             * shouldn't count as used `this` in enclosing contexts.\r\n             */\r\n            StaticBlock: pushContext,\r\n            \"StaticBlock:exit\": popContext,\r\n\r\n            ThisExpression: markThisUsed,\r\n            Super: markThisUsed,\r\n            ...(\r\n                enforceForClassFields && {\r\n                    \"PropertyDefinition > ArrowFunctionExpression.value\": enterFunction,\r\n                    \"PropertyDefinition > ArrowFunctionExpression.value:exit\": exitFunction\r\n                }\r\n            )\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}