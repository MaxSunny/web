{"ast":null,"code":"/**\r\n * @fileoverview enforce a particular style for multiline comments\r\n * @author Teddy Katz\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a particular style for multiline comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/multiline-comment-style\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"starred-block\", \"separate-lines\", \"bare-block\"]\n    }],\n    messages: {\n      expectedBlock: \"Expected a block comment instead of consecutive line comments.\",\n      expectedBareBlock: \"Expected a block comment without padding stars.\",\n      startNewline: \"Expected a linebreak after '/*'.\",\n      endNewline: \"Expected a linebreak before '*/'.\",\n      missingStar: \"Expected a '*' at the start of this line.\",\n      alignment: \"Expected this line to be aligned with the start of the comment.\",\n      expectedLines: \"Expected multiple line comments instead of a block comment.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const option = context.options[0] || \"starred-block\"; //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\r\n     * Checks if a comment line is starred.\r\n     * @param {string} line A string representing a comment line.\r\n     * @returns {boolean} Whether or not the comment line is starred.\r\n     */\n\n    function isStarredCommentLine(line) {\n      return /^\\s*\\*/u.test(line);\n    }\n    /**\r\n     * Checks if a comment group is in starred-block form.\r\n     * @param {Token[]} commentGroup A group of comments, containing either multiple line comments or a single block comment.\r\n     * @returns {boolean} Whether or not the comment group is in starred block form.\r\n     */\n\n\n    function isStarredBlockComment(_ref) {\n      let [firstComment] = _ref;\n\n      if (firstComment.type !== \"Block\") {\n        return false;\n      }\n\n      const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER); // The first and last lines can only contain whitespace.\n\n      return lines.length > 0 && lines.every((line, i) => (i === 0 || i === lines.length - 1 ? /^\\s*$/u : /^\\s*\\*/u).test(line));\n    }\n    /**\r\n     * Checks if a comment group is in JSDoc form.\r\n     * @param {Token[]} commentGroup A group of comments, containing either multiple line comments or a single block comment.\r\n     * @returns {boolean} Whether or not the comment group is in JSDoc form.\r\n     */\n\n\n    function isJSDocComment(_ref2) {\n      let [firstComment] = _ref2;\n\n      if (firstComment.type !== \"Block\") {\n        return false;\n      }\n\n      const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER);\n      return /^\\*\\s*$/u.test(lines[0]) && lines.slice(1, -1).every(line => /^\\s* /u.test(line)) && /^\\s*$/u.test(lines[lines.length - 1]);\n    }\n    /**\r\n     * Processes a comment group that is currently in separate-line form, calculating the offset for each line.\r\n     * @param {Token[]} commentGroup A group of comments containing multiple line comments.\r\n     * @returns {string[]} An array of the processed lines.\r\n     */\n\n\n    function processSeparateLineComments(commentGroup) {\n      const allLinesHaveLeadingSpace = commentGroup.map(_ref3 => {\n        let {\n          value\n        } = _ref3;\n        return value;\n      }).filter(line => line.trim().length).every(line => line.startsWith(\" \"));\n      return commentGroup.map(_ref4 => {\n        let {\n          value\n        } = _ref4;\n        return allLinesHaveLeadingSpace ? value.replace(/^ /u, \"\") : value;\n      });\n    }\n    /**\r\n     * Processes a comment group that is currently in starred-block form, calculating the offset for each line.\r\n     * @param {Token} comment A single block comment token in starred-block form.\r\n     * @returns {string[]} An array of the processed lines.\r\n     */\n\n\n    function processStarredBlockComment(comment) {\n      const lines = comment.value.split(astUtils.LINEBREAK_MATCHER).filter((line, i, linesArr) => !(i === 0 || i === linesArr.length - 1)).map(line => line.replace(/^\\s*$/u, \"\"));\n      const allLinesHaveLeadingSpace = lines.map(line => line.replace(/\\s*\\*/u, \"\")).filter(line => line.trim().length).every(line => line.startsWith(\" \"));\n      return lines.map(line => line.replace(allLinesHaveLeadingSpace ? /\\s*\\* ?/u : /\\s*\\*/u, \"\"));\n    }\n    /**\r\n     * Processes a comment group that is currently in bare-block form, calculating the offset for each line.\r\n     * @param {Token} comment A single block comment token in bare-block form.\r\n     * @returns {string[]} An array of the processed lines.\r\n     */\n\n\n    function processBareBlockComment(comment) {\n      const lines = comment.value.split(astUtils.LINEBREAK_MATCHER).map(line => line.replace(/^\\s*$/u, \"\"));\n      const leadingWhitespace = `${sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0])}   `;\n      let offset = \"\";\n      /*\r\n       * Calculate the offset of the least indented line and use that as the basis for offsetting all the lines.\r\n       * The first line should not be checked because it is inline with the opening block comment delimiter.\r\n       */\n\n      for (const [i, line] of lines.entries()) {\n        if (!line.trim().length || i === 0) {\n          continue;\n        }\n\n        const [, lineOffset] = line.match(/^(\\s*\\*?\\s*)/u);\n\n        if (lineOffset.length < leadingWhitespace.length) {\n          const newOffset = leadingWhitespace.slice(lineOffset.length - leadingWhitespace.length);\n\n          if (newOffset.length > offset.length) {\n            offset = newOffset;\n          }\n        }\n      }\n\n      return lines.map(line => {\n        const match = line.match(/^(\\s*\\*?\\s*)(.*)/u);\n        const [, lineOffset, lineContents] = match;\n\n        if (lineOffset.length > leadingWhitespace.length) {\n          return `${lineOffset.slice(leadingWhitespace.length - (offset.length + lineOffset.length))}${lineContents}`;\n        }\n\n        if (lineOffset.length < leadingWhitespace.length) {\n          return `${lineOffset.slice(leadingWhitespace.length)}${lineContents}`;\n        }\n\n        return lineContents;\n      });\n    }\n    /**\r\n     * Gets a list of comment lines in a group, formatting leading whitespace as necessary.\r\n     * @param {Token[]} commentGroup A group of comments containing either multiple line comments or a single block comment.\r\n     * @returns {string[]} A list of comment lines.\r\n     */\n\n\n    function getCommentLines(commentGroup) {\n      const [firstComment] = commentGroup;\n\n      if (firstComment.type === \"Line\") {\n        return processSeparateLineComments(commentGroup);\n      }\n\n      if (isStarredBlockComment(commentGroup)) {\n        return processStarredBlockComment(firstComment);\n      }\n\n      return processBareBlockComment(firstComment);\n    }\n    /**\r\n     * Gets the initial offset (whitespace) from the beginning of a line to a given comment token.\r\n     * @param {Token} comment The token to check.\r\n     * @returns {string} The offset from the beginning of a line to the token.\r\n     */\n\n\n    function getInitialOffset(comment) {\n      return sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0]);\n    }\n    /**\r\n     * Converts a comment into starred-block form\r\n     * @param {Token} firstComment The first comment of the group being converted\r\n     * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n     * @returns {string} A representation of the comment value in starred-block form, excluding start and end markers\r\n     */\n\n\n    function convertToStarredBlock(firstComment, commentLinesList) {\n      const initialOffset = getInitialOffset(firstComment);\n      return `/*\\n${commentLinesList.map(line => `${initialOffset} * ${line}`).join(\"\\n\")}\\n${initialOffset} */`;\n    }\n    /**\r\n     * Converts a comment into separate-line form\r\n     * @param {Token} firstComment The first comment of the group being converted\r\n     * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n     * @returns {string} A representation of the comment value in separate-line form\r\n     */\n\n\n    function convertToSeparateLines(firstComment, commentLinesList) {\n      return commentLinesList.map(line => `// ${line}`).join(`\\n${getInitialOffset(firstComment)}`);\n    }\n    /**\r\n     * Converts a comment into bare-block form\r\n     * @param {Token} firstComment The first comment of the group being converted\r\n     * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n     * @returns {string} A representation of the comment value in bare-block form\r\n     */\n\n\n    function convertToBlock(firstComment, commentLinesList) {\n      return `/* ${commentLinesList.join(`\\n${getInitialOffset(firstComment)}   `)} */`;\n    }\n    /**\r\n     * Each method checks a group of comments to see if it's valid according to the given option.\r\n     * @param {Token[]} commentGroup A list of comments that appear together. This will either contain a single\r\n     * block comment or multiple line comments.\r\n     * @returns {void}\r\n     */\n\n\n    const commentGroupCheckers = {\n      \"starred-block\"(commentGroup) {\n        const [firstComment] = commentGroup;\n        const commentLines = getCommentLines(commentGroup);\n\n        if (commentLines.some(value => value.includes(\"*/\"))) {\n          return;\n        }\n\n        if (commentGroup.length > 1) {\n          context.report({\n            loc: {\n              start: firstComment.loc.start,\n              end: commentGroup[commentGroup.length - 1].loc.end\n            },\n            messageId: \"expectedBlock\",\n\n            fix(fixer) {\n              const range = [firstComment.range[0], commentGroup[commentGroup.length - 1].range[1]];\n              return commentLines.some(value => value.startsWith(\"/\")) ? null : fixer.replaceTextRange(range, convertToStarredBlock(firstComment, commentLines));\n            }\n\n          });\n        } else {\n          const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER);\n          const expectedLeadingWhitespace = getInitialOffset(firstComment);\n          const expectedLinePrefix = `${expectedLeadingWhitespace} *`;\n\n          if (!/^\\*?\\s*$/u.test(lines[0])) {\n            const start = firstComment.value.startsWith(\"*\") ? firstComment.range[0] + 1 : firstComment.range[0];\n            context.report({\n              loc: {\n                start: firstComment.loc.start,\n                end: {\n                  line: firstComment.loc.start.line,\n                  column: firstComment.loc.start.column + 2\n                }\n              },\n              messageId: \"startNewline\",\n              fix: fixer => fixer.insertTextAfterRange([start, start + 2], `\\n${expectedLinePrefix}`)\n            });\n          }\n\n          if (!/^\\s*$/u.test(lines[lines.length - 1])) {\n            context.report({\n              loc: {\n                start: {\n                  line: firstComment.loc.end.line,\n                  column: firstComment.loc.end.column - 2\n                },\n                end: firstComment.loc.end\n              },\n              messageId: \"endNewline\",\n              fix: fixer => fixer.replaceTextRange([firstComment.range[1] - 2, firstComment.range[1]], `\\n${expectedLinePrefix}/`)\n            });\n          }\n\n          for (let lineNumber = firstComment.loc.start.line + 1; lineNumber <= firstComment.loc.end.line; lineNumber++) {\n            const lineText = sourceCode.lines[lineNumber - 1];\n            const errorType = isStarredCommentLine(lineText) ? \"alignment\" : \"missingStar\";\n\n            if (!lineText.startsWith(expectedLinePrefix)) {\n              context.report({\n                loc: {\n                  start: {\n                    line: lineNumber,\n                    column: 0\n                  },\n                  end: {\n                    line: lineNumber,\n                    column: lineText.length\n                  }\n                },\n                messageId: errorType,\n\n                fix(fixer) {\n                  const lineStartIndex = sourceCode.getIndexFromLoc({\n                    line: lineNumber,\n                    column: 0\n                  });\n\n                  if (errorType === \"alignment\") {\n                    const [, commentTextPrefix = \"\"] = lineText.match(/^(\\s*\\*)/u) || [];\n                    const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;\n                    return fixer.replaceTextRange([lineStartIndex, commentTextStartIndex], expectedLinePrefix);\n                  }\n\n                  const [, commentTextPrefix = \"\"] = lineText.match(/^(\\s*)/u) || [];\n                  const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;\n                  let offset;\n\n                  for (const [idx, line] of lines.entries()) {\n                    if (!/\\S+/u.test(line)) {\n                      continue;\n                    }\n\n                    const lineTextToAlignWith = sourceCode.lines[firstComment.loc.start.line - 1 + idx];\n                    const [, prefix = \"\", initialOffset = \"\"] = lineTextToAlignWith.match(/^(\\s*(?:\\/?\\*)?(\\s*))/u) || [];\n                    offset = `${commentTextPrefix.slice(prefix.length)}${initialOffset}`;\n\n                    if (/^\\s*\\//u.test(lineText) && offset.length === 0) {\n                      offset += \" \";\n                    }\n\n                    break;\n                  }\n\n                  return fixer.replaceTextRange([lineStartIndex, commentTextStartIndex], `${expectedLinePrefix}${offset}`);\n                }\n\n              });\n            }\n          }\n        }\n      },\n\n      \"separate-lines\"(commentGroup) {\n        const [firstComment] = commentGroup;\n\n        if (firstComment.type !== \"Block\" || isJSDocComment(commentGroup)) {\n          return;\n        }\n\n        const commentLines = getCommentLines(commentGroup);\n        const tokenAfter = sourceCode.getTokenAfter(firstComment, {\n          includeComments: true\n        });\n\n        if (tokenAfter && firstComment.loc.end.line === tokenAfter.loc.start.line) {\n          return;\n        }\n\n        context.report({\n          loc: {\n            start: firstComment.loc.start,\n            end: {\n              line: firstComment.loc.start.line,\n              column: firstComment.loc.start.column + 2\n            }\n          },\n          messageId: \"expectedLines\",\n\n          fix(fixer) {\n            return fixer.replaceText(firstComment, convertToSeparateLines(firstComment, commentLines));\n          }\n\n        });\n      },\n\n      \"bare-block\"(commentGroup) {\n        if (isJSDocComment(commentGroup)) {\n          return;\n        }\n\n        const [firstComment] = commentGroup;\n        const commentLines = getCommentLines(commentGroup); // Disallows consecutive line comments in favor of using a block comment.\n\n        if (firstComment.type === \"Line\" && commentLines.length > 1 && !commentLines.some(value => value.includes(\"*/\"))) {\n          context.report({\n            loc: {\n              start: firstComment.loc.start,\n              end: commentGroup[commentGroup.length - 1].loc.end\n            },\n            messageId: \"expectedBlock\",\n\n            fix(fixer) {\n              return fixer.replaceTextRange([firstComment.range[0], commentGroup[commentGroup.length - 1].range[1]], convertToBlock(firstComment, commentLines));\n            }\n\n          });\n        } // Prohibits block comments from having a * at the beginning of each line.\n\n\n        if (isStarredBlockComment(commentGroup)) {\n          context.report({\n            loc: {\n              start: firstComment.loc.start,\n              end: {\n                line: firstComment.loc.start.line,\n                column: firstComment.loc.start.column + 2\n              }\n            },\n            messageId: \"expectedBareBlock\",\n\n            fix(fixer) {\n              return fixer.replaceText(firstComment, convertToBlock(firstComment, commentLines));\n            }\n\n          });\n        }\n      }\n\n    }; //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n    return {\n      Program() {\n        return sourceCode.getAllComments().filter(comment => comment.type !== \"Shebang\").filter(comment => !astUtils.COMMENTS_IGNORE_PATTERN.test(comment.value)).filter(comment => {\n          const tokenBefore = sourceCode.getTokenBefore(comment, {\n            includeComments: true\n          });\n          return !tokenBefore || tokenBefore.loc.end.line < comment.loc.start.line;\n        }).reduce((commentGroups, comment, index, commentList) => {\n          const tokenBefore = sourceCode.getTokenBefore(comment, {\n            includeComments: true\n          });\n\n          if (comment.type === \"Line\" && index && commentList[index - 1].type === \"Line\" && tokenBefore && tokenBefore.loc.end.line === comment.loc.start.line - 1 && tokenBefore === commentList[index - 1]) {\n            commentGroups[commentGroups.length - 1].push(comment);\n          } else {\n            commentGroups.push([comment]);\n          }\n\n          return commentGroups;\n        }, []).filter(commentGroup => !(commentGroup.length === 1 && commentGroup[0].loc.start.line === commentGroup[0].loc.end.line)).forEach(commentGroupCheckers[option]);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/multiline-comment-style.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","expectedBlock","expectedBareBlock","startNewline","endNewline","missingStar","alignment","expectedLines","create","context","sourceCode","getSourceCode","option","options","isStarredCommentLine","line","test","isStarredBlockComment","firstComment","lines","value","split","LINEBREAK_MATCHER","length","every","i","isJSDocComment","slice","processSeparateLineComments","commentGroup","allLinesHaveLeadingSpace","map","filter","trim","startsWith","replace","processStarredBlockComment","comment","linesArr","processBareBlockComment","leadingWhitespace","text","range","loc","start","column","offset","entries","lineOffset","match","newOffset","lineContents","getCommentLines","getInitialOffset","convertToStarredBlock","commentLinesList","initialOffset","join","convertToSeparateLines","convertToBlock","commentGroupCheckers","commentLines","some","includes","report","end","messageId","fix","fixer","replaceTextRange","expectedLeadingWhitespace","expectedLinePrefix","insertTextAfterRange","lineNumber","lineText","errorType","lineStartIndex","getIndexFromLoc","commentTextPrefix","commentTextStartIndex","idx","lineTextToAlignWith","prefix","tokenAfter","getTokenAfter","includeComments","replaceText","Program","getAllComments","COMMENTS_IGNORE_PATTERN","tokenBefore","getTokenBefore","reduce","commentGroups","index","commentList","push","forEach"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview enforce a particular style for multiline comments\r\n * @author Teddy Katz\r\n */\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce a particular style for multiline comments\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/multiline-comment-style\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n        schema: [{ enum: [\"starred-block\", \"separate-lines\", \"bare-block\"] }],\r\n        messages: {\r\n            expectedBlock: \"Expected a block comment instead of consecutive line comments.\",\r\n            expectedBareBlock: \"Expected a block comment without padding stars.\",\r\n            startNewline: \"Expected a linebreak after '/*'.\",\r\n            endNewline: \"Expected a linebreak before '*/'.\",\r\n            missingStar: \"Expected a '*' at the start of this line.\",\r\n            alignment: \"Expected this line to be aligned with the start of the comment.\",\r\n            expectedLines: \"Expected multiple line comments instead of a block comment.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const option = context.options[0] || \"starred-block\";\r\n\r\n        //----------------------------------------------------------------------\r\n        // Helpers\r\n        //----------------------------------------------------------------------\r\n\r\n        /**\r\n         * Checks if a comment line is starred.\r\n         * @param {string} line A string representing a comment line.\r\n         * @returns {boolean} Whether or not the comment line is starred.\r\n         */\r\n        function isStarredCommentLine(line) {\r\n            return /^\\s*\\*/u.test(line);\r\n        }\r\n\r\n        /**\r\n         * Checks if a comment group is in starred-block form.\r\n         * @param {Token[]} commentGroup A group of comments, containing either multiple line comments or a single block comment.\r\n         * @returns {boolean} Whether or not the comment group is in starred block form.\r\n         */\r\n        function isStarredBlockComment([firstComment]) {\r\n            if (firstComment.type !== \"Block\") {\r\n                return false;\r\n            }\r\n\r\n            const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER);\r\n\r\n            // The first and last lines can only contain whitespace.\r\n            return lines.length > 0 && lines.every((line, i) => (i === 0 || i === lines.length - 1 ? /^\\s*$/u : /^\\s*\\*/u).test(line));\r\n        }\r\n\r\n        /**\r\n         * Checks if a comment group is in JSDoc form.\r\n         * @param {Token[]} commentGroup A group of comments, containing either multiple line comments or a single block comment.\r\n         * @returns {boolean} Whether or not the comment group is in JSDoc form.\r\n         */\r\n        function isJSDocComment([firstComment]) {\r\n            if (firstComment.type !== \"Block\") {\r\n                return false;\r\n            }\r\n\r\n            const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER);\r\n\r\n            return /^\\*\\s*$/u.test(lines[0]) &&\r\n                lines.slice(1, -1).every(line => /^\\s* /u.test(line)) &&\r\n                /^\\s*$/u.test(lines[lines.length - 1]);\r\n        }\r\n\r\n        /**\r\n         * Processes a comment group that is currently in separate-line form, calculating the offset for each line.\r\n         * @param {Token[]} commentGroup A group of comments containing multiple line comments.\r\n         * @returns {string[]} An array of the processed lines.\r\n         */\r\n        function processSeparateLineComments(commentGroup) {\r\n            const allLinesHaveLeadingSpace = commentGroup\r\n                .map(({ value }) => value)\r\n                .filter(line => line.trim().length)\r\n                .every(line => line.startsWith(\" \"));\r\n\r\n            return commentGroup.map(({ value }) => (allLinesHaveLeadingSpace ? value.replace(/^ /u, \"\") : value));\r\n        }\r\n\r\n        /**\r\n         * Processes a comment group that is currently in starred-block form, calculating the offset for each line.\r\n         * @param {Token} comment A single block comment token in starred-block form.\r\n         * @returns {string[]} An array of the processed lines.\r\n         */\r\n        function processStarredBlockComment(comment) {\r\n            const lines = comment.value.split(astUtils.LINEBREAK_MATCHER)\r\n                .filter((line, i, linesArr) => !(i === 0 || i === linesArr.length - 1))\r\n                .map(line => line.replace(/^\\s*$/u, \"\"));\r\n            const allLinesHaveLeadingSpace = lines\r\n                .map(line => line.replace(/\\s*\\*/u, \"\"))\r\n                .filter(line => line.trim().length)\r\n                .every(line => line.startsWith(\" \"));\r\n\r\n            return lines.map(line => line.replace(allLinesHaveLeadingSpace ? /\\s*\\* ?/u : /\\s*\\*/u, \"\"));\r\n        }\r\n\r\n        /**\r\n         * Processes a comment group that is currently in bare-block form, calculating the offset for each line.\r\n         * @param {Token} comment A single block comment token in bare-block form.\r\n         * @returns {string[]} An array of the processed lines.\r\n         */\r\n        function processBareBlockComment(comment) {\r\n            const lines = comment.value.split(astUtils.LINEBREAK_MATCHER).map(line => line.replace(/^\\s*$/u, \"\"));\r\n            const leadingWhitespace = `${sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0])}   `;\r\n            let offset = \"\";\r\n\r\n            /*\r\n             * Calculate the offset of the least indented line and use that as the basis for offsetting all the lines.\r\n             * The first line should not be checked because it is inline with the opening block comment delimiter.\r\n             */\r\n            for (const [i, line] of lines.entries()) {\r\n                if (!line.trim().length || i === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const [, lineOffset] = line.match(/^(\\s*\\*?\\s*)/u);\r\n\r\n                if (lineOffset.length < leadingWhitespace.length) {\r\n                    const newOffset = leadingWhitespace.slice(lineOffset.length - leadingWhitespace.length);\r\n\r\n                    if (newOffset.length > offset.length) {\r\n                        offset = newOffset;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return lines.map(line => {\r\n                const match = line.match(/^(\\s*\\*?\\s*)(.*)/u);\r\n                const [, lineOffset, lineContents] = match;\r\n\r\n                if (lineOffset.length > leadingWhitespace.length) {\r\n                    return `${lineOffset.slice(leadingWhitespace.length - (offset.length + lineOffset.length))}${lineContents}`;\r\n                }\r\n\r\n                if (lineOffset.length < leadingWhitespace.length) {\r\n                    return `${lineOffset.slice(leadingWhitespace.length)}${lineContents}`;\r\n                }\r\n\r\n                return lineContents;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Gets a list of comment lines in a group, formatting leading whitespace as necessary.\r\n         * @param {Token[]} commentGroup A group of comments containing either multiple line comments or a single block comment.\r\n         * @returns {string[]} A list of comment lines.\r\n         */\r\n        function getCommentLines(commentGroup) {\r\n            const [firstComment] = commentGroup;\r\n\r\n            if (firstComment.type === \"Line\") {\r\n                return processSeparateLineComments(commentGroup);\r\n            }\r\n\r\n            if (isStarredBlockComment(commentGroup)) {\r\n                return processStarredBlockComment(firstComment);\r\n            }\r\n\r\n            return processBareBlockComment(firstComment);\r\n        }\r\n\r\n        /**\r\n         * Gets the initial offset (whitespace) from the beginning of a line to a given comment token.\r\n         * @param {Token} comment The token to check.\r\n         * @returns {string} The offset from the beginning of a line to the token.\r\n         */\r\n        function getInitialOffset(comment) {\r\n            return sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0]);\r\n        }\r\n\r\n        /**\r\n         * Converts a comment into starred-block form\r\n         * @param {Token} firstComment The first comment of the group being converted\r\n         * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n         * @returns {string} A representation of the comment value in starred-block form, excluding start and end markers\r\n         */\r\n        function convertToStarredBlock(firstComment, commentLinesList) {\r\n            const initialOffset = getInitialOffset(firstComment);\r\n\r\n            return `/*\\n${commentLinesList.map(line => `${initialOffset} * ${line}`).join(\"\\n\")}\\n${initialOffset} */`;\r\n        }\r\n\r\n        /**\r\n         * Converts a comment into separate-line form\r\n         * @param {Token} firstComment The first comment of the group being converted\r\n         * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n         * @returns {string} A representation of the comment value in separate-line form\r\n         */\r\n        function convertToSeparateLines(firstComment, commentLinesList) {\r\n            return commentLinesList.map(line => `// ${line}`).join(`\\n${getInitialOffset(firstComment)}`);\r\n        }\r\n\r\n        /**\r\n         * Converts a comment into bare-block form\r\n         * @param {Token} firstComment The first comment of the group being converted\r\n         * @param {string[]} commentLinesList A list of lines to appear in the new starred-block comment\r\n         * @returns {string} A representation of the comment value in bare-block form\r\n         */\r\n        function convertToBlock(firstComment, commentLinesList) {\r\n            return `/* ${commentLinesList.join(`\\n${getInitialOffset(firstComment)}   `)} */`;\r\n        }\r\n\r\n        /**\r\n         * Each method checks a group of comments to see if it's valid according to the given option.\r\n         * @param {Token[]} commentGroup A list of comments that appear together. This will either contain a single\r\n         * block comment or multiple line comments.\r\n         * @returns {void}\r\n         */\r\n        const commentGroupCheckers = {\r\n            \"starred-block\"(commentGroup) {\r\n                const [firstComment] = commentGroup;\r\n                const commentLines = getCommentLines(commentGroup);\r\n\r\n                if (commentLines.some(value => value.includes(\"*/\"))) {\r\n                    return;\r\n                }\r\n\r\n                if (commentGroup.length > 1) {\r\n                    context.report({\r\n                        loc: {\r\n                            start: firstComment.loc.start,\r\n                            end: commentGroup[commentGroup.length - 1].loc.end\r\n                        },\r\n                        messageId: \"expectedBlock\",\r\n                        fix(fixer) {\r\n                            const range = [firstComment.range[0], commentGroup[commentGroup.length - 1].range[1]];\r\n\r\n                            return commentLines.some(value => value.startsWith(\"/\"))\r\n                                ? null\r\n                                : fixer.replaceTextRange(range, convertToStarredBlock(firstComment, commentLines));\r\n                        }\r\n                    });\r\n                } else {\r\n                    const lines = firstComment.value.split(astUtils.LINEBREAK_MATCHER);\r\n                    const expectedLeadingWhitespace = getInitialOffset(firstComment);\r\n                    const expectedLinePrefix = `${expectedLeadingWhitespace} *`;\r\n\r\n                    if (!/^\\*?\\s*$/u.test(lines[0])) {\r\n                        const start = firstComment.value.startsWith(\"*\") ? firstComment.range[0] + 1 : firstComment.range[0];\r\n\r\n                        context.report({\r\n                            loc: {\r\n                                start: firstComment.loc.start,\r\n                                end: { line: firstComment.loc.start.line, column: firstComment.loc.start.column + 2 }\r\n                            },\r\n                            messageId: \"startNewline\",\r\n                            fix: fixer => fixer.insertTextAfterRange([start, start + 2], `\\n${expectedLinePrefix}`)\r\n                        });\r\n                    }\r\n\r\n                    if (!/^\\s*$/u.test(lines[lines.length - 1])) {\r\n                        context.report({\r\n                            loc: {\r\n                                start: { line: firstComment.loc.end.line, column: firstComment.loc.end.column - 2 },\r\n                                end: firstComment.loc.end\r\n                            },\r\n                            messageId: \"endNewline\",\r\n                            fix: fixer => fixer.replaceTextRange([firstComment.range[1] - 2, firstComment.range[1]], `\\n${expectedLinePrefix}/`)\r\n                        });\r\n                    }\r\n\r\n                    for (let lineNumber = firstComment.loc.start.line + 1; lineNumber <= firstComment.loc.end.line; lineNumber++) {\r\n                        const lineText = sourceCode.lines[lineNumber - 1];\r\n                        const errorType = isStarredCommentLine(lineText)\r\n                            ? \"alignment\"\r\n                            : \"missingStar\";\r\n\r\n                        if (!lineText.startsWith(expectedLinePrefix)) {\r\n                            context.report({\r\n                                loc: {\r\n                                    start: { line: lineNumber, column: 0 },\r\n                                    end: { line: lineNumber, column: lineText.length }\r\n                                },\r\n                                messageId: errorType,\r\n                                fix(fixer) {\r\n                                    const lineStartIndex = sourceCode.getIndexFromLoc({ line: lineNumber, column: 0 });\r\n\r\n                                    if (errorType === \"alignment\") {\r\n                                        const [, commentTextPrefix = \"\"] = lineText.match(/^(\\s*\\*)/u) || [];\r\n                                        const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;\r\n\r\n                                        return fixer.replaceTextRange([lineStartIndex, commentTextStartIndex], expectedLinePrefix);\r\n                                    }\r\n\r\n                                    const [, commentTextPrefix = \"\"] = lineText.match(/^(\\s*)/u) || [];\r\n                                    const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;\r\n                                    let offset;\r\n\r\n                                    for (const [idx, line] of lines.entries()) {\r\n                                        if (!/\\S+/u.test(line)) {\r\n                                            continue;\r\n                                        }\r\n\r\n                                        const lineTextToAlignWith = sourceCode.lines[firstComment.loc.start.line - 1 + idx];\r\n                                        const [, prefix = \"\", initialOffset = \"\"] = lineTextToAlignWith.match(/^(\\s*(?:\\/?\\*)?(\\s*))/u) || [];\r\n\r\n                                        offset = `${commentTextPrefix.slice(prefix.length)}${initialOffset}`;\r\n\r\n                                        if (/^\\s*\\//u.test(lineText) && offset.length === 0) {\r\n                                            offset += \" \";\r\n                                        }\r\n                                        break;\r\n                                    }\r\n\r\n                                    return fixer.replaceTextRange([lineStartIndex, commentTextStartIndex], `${expectedLinePrefix}${offset}`);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"separate-lines\"(commentGroup) {\r\n                const [firstComment] = commentGroup;\r\n\r\n                if (firstComment.type !== \"Block\" || isJSDocComment(commentGroup)) {\r\n                    return;\r\n                }\r\n\r\n                const commentLines = getCommentLines(commentGroup);\r\n                const tokenAfter = sourceCode.getTokenAfter(firstComment, { includeComments: true });\r\n\r\n                if (tokenAfter && firstComment.loc.end.line === tokenAfter.loc.start.line) {\r\n                    return;\r\n                }\r\n\r\n                context.report({\r\n                    loc: {\r\n                        start: firstComment.loc.start,\r\n                        end: { line: firstComment.loc.start.line, column: firstComment.loc.start.column + 2 }\r\n                    },\r\n                    messageId: \"expectedLines\",\r\n                    fix(fixer) {\r\n                        return fixer.replaceText(firstComment, convertToSeparateLines(firstComment, commentLines));\r\n                    }\r\n                });\r\n            },\r\n            \"bare-block\"(commentGroup) {\r\n                if (isJSDocComment(commentGroup)) {\r\n                    return;\r\n                }\r\n\r\n                const [firstComment] = commentGroup;\r\n                const commentLines = getCommentLines(commentGroup);\r\n\r\n                // Disallows consecutive line comments in favor of using a block comment.\r\n                if (firstComment.type === \"Line\" && commentLines.length > 1 &&\r\n                    !commentLines.some(value => value.includes(\"*/\"))) {\r\n                    context.report({\r\n                        loc: {\r\n                            start: firstComment.loc.start,\r\n                            end: commentGroup[commentGroup.length - 1].loc.end\r\n                        },\r\n                        messageId: \"expectedBlock\",\r\n                        fix(fixer) {\r\n                            return fixer.replaceTextRange(\r\n                                [firstComment.range[0], commentGroup[commentGroup.length - 1].range[1]],\r\n                                convertToBlock(firstComment, commentLines)\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Prohibits block comments from having a * at the beginning of each line.\r\n                if (isStarredBlockComment(commentGroup)) {\r\n                    context.report({\r\n                        loc: {\r\n                            start: firstComment.loc.start,\r\n                            end: { line: firstComment.loc.start.line, column: firstComment.loc.start.column + 2 }\r\n                        },\r\n                        messageId: \"expectedBareBlock\",\r\n                        fix(fixer) {\r\n                            return fixer.replaceText(firstComment, convertToBlock(firstComment, commentLines));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        //----------------------------------------------------------------------\r\n        // Public\r\n        //----------------------------------------------------------------------\r\n\r\n        return {\r\n            Program() {\r\n                return sourceCode.getAllComments()\r\n                    .filter(comment => comment.type !== \"Shebang\")\r\n                    .filter(comment => !astUtils.COMMENTS_IGNORE_PATTERN.test(comment.value))\r\n                    .filter(comment => {\r\n                        const tokenBefore = sourceCode.getTokenBefore(comment, { includeComments: true });\r\n\r\n                        return !tokenBefore || tokenBefore.loc.end.line < comment.loc.start.line;\r\n                    })\r\n                    .reduce((commentGroups, comment, index, commentList) => {\r\n                        const tokenBefore = sourceCode.getTokenBefore(comment, { includeComments: true });\r\n\r\n                        if (\r\n                            comment.type === \"Line\" &&\r\n                            index && commentList[index - 1].type === \"Line\" &&\r\n                            tokenBefore && tokenBefore.loc.end.line === comment.loc.start.line - 1 &&\r\n                            tokenBefore === commentList[index - 1]\r\n                        ) {\r\n                            commentGroups[commentGroups.length - 1].push(comment);\r\n                        } else {\r\n                            commentGroups.push([comment]);\r\n                        }\r\n\r\n                        return commentGroups;\r\n                    }, [])\r\n                    .filter(commentGroup => !(commentGroup.length === 1 && commentGroup[0].loc.start.line === commentGroup[0].loc.end.line))\r\n                    .forEach(commentGroupCheckers[option]);\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}