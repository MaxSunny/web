{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag when initializing to undefined\r\n * @author Ilya Volodin\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow initializing variables to `undefined`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-undef-init\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unnecessaryUndefinedInit: \"It's not necessary to initialize '{{name}}' to undefined.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      VariableDeclarator(node) {\n        const name = sourceCode.getText(node.id),\n              init = node.init && node.init.name,\n              scope = context.getScope(),\n              undefinedVar = astUtils.getVariableByName(scope, \"undefined\"),\n              shadowed = undefinedVar && undefinedVar.defs.length > 0,\n              lastToken = sourceCode.getLastToken(node);\n\n        if (init === \"undefined\" && node.parent.kind !== \"const\" && !shadowed) {\n          context.report({\n            node,\n            messageId: \"unnecessaryUndefinedInit\",\n            data: {\n              name\n            },\n\n            fix(fixer) {\n              if (node.parent.kind === \"var\") {\n                return null;\n              }\n\n              if (node.id.type === \"ArrayPattern\" || node.id.type === \"ObjectPattern\") {\n                // Don't fix destructuring assignment to `undefined`.\n                return null;\n              }\n\n              if (sourceCode.commentsExistBetween(node.id, lastToken)) {\n                return null;\n              }\n\n              return fixer.removeRange([node.id.range[1], node.range[1]]);\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-undef-init.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","fixable","messages","unnecessaryUndefinedInit","create","context","sourceCode","getSourceCode","VariableDeclarator","node","name","getText","id","init","scope","getScope","undefinedVar","getVariableByName","shadowed","defs","length","lastToken","getLastToken","parent","kind","report","messageId","data","fix","fixer","commentsExistBetween","removeRange","range"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAUFC,IAAAA,OAAO,EAAE,MAVP;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,wBAAwB,EAAE;AADpB;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA,WAAO;AAEHC,MAAAA,kBAAkB,CAACC,IAAD,EAAO;AACrB,cAAMC,IAAI,GAAGJ,UAAU,CAACK,OAAX,CAAmBF,IAAI,CAACG,EAAxB,CAAb;AAAA,cACIC,IAAI,GAAGJ,IAAI,CAACI,IAAL,IAAaJ,IAAI,CAACI,IAAL,CAAUH,IADlC;AAAA,cAEII,KAAK,GAAGT,OAAO,CAACU,QAAR,EAFZ;AAAA,cAGIC,YAAY,GAAG1B,QAAQ,CAAC2B,iBAAT,CAA2BH,KAA3B,EAAkC,WAAlC,CAHnB;AAAA,cAIII,QAAQ,GAAGF,YAAY,IAAIA,YAAY,CAACG,IAAb,CAAkBC,MAAlB,GAA2B,CAJ1D;AAAA,cAKIC,SAAS,GAAGf,UAAU,CAACgB,YAAX,CAAwBb,IAAxB,CALhB;;AAOA,YAAII,IAAI,KAAK,WAAT,IAAwBJ,IAAI,CAACc,MAAL,CAAYC,IAAZ,KAAqB,OAA7C,IAAwD,CAACN,QAA7D,EAAuE;AACnEb,UAAAA,OAAO,CAACoB,MAAR,CAAe;AACXhB,YAAAA,IADW;AAEXiB,YAAAA,SAAS,EAAE,0BAFA;AAGXC,YAAAA,IAAI,EAAE;AAAEjB,cAAAA;AAAF,aAHK;;AAIXkB,YAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,kBAAIpB,IAAI,CAACc,MAAL,CAAYC,IAAZ,KAAqB,KAAzB,EAAgC;AAC5B,uBAAO,IAAP;AACH;;AAED,kBAAIf,IAAI,CAACG,EAAL,CAAQjB,IAAR,KAAiB,cAAjB,IAAmCc,IAAI,CAACG,EAAL,CAAQjB,IAAR,KAAiB,eAAxD,EAAyE;AAErE;AACA,uBAAO,IAAP;AACH;;AAED,kBAAIW,UAAU,CAACwB,oBAAX,CAAgCrB,IAAI,CAACG,EAArC,EAAyCS,SAAzC,CAAJ,EAAyD;AACrD,uBAAO,IAAP;AACH;;AAED,qBAAOQ,KAAK,CAACE,WAAN,CAAkB,CAACtB,IAAI,CAACG,EAAL,CAAQoB,KAAR,CAAc,CAAd,CAAD,EAAmBvB,IAAI,CAACuB,KAAL,CAAW,CAAX,CAAnB,CAAlB,CAAP;AACH;;AApBU,WAAf;AAsBH;AACJ;;AAlCE,KAAP;AAqCH;;AA3DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag when initializing to undefined\r\n * @author Ilya Volodin\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow initializing variables to `undefined`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-undef-init\"\r\n        },\r\n\r\n        schema: [],\r\n        fixable: \"code\",\r\n\r\n        messages: {\r\n            unnecessaryUndefinedInit: \"It's not necessary to initialize '{{name}}' to undefined.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n\r\n            VariableDeclarator(node) {\r\n                const name = sourceCode.getText(node.id),\r\n                    init = node.init && node.init.name,\r\n                    scope = context.getScope(),\r\n                    undefinedVar = astUtils.getVariableByName(scope, \"undefined\"),\r\n                    shadowed = undefinedVar && undefinedVar.defs.length > 0,\r\n                    lastToken = sourceCode.getLastToken(node);\r\n\r\n                if (init === \"undefined\" && node.parent.kind !== \"const\" && !shadowed) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unnecessaryUndefinedInit\",\r\n                        data: { name },\r\n                        fix(fixer) {\r\n                            if (node.parent.kind === \"var\") {\r\n                                return null;\r\n                            }\r\n\r\n                            if (node.id.type === \"ArrayPattern\" || node.id.type === \"ObjectPattern\") {\r\n\r\n                                // Don't fix destructuring assignment to `undefined`.\r\n                                return null;\r\n                            }\r\n\r\n                            if (sourceCode.commentsExistBetween(node.id, lastToken)) {\r\n                                return null;\r\n                            }\r\n\r\n                            return fixer.removeRange([node.id.range[1], node.range[1]]);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}