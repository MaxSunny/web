{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag the use of redundant constructors in classes.\r\n * @author Alberto Rodríguez\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks whether a given array of statements is a single call of `super`.\r\n * @param {ASTNode[]} body An array of statements to check.\r\n * @returns {boolean} `true` if the body is a single call of `super`.\r\n */\n\nfunction isSingleSuperCall(body) {\n  return body.length === 1 && body[0].type === \"ExpressionStatement\" && body[0].expression.type === \"CallExpression\" && body[0].expression.callee.type === \"Super\";\n}\n/**\r\n * Checks whether a given node is a pattern which doesn't have any side effects.\r\n * Default parameters and Destructuring parameters can have side effects.\r\n * @param {ASTNode} node A pattern node.\r\n * @returns {boolean} `true` if the node doesn't have any side effects.\r\n */\n\n\nfunction isSimple(node) {\n  return node.type === \"Identifier\" || node.type === \"RestElement\";\n}\n/**\r\n * Checks whether a given array of expressions is `...arguments` or not.\r\n * `super(...arguments)` passes all arguments through.\r\n * @param {ASTNode[]} superArgs An array of expressions to check.\r\n * @returns {boolean} `true` if the superArgs is `...arguments`.\r\n */\n\n\nfunction isSpreadArguments(superArgs) {\n  return superArgs.length === 1 && superArgs[0].type === \"SpreadElement\" && superArgs[0].argument.type === \"Identifier\" && superArgs[0].argument.name === \"arguments\";\n}\n/**\r\n * Checks whether given 2 nodes are identifiers which have the same name or not.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes are identifiers which have the same\r\n *      name.\r\n */\n\n\nfunction isValidIdentifierPair(ctorParam, superArg) {\n  return ctorParam.type === \"Identifier\" && superArg.type === \"Identifier\" && ctorParam.name === superArg.name;\n}\n/**\r\n * Checks whether given 2 nodes are a rest/spread pair which has the same values.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes are a rest/spread pair which has the\r\n *      same values.\r\n */\n\n\nfunction isValidRestSpreadPair(ctorParam, superArg) {\n  return ctorParam.type === \"RestElement\" && superArg.type === \"SpreadElement\" && isValidIdentifierPair(ctorParam.argument, superArg.argument);\n}\n/**\r\n * Checks whether given 2 nodes have the same value or not.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes have the same value or not.\r\n */\n\n\nfunction isValidPair(ctorParam, superArg) {\n  return isValidIdentifierPair(ctorParam, superArg) || isValidRestSpreadPair(ctorParam, superArg);\n}\n/**\r\n * Checks whether the parameters of a constructor and the arguments of `super()`\r\n * have the same values or not.\r\n * @param {ASTNode} ctorParams The parameters of a constructor to check.\r\n * @param {ASTNode} superArgs The arguments of `super()` to check.\r\n * @returns {boolean} `true` if those have the same values.\r\n */\n\n\nfunction isPassingThrough(ctorParams, superArgs) {\n  if (ctorParams.length !== superArgs.length) {\n    return false;\n  }\n\n  for (let i = 0; i < ctorParams.length; ++i) {\n    if (!isValidPair(ctorParams[i], superArgs[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Checks whether the constructor body is a redundant super call.\r\n * @param {Array} body constructor body content.\r\n * @param {Array} ctorParams The params to check against super call.\r\n * @returns {boolean} true if the constructor body is redundant\r\n */\n\n\nfunction isRedundantSuperCall(body, ctorParams) {\n  return isSingleSuperCall(body) && ctorParams.every(isSimple) && (isSpreadArguments(body[0].expression.arguments) || isPassingThrough(ctorParams, body[0].expression.arguments));\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary constructors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-constructor\"\n    },\n    schema: [],\n    messages: {\n      noUselessConstructor: \"Useless constructor.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Checks whether a node is a redundant constructor\r\n     * @param {ASTNode} node node to check\r\n     * @returns {void}\r\n     */\n    function checkForConstructor(node) {\n      if (node.kind !== \"constructor\") {\n        return;\n      }\n      /*\r\n       * Prevent crashing on parsers which do not require class constructor\r\n       * to have a body, e.g. typescript and flow\r\n       */\n\n\n      if (!node.value.body) {\n        return;\n      }\n\n      const body = node.value.body.body;\n      const ctorParams = node.value.params;\n      const superClass = node.parent.parent.superClass;\n\n      if (superClass ? isRedundantSuperCall(body, ctorParams) : body.length === 0) {\n        context.report({\n          node,\n          messageId: \"noUselessConstructor\"\n        });\n      }\n    }\n\n    return {\n      MethodDefinition: checkForConstructor\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-useless-constructor.js"],"names":["isSingleSuperCall","body","length","type","expression","callee","isSimple","node","isSpreadArguments","superArgs","argument","name","isValidIdentifierPair","ctorParam","superArg","isValidRestSpreadPair","isValidPair","isPassingThrough","ctorParams","i","isRedundantSuperCall","every","arguments","module","exports","meta","docs","description","recommended","url","schema","messages","noUselessConstructor","create","context","checkForConstructor","kind","value","params","superClass","parent","report","messageId","MethodDefinition"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag the use of redundant constructors in classes.\r\n * @author Alberto Rodríguez\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks whether a given array of statements is a single call of `super`.\r\n * @param {ASTNode[]} body An array of statements to check.\r\n * @returns {boolean} `true` if the body is a single call of `super`.\r\n */\r\nfunction isSingleSuperCall(body) {\r\n    return (\r\n        body.length === 1 &&\r\n        body[0].type === \"ExpressionStatement\" &&\r\n        body[0].expression.type === \"CallExpression\" &&\r\n        body[0].expression.callee.type === \"Super\"\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether a given node is a pattern which doesn't have any side effects.\r\n * Default parameters and Destructuring parameters can have side effects.\r\n * @param {ASTNode} node A pattern node.\r\n * @returns {boolean} `true` if the node doesn't have any side effects.\r\n */\r\nfunction isSimple(node) {\r\n    return node.type === \"Identifier\" || node.type === \"RestElement\";\r\n}\r\n\r\n/**\r\n * Checks whether a given array of expressions is `...arguments` or not.\r\n * `super(...arguments)` passes all arguments through.\r\n * @param {ASTNode[]} superArgs An array of expressions to check.\r\n * @returns {boolean} `true` if the superArgs is `...arguments`.\r\n */\r\nfunction isSpreadArguments(superArgs) {\r\n    return (\r\n        superArgs.length === 1 &&\r\n        superArgs[0].type === \"SpreadElement\" &&\r\n        superArgs[0].argument.type === \"Identifier\" &&\r\n        superArgs[0].argument.name === \"arguments\"\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether given 2 nodes are identifiers which have the same name or not.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes are identifiers which have the same\r\n *      name.\r\n */\r\nfunction isValidIdentifierPair(ctorParam, superArg) {\r\n    return (\r\n        ctorParam.type === \"Identifier\" &&\r\n        superArg.type === \"Identifier\" &&\r\n        ctorParam.name === superArg.name\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether given 2 nodes are a rest/spread pair which has the same values.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes are a rest/spread pair which has the\r\n *      same values.\r\n */\r\nfunction isValidRestSpreadPair(ctorParam, superArg) {\r\n    return (\r\n        ctorParam.type === \"RestElement\" &&\r\n        superArg.type === \"SpreadElement\" &&\r\n        isValidIdentifierPair(ctorParam.argument, superArg.argument)\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether given 2 nodes have the same value or not.\r\n * @param {ASTNode} ctorParam A node to check.\r\n * @param {ASTNode} superArg A node to check.\r\n * @returns {boolean} `true` if the nodes have the same value or not.\r\n */\r\nfunction isValidPair(ctorParam, superArg) {\r\n    return (\r\n        isValidIdentifierPair(ctorParam, superArg) ||\r\n        isValidRestSpreadPair(ctorParam, superArg)\r\n    );\r\n}\r\n\r\n/**\r\n * Checks whether the parameters of a constructor and the arguments of `super()`\r\n * have the same values or not.\r\n * @param {ASTNode} ctorParams The parameters of a constructor to check.\r\n * @param {ASTNode} superArgs The arguments of `super()` to check.\r\n * @returns {boolean} `true` if those have the same values.\r\n */\r\nfunction isPassingThrough(ctorParams, superArgs) {\r\n    if (ctorParams.length !== superArgs.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < ctorParams.length; ++i) {\r\n        if (!isValidPair(ctorParams[i], superArgs[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Checks whether the constructor body is a redundant super call.\r\n * @param {Array} body constructor body content.\r\n * @param {Array} ctorParams The params to check against super call.\r\n * @returns {boolean} true if the constructor body is redundant\r\n */\r\nfunction isRedundantSuperCall(body, ctorParams) {\r\n    return (\r\n        isSingleSuperCall(body) &&\r\n        ctorParams.every(isSimple) &&\r\n        (\r\n            isSpreadArguments(body[0].expression.arguments) ||\r\n            isPassingThrough(ctorParams, body[0].expression.arguments)\r\n        )\r\n    );\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow unnecessary constructors\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-useless-constructor\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            noUselessConstructor: \"Useless constructor.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Checks whether a node is a redundant constructor\r\n         * @param {ASTNode} node node to check\r\n         * @returns {void}\r\n         */\r\n        function checkForConstructor(node) {\r\n            if (node.kind !== \"constructor\") {\r\n                return;\r\n            }\r\n\r\n            /*\r\n             * Prevent crashing on parsers which do not require class constructor\r\n             * to have a body, e.g. typescript and flow\r\n             */\r\n            if (!node.value.body) {\r\n                return;\r\n            }\r\n\r\n            const body = node.value.body.body;\r\n            const ctorParams = node.value.params;\r\n            const superClass = node.parent.parent.superClass;\r\n\r\n            if (superClass ? isRedundantSuperCall(body, ctorParams) : (body.length === 0)) {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"noUselessConstructor\"\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            MethodDefinition: checkForConstructor\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}