{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\r\n * @author Pig Fang <https://github.com/g-plane>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\");\n\nconst regexpp = require(\"regexpp\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst parser = new regexpp.RegExpParser(); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce using named capture group in regular expression\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\n    },\n    schema: [],\n    messages: {\n      required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Function to check regular expression.\r\n     * @param {string} pattern The regular expression pattern to be check.\r\n     * @param {ASTNode} node AST node which contains regular expression.\r\n     * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\r\n     * @returns {void}\r\n     */\n    function checkRegex(pattern, node, uFlag) {\n      let ast;\n\n      try {\n        ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\n      } catch {\n        // ignore regex syntax errors\n        return;\n      }\n\n      regexpp.visitRegExpAST(ast, {\n        onCapturingGroupEnter(group) {\n          if (!group.name) {\n            context.report({\n              node,\n              messageId: \"required\",\n              data: {\n                group: group.raw\n              }\n            });\n          }\n        }\n\n      });\n    }\n\n    return {\n      Literal(node) {\n        if (node.regex) {\n          checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\n        }\n      },\n\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const regex = getStringIfConstant(node.arguments[0]);\n          const flags = getStringIfConstant(node.arguments[1]);\n\n          if (regex) {\n            checkRegex(regex, node, flags && flags.includes(\"u\"));\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-named-capture-group.js"],"names":["CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","require","regexpp","parser","RegExpParser","module","exports","meta","type","docs","description","recommended","url","schema","messages","required","create","context","checkRegex","pattern","node","uFlag","ast","parsePattern","length","visitRegExpAST","onCapturingGroupEnter","group","name","report","messageId","data","raw","Literal","regex","flags","includes","Program","scope","getScope","tracker","traceMap","RegExp","iterateGlobalReferences","arguments"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\r\n * @author Pig Fang <https://github.com/g-plane>\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst {\r\n    CALL,\r\n    CONSTRUCT,\r\n    ReferenceTracker,\r\n    getStringIfConstant\r\n} = require(\"eslint-utils\");\r\nconst regexpp = require(\"regexpp\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst parser = new regexpp.RegExpParser();\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"enforce using named capture group in regular expression\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Function to check regular expression.\r\n         * @param {string} pattern The regular expression pattern to be check.\r\n         * @param {ASTNode} node AST node which contains regular expression.\r\n         * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\r\n         * @returns {void}\r\n         */\r\n        function checkRegex(pattern, node, uFlag) {\r\n            let ast;\r\n\r\n            try {\r\n                ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\r\n            } catch {\r\n\r\n                // ignore regex syntax errors\r\n                return;\r\n            }\r\n\r\n            regexpp.visitRegExpAST(ast, {\r\n                onCapturingGroupEnter(group) {\r\n                    if (!group.name) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"required\",\r\n                            data: {\r\n                                group: group.raw\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            Literal(node) {\r\n                if (node.regex) {\r\n                    checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\r\n                }\r\n            },\r\n            Program() {\r\n                const scope = context.getScope();\r\n                const tracker = new ReferenceTracker(scope);\r\n                const traceMap = {\r\n                    RegExp: {\r\n                        [CALL]: true,\r\n                        [CONSTRUCT]: true\r\n                    }\r\n                };\r\n\r\n                for (const { node } of tracker.iterateGlobalReferences(traceMap)) {\r\n                    const regex = getStringIfConstant(node.arguments[0]);\r\n                    const flags = getStringIfConstant(node.arguments[1]);\r\n\r\n                    if (regex) {\r\n                        checkRegex(regex, node, flags && flags.includes(\"u\"));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}