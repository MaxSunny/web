{"ast":null,"code":"/**\r\n * @fileoverview Restrict usage of specified globals.\r\n * @author Benoît Zugmeyer\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified global variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-globals\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            name: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"name\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    },\n    messages: {\n      defaultMessage: \"Unexpected use of '{{name}}'.\",\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      customMessage: \"Unexpected use of '{{name}}'. {{customMessage}}\"\n    }\n  },\n\n  create(context) {\n    // If no globals are restricted, we don't need to do anything\n    if (context.options.length === 0) {\n      return {};\n    }\n\n    const restrictedGlobalMessages = context.options.reduce((memo, option) => {\n      if (typeof option === \"string\") {\n        memo[option] = null;\n      } else {\n        memo[option.name] = option.message;\n      }\n\n      return memo;\n    }, {});\n    /**\r\n     * Report a variable to be used as a restricted global.\r\n     * @param {Reference} reference the variable reference\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function reportReference(reference) {\n      const name = reference.identifier.name,\n            customMessage = restrictedGlobalMessages[name],\n            messageId = customMessage ? \"customMessage\" : \"defaultMessage\";\n      context.report({\n        node: reference.identifier,\n        messageId,\n        data: {\n          name,\n          customMessage\n        }\n      });\n    }\n    /**\r\n     * Check if the given name is a restricted global name.\r\n     * @param {string} name name of a variable\r\n     * @returns {boolean} whether the variable is a restricted global or not\r\n     * @private\r\n     */\n\n\n    function isRestricted(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope(); // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n\n        scope.variables.forEach(variable => {\n          if (!variable.defs.length && isRestricted(variable.name)) {\n            variable.references.forEach(reportReference);\n          }\n        }); // Report variables not declared at all\n\n        scope.through.forEach(reference => {\n          if (isRestricted(reference.identifier.name)) {\n            reportReference(reference);\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-restricted-globals.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","items","oneOf","properties","name","message","required","additionalProperties","uniqueItems","minItems","messages","defaultMessage","customMessage","create","context","options","length","restrictedGlobalMessages","reduce","memo","option","reportReference","reference","identifier","messageId","report","node","data","isRestricted","Object","prototype","hasOwnProperty","call","Program","scope","getScope","variables","forEach","variable","defs","references","through"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Restrict usage of specified globals.\r\n * @author Benoît Zugmeyer\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow specified global variables\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-restricted-globals\"\r\n        },\r\n\r\n        schema: {\r\n            type: \"array\",\r\n            items: {\r\n                oneOf: [\r\n                    {\r\n                        type: \"string\"\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            name: { type: \"string\" },\r\n                            message: { type: \"string\" }\r\n                        },\r\n                        required: [\"name\"],\r\n                        additionalProperties: false\r\n                    }\r\n                ]\r\n            },\r\n            uniqueItems: true,\r\n            minItems: 0\r\n        },\r\n\r\n        messages: {\r\n            defaultMessage: \"Unexpected use of '{{name}}'.\",\r\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\r\n            customMessage: \"Unexpected use of '{{name}}'. {{customMessage}}\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        // If no globals are restricted, we don't need to do anything\r\n        if (context.options.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        const restrictedGlobalMessages = context.options.reduce((memo, option) => {\r\n            if (typeof option === \"string\") {\r\n                memo[option] = null;\r\n            } else {\r\n                memo[option.name] = option.message;\r\n            }\r\n\r\n            return memo;\r\n        }, {});\r\n\r\n        /**\r\n         * Report a variable to be used as a restricted global.\r\n         * @param {Reference} reference the variable reference\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function reportReference(reference) {\r\n            const name = reference.identifier.name,\r\n                customMessage = restrictedGlobalMessages[name],\r\n                messageId = customMessage\r\n                    ? \"customMessage\"\r\n                    : \"defaultMessage\";\r\n\r\n            context.report({\r\n                node: reference.identifier,\r\n                messageId,\r\n                data: {\r\n                    name,\r\n                    customMessage\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Check if the given name is a restricted global name.\r\n         * @param {string} name name of a variable\r\n         * @returns {boolean} whether the variable is a restricted global or not\r\n         * @private\r\n         */\r\n        function isRestricted(name) {\r\n            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\r\n        }\r\n\r\n        return {\r\n            Program() {\r\n                const scope = context.getScope();\r\n\r\n                // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\r\n                scope.variables.forEach(variable => {\r\n                    if (!variable.defs.length && isRestricted(variable.name)) {\r\n                        variable.references.forEach(reportReference);\r\n                    }\r\n                });\r\n\r\n                // Report variables not declared at all\r\n                scope.through.forEach(reference => {\r\n                    if (isRestricted(reference.identifier.name)) {\r\n                        reportReference(reference);\r\n                    }\r\n                });\r\n\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}