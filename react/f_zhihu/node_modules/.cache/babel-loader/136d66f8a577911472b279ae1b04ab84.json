{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow a negated condition\r\n * @author Alberto Rodríguez\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow negated conditions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-negated-condition\"\n    },\n    schema: [],\n    messages: {\n      unexpectedNegated: \"Unexpected negated condition.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Determines if a given node is an if-else without a condition on the else\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} True if the node has an else without an if.\r\n     * @private\r\n     */\n    function hasElseWithoutCondition(node) {\n      return node.alternate && node.alternate.type !== \"IfStatement\";\n    }\n    /**\r\n     * Determines if a given node is a negated unary expression\r\n     * @param {Object} test The test object to check.\r\n     * @returns {boolean} True if the node is a negated unary expression.\r\n     * @private\r\n     */\n\n\n    function isNegatedUnaryExpression(test) {\n      return test.type === \"UnaryExpression\" && test.operator === \"!\";\n    }\n    /**\r\n     * Determines if a given node is a negated binary expression\r\n     * @param {Test} test The test to check.\r\n     * @returns {boolean} True if the node is a negated binary expression.\r\n     * @private\r\n     */\n\n\n    function isNegatedBinaryExpression(test) {\n      return test.type === \"BinaryExpression\" && (test.operator === \"!=\" || test.operator === \"!==\");\n    }\n    /**\r\n     * Determines if a given node has a negated if expression\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} True if the node has a negated if expression.\r\n     * @private\r\n     */\n\n\n    function isNegatedIf(node) {\n      return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n    }\n\n    return {\n      IfStatement(node) {\n        if (!hasElseWithoutCondition(node)) {\n          return;\n        }\n\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      },\n\n      ConditionalExpression(node) {\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-negated-condition.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpectedNegated","create","context","hasElseWithoutCondition","node","alternate","isNegatedUnaryExpression","test","operator","isNegatedBinaryExpression","isNegatedIf","IfStatement","report","messageId","ConditionalExpression"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6BADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,iBAAiB,EAAE;AADb;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACA;AACQ,aAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACnC,aAAOA,IAAI,CAACC,SAAL,IAAkBD,IAAI,CAACC,SAAL,CAAeZ,IAAf,KAAwB,aAAjD;AACH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASa,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,aAAOA,IAAI,CAACd,IAAL,KAAc,iBAAd,IAAmCc,IAAI,CAACC,QAAL,KAAkB,GAA5D;AACH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASC,yBAAT,CAAmCF,IAAnC,EAAyC;AACrC,aAAOA,IAAI,CAACd,IAAL,KAAc,kBAAd,KACFc,IAAI,CAACC,QAAL,KAAkB,IAAlB,IAA0BD,IAAI,CAACC,QAAL,KAAkB,KAD1C,CAAP;AAEH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASE,WAAT,CAAqBN,IAArB,EAA2B;AACvB,aAAOE,wBAAwB,CAACF,IAAI,CAACG,IAAN,CAAxB,IAAuCE,yBAAyB,CAACL,IAAI,CAACG,IAAN,CAAvE;AACH;;AAED,WAAO;AACHI,MAAAA,WAAW,CAACP,IAAD,EAAO;AACd,YAAI,CAACD,uBAAuB,CAACC,IAAD,CAA5B,EAAoC;AAChC;AACH;;AAED,YAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;AACnBF,UAAAA,OAAO,CAACU,MAAR,CAAe;AACXR,YAAAA,IADW;AAEXS,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ,OAZE;;AAaHC,MAAAA,qBAAqB,CAACV,IAAD,EAAO;AACxB,YAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;AACnBF,UAAAA,OAAO,CAACU,MAAR,CAAe;AACXR,YAAAA,IADW;AAEXS,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AApBE,KAAP;AAsBH;;AAlFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow a negated condition\r\n * @author Alberto Rodríguez\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow negated conditions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-negated-condition\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedNegated: \"Unexpected negated condition.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Determines if a given node is an if-else without a condition on the else\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} True if the node has an else without an if.\r\n         * @private\r\n         */\r\n        function hasElseWithoutCondition(node) {\r\n            return node.alternate && node.alternate.type !== \"IfStatement\";\r\n        }\r\n\r\n        /**\r\n         * Determines if a given node is a negated unary expression\r\n         * @param {Object} test The test object to check.\r\n         * @returns {boolean} True if the node is a negated unary expression.\r\n         * @private\r\n         */\r\n        function isNegatedUnaryExpression(test) {\r\n            return test.type === \"UnaryExpression\" && test.operator === \"!\";\r\n        }\r\n\r\n        /**\r\n         * Determines if a given node is a negated binary expression\r\n         * @param {Test} test The test to check.\r\n         * @returns {boolean} True if the node is a negated binary expression.\r\n         * @private\r\n         */\r\n        function isNegatedBinaryExpression(test) {\r\n            return test.type === \"BinaryExpression\" &&\r\n                (test.operator === \"!=\" || test.operator === \"!==\");\r\n        }\r\n\r\n        /**\r\n         * Determines if a given node has a negated if expression\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} True if the node has a negated if expression.\r\n         * @private\r\n         */\r\n        function isNegatedIf(node) {\r\n            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\r\n        }\r\n\r\n        return {\r\n            IfStatement(node) {\r\n                if (!hasElseWithoutCondition(node)) {\r\n                    return;\r\n                }\r\n\r\n                if (isNegatedIf(node)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedNegated\"\r\n                    });\r\n                }\r\n            },\r\n            ConditionalExpression(node) {\r\n                if (isNegatedIf(node)) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpectedNegated\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}