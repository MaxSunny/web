{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\r\n * @author Andrew Levine\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling some `Object.prototype` methods directly on objects\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n    },\n    schema: [],\n    messages: {\n      prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\n    }\n  },\n\n  create(context) {\n    const DISALLOWED_PROPS = [\"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\"];\n    /**\r\n     * Reports if a disallowed property is used in a CallExpression\r\n     * @param {ASTNode} node The CallExpression node.\r\n     * @returns {void}\r\n     */\n\n    function disallowBuiltIns(node) {\n      const callee = astUtils.skipChainExpression(node.callee);\n\n      if (callee.type !== \"MemberExpression\") {\n        return;\n      }\n\n      const propName = astUtils.getStaticPropertyName(callee);\n\n      if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\n        context.report({\n          messageId: \"prototypeBuildIn\",\n          loc: callee.property.loc,\n          data: {\n            prop: propName\n          },\n          node\n        });\n      }\n    }\n\n    return {\n      CallExpression: disallowBuiltIns\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-prototype-builtins.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","prototypeBuildIn","create","context","DISALLOWED_PROPS","disallowBuiltIns","node","callee","skipChainExpression","propName","getStaticPropertyName","indexOf","report","messageId","loc","property","data","prop","CallExpression"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sEADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE;AADZ;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,gBAAgB,GAAG,CACrB,gBADqB,EAErB,eAFqB,EAGrB,sBAHqB,CAAzB;AAMA;AACR;AACA;AACA;AACA;;AACQ,aAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAE5B,YAAMC,MAAM,GAAGlB,QAAQ,CAACmB,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;;AAEA,UAAIA,MAAM,CAACb,IAAP,KAAgB,kBAApB,EAAwC;AACpC;AACH;;AAED,YAAMe,QAAQ,GAAGpB,QAAQ,CAACqB,qBAAT,CAA+BH,MAA/B,CAAjB;;AAEA,UAAIE,QAAQ,KAAK,IAAb,IAAqBL,gBAAgB,CAACO,OAAjB,CAAyBF,QAAzB,IAAqC,CAAC,CAA/D,EAAkE;AAC9DN,QAAAA,OAAO,CAACS,MAAR,CAAe;AACXC,UAAAA,SAAS,EAAE,kBADA;AAEXC,UAAAA,GAAG,EAAEP,MAAM,CAACQ,QAAP,CAAgBD,GAFV;AAGXE,UAAAA,IAAI,EAAE;AAAEC,YAAAA,IAAI,EAAER;AAAR,WAHK;AAIXH,UAAAA;AAJW,SAAf;AAMH;AACJ;;AAED,WAAO;AACHY,MAAAA,cAAc,EAAEb;AADb,KAAP;AAGH;;AApDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\r\n * @author Andrew Levine\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow calling some `Object.prototype` methods directly on objects\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const DISALLOWED_PROPS = [\r\n            \"hasOwnProperty\",\r\n            \"isPrototypeOf\",\r\n            \"propertyIsEnumerable\"\r\n        ];\r\n\r\n        /**\r\n         * Reports if a disallowed property is used in a CallExpression\r\n         * @param {ASTNode} node The CallExpression node.\r\n         * @returns {void}\r\n         */\r\n        function disallowBuiltIns(node) {\r\n\r\n            const callee = astUtils.skipChainExpression(node.callee);\r\n\r\n            if (callee.type !== \"MemberExpression\") {\r\n                return;\r\n            }\r\n\r\n            const propName = astUtils.getStaticPropertyName(callee);\r\n\r\n            if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\r\n                context.report({\r\n                    messageId: \"prototypeBuildIn\",\r\n                    loc: callee.property.loc,\r\n                    data: { prop: propName },\r\n                    node\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            CallExpression: disallowBuiltIns\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}