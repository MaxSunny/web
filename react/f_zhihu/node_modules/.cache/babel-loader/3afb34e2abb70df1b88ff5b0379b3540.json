{"ast":null,"code":"/**\r\n * @fileoverview Rule to check for ambiguous div operator in regexes\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow division operators explicitly at the beginning of regular expressions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-div-regex\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"A regular expression literal can be confused with '/='.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node);\n\n        if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n\n            fix(fixer) {\n              return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-div-regex.js"],"names":["module","exports","meta","type","docs","description","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","value","report","messageId","fix","fixer","replaceTextRange","range"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gFADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,MATP;AAWFC,IAAAA,MAAM,EAAE,EAXN;AAaFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAbR,GADO;;AAmBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA,WAAO;AAEHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AACV,cAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAX,CAAyBF,IAAzB,CAAd;;AAEA,YAAIC,KAAK,CAACf,IAAN,KAAe,mBAAf,IAAsCe,KAAK,CAACE,KAAN,CAAY,CAAZ,MAAmB,GAA7D,EAAkE;AAC9DP,UAAAA,OAAO,CAACQ,MAAR,CAAe;AACXJ,YAAAA,IADW;AAEXK,YAAAA,SAAS,EAAE,YAFA;;AAGXC,YAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,qBAAOA,KAAK,CAACC,gBAAN,CAAuB,CAACP,KAAK,CAACQ,KAAN,CAAY,CAAZ,IAAiB,CAAlB,EAAqBR,KAAK,CAACQ,KAAN,CAAY,CAAZ,IAAiB,CAAtC,CAAvB,EAAiE,KAAjE,CAAP;AACH;;AALU,WAAf;AAOH;AACJ;;AAdE,KAAP;AAiBH;;AAvCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to check for ambiguous div operator in regexes\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow division operators explicitly at the beginning of regular expressions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-div-regex\"\r\n        },\r\n\r\n        fixable: \"code\",\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"A regular expression literal can be confused with '/='.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n\r\n            Literal(node) {\r\n                const token = sourceCode.getFirstToken(node);\r\n\r\n                if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpected\",\r\n                        fix(fixer) {\r\n                            return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}