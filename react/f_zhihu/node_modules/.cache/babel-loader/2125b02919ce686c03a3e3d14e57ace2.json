{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow certain object properties\r\n * @author Will Klein & Eli White\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow certain properties on certain objects\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-properties\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        anyOf: [// `object` and `property` are both optional, but at least one of them must be provided.\n        {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"object\"]\n        }, {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"property\"]\n        }]\n      },\n      uniqueItems: true\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\n    }\n  },\n\n  create(context) {\n    const restrictedCalls = context.options;\n\n    if (restrictedCalls.length === 0) {\n      return {};\n    }\n\n    const restrictedProperties = new Map();\n    const globallyRestrictedObjects = new Map();\n    const globallyRestrictedProperties = new Map();\n    restrictedCalls.forEach(option => {\n      const objectName = option.object;\n      const propertyName = option.property;\n\n      if (typeof objectName === \"undefined\") {\n        globallyRestrictedProperties.set(propertyName, {\n          message: option.message\n        });\n      } else if (typeof propertyName === \"undefined\") {\n        globallyRestrictedObjects.set(objectName, {\n          message: option.message\n        });\n      } else {\n        if (!restrictedProperties.has(objectName)) {\n          restrictedProperties.set(objectName, new Map());\n        }\n\n        restrictedProperties.get(objectName).set(propertyName, {\n          message: option.message\n        });\n      }\n    });\n    /**\r\n     * Checks to see whether a property access is restricted, and reports it if so.\r\n     * @param {ASTNode} node The node to report\r\n     * @param {string} objectName The name of the object\r\n     * @param {string} propertyName The name of the property\r\n     * @returns {undefined}\r\n     */\n\n    function checkPropertyAccess(node, objectName, propertyName) {\n      if (propertyName === null) {\n        return;\n      }\n\n      const matchedObject = restrictedProperties.get(objectName);\n      const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\n      const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\n\n      if (matchedObjectProperty) {\n        const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedObjectProperty\",\n          data: {\n            objectName,\n            propertyName,\n            message\n          }\n        });\n      } else if (globalMatchedProperty) {\n        const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedProperty\",\n          data: {\n            propertyName,\n            message\n          }\n        });\n      }\n    }\n    /**\r\n     * Checks property accesses in a destructuring assignment expression, e.g. `var foo; ({foo} = bar);`\r\n     * @param {ASTNode} node An AssignmentExpression or AssignmentPattern node\r\n     * @returns {undefined}\r\n     */\n\n\n    function checkDestructuringAssignment(node) {\n      if (node.right.type === \"Identifier\") {\n        const objectName = node.right.name;\n\n        if (node.left.type === \"ObjectPattern\") {\n          node.left.properties.forEach(property => {\n            checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));\n          });\n        }\n      }\n    }\n\n    return {\n      MemberExpression(node) {\n        checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\n      },\n\n      VariableDeclarator(node) {\n        if (node.init && node.init.type === \"Identifier\") {\n          const objectName = node.init.name;\n\n          if (node.id.type === \"ObjectPattern\") {\n            node.id.properties.forEach(property => {\n              checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));\n            });\n          }\n        }\n      },\n\n      AssignmentExpression: checkDestructuringAssignment,\n      AssignmentPattern: checkDestructuringAssignment\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-restricted-properties.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","items","anyOf","properties","object","property","message","additionalProperties","required","uniqueItems","messages","restrictedObjectProperty","restrictedProperty","create","context","restrictedCalls","options","length","restrictedProperties","Map","globallyRestrictedObjects","globallyRestrictedProperties","forEach","option","objectName","propertyName","set","has","get","checkPropertyAccess","node","matchedObject","matchedObjectProperty","globalMatchedProperty","report","messageId","data","checkDestructuringAssignment","right","name","left","getStaticPropertyName","MemberExpression","VariableDeclarator","init","id","AssignmentExpression","AssignmentPattern"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow certain object properties\r\n * @author Will Klein & Eli White\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow certain properties on certain objects\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-restricted-properties\"\r\n        },\r\n\r\n        schema: {\r\n            type: \"array\",\r\n            items: {\r\n                anyOf: [ // `object` and `property` are both optional, but at least one of them must be provided.\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            object: {\r\n                                type: \"string\"\r\n                            },\r\n                            property: {\r\n                                type: \"string\"\r\n                            },\r\n                            message: {\r\n                                type: \"string\"\r\n                            }\r\n                        },\r\n                        additionalProperties: false,\r\n                        required: [\"object\"]\r\n                    },\r\n                    {\r\n                        type: \"object\",\r\n                        properties: {\r\n                            object: {\r\n                                type: \"string\"\r\n                            },\r\n                            property: {\r\n                                type: \"string\"\r\n                            },\r\n                            message: {\r\n                                type: \"string\"\r\n                            }\r\n                        },\r\n                        additionalProperties: false,\r\n                        required: [\"property\"]\r\n                    }\r\n                ]\r\n            },\r\n            uniqueItems: true\r\n        },\r\n\r\n        messages: {\r\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\r\n            restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\r\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\r\n            restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const restrictedCalls = context.options;\r\n\r\n        if (restrictedCalls.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        const restrictedProperties = new Map();\r\n        const globallyRestrictedObjects = new Map();\r\n        const globallyRestrictedProperties = new Map();\r\n\r\n        restrictedCalls.forEach(option => {\r\n            const objectName = option.object;\r\n            const propertyName = option.property;\r\n\r\n            if (typeof objectName === \"undefined\") {\r\n                globallyRestrictedProperties.set(propertyName, { message: option.message });\r\n            } else if (typeof propertyName === \"undefined\") {\r\n                globallyRestrictedObjects.set(objectName, { message: option.message });\r\n            } else {\r\n                if (!restrictedProperties.has(objectName)) {\r\n                    restrictedProperties.set(objectName, new Map());\r\n                }\r\n\r\n                restrictedProperties.get(objectName).set(propertyName, {\r\n                    message: option.message\r\n                });\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Checks to see whether a property access is restricted, and reports it if so.\r\n         * @param {ASTNode} node The node to report\r\n         * @param {string} objectName The name of the object\r\n         * @param {string} propertyName The name of the property\r\n         * @returns {undefined}\r\n         */\r\n        function checkPropertyAccess(node, objectName, propertyName) {\r\n            if (propertyName === null) {\r\n                return;\r\n            }\r\n            const matchedObject = restrictedProperties.get(objectName);\r\n            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\r\n            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\r\n\r\n            if (matchedObjectProperty) {\r\n                const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\r\n\r\n                context.report({\r\n                    node,\r\n                    messageId: \"restrictedObjectProperty\",\r\n                    data: {\r\n                        objectName,\r\n                        propertyName,\r\n                        message\r\n                    }\r\n                });\r\n            } else if (globalMatchedProperty) {\r\n                const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\r\n\r\n                context.report({\r\n                    node,\r\n                    messageId: \"restrictedProperty\",\r\n                    data: {\r\n                        propertyName,\r\n                        message\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks property accesses in a destructuring assignment expression, e.g. `var foo; ({foo} = bar);`\r\n         * @param {ASTNode} node An AssignmentExpression or AssignmentPattern node\r\n         * @returns {undefined}\r\n         */\r\n        function checkDestructuringAssignment(node) {\r\n            if (node.right.type === \"Identifier\") {\r\n                const objectName = node.right.name;\r\n\r\n                if (node.left.type === \"ObjectPattern\") {\r\n                    node.left.properties.forEach(property => {\r\n                        checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            MemberExpression(node) {\r\n                checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\r\n            },\r\n            VariableDeclarator(node) {\r\n                if (node.init && node.init.type === \"Identifier\") {\r\n                    const objectName = node.init.name;\r\n\r\n                    if (node.id.type === \"ObjectPattern\") {\r\n                        node.id.properties.forEach(property => {\r\n                            checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            AssignmentExpression: checkDestructuringAssignment,\r\n            AssignmentPattern: checkDestructuringAssignment\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}