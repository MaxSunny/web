{"ast":null,"code":"/**\r\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\r\n * @author Kai Cataldo\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce spacing between rest and spread operators and their expressions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\n      expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          alwaysSpace = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Checks whitespace between rest/spread operators and their expressions\r\n     * @param {ASTNode} node The node to check\r\n     * @returns {void}\r\n     */\n\n    function checkWhiteSpace(node) {\n      const operator = sourceCode.getFirstToken(node),\n            nextToken = sourceCode.getTokenAfter(operator),\n            hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n      let type;\n\n      switch (node.type) {\n        case \"SpreadElement\":\n          type = \"spread\";\n\n          if (node.parent.type === \"ObjectExpression\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"RestElement\":\n          type = \"rest\";\n\n          if (node.parent.type === \"ObjectPattern\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"ExperimentalSpreadProperty\":\n          type = \"spread property\";\n          break;\n\n        case \"ExperimentalRestProperty\":\n          type = \"rest property\";\n          break;\n\n        default:\n          return;\n      }\n\n      if (alwaysSpace && !hasWhitespace) {\n        context.report({\n          node,\n          loc: operator.loc,\n          messageId: \"expectedWhitespace\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n          }\n\n        });\n      } else if (!alwaysSpace && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: operator.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedWhitespace\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      SpreadElement: checkWhiteSpace,\n      RestElement: checkWhiteSpace,\n      ExperimentalSpreadProperty: checkWhiteSpace,\n      ExperimentalRestProperty: checkWhiteSpace\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/rest-spread-spacing.js"],"names":["module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","unexpectedWhitespace","expectedWhitespace","create","context","sourceCode","getSourceCode","alwaysSpace","options","checkWhiteSpace","node","operator","getFirstToken","nextToken","getTokenAfter","hasWhitespace","isSpaceBetweenTokens","parent","report","loc","messageId","data","fix","fixer","replaceTextRange","range","start","end","removeRange","SpreadElement","RestElement","ExperimentalSpreadProperty","ExperimentalRestProperty"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\r\n * @author Kai Cataldo\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"enforce spacing between rest and spread operators and their expressions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"always\", \"never\"]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\r\n            expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode(),\r\n            alwaysSpace = context.options[0] === \"always\";\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Checks whitespace between rest/spread operators and their expressions\r\n         * @param {ASTNode} node The node to check\r\n         * @returns {void}\r\n         */\r\n        function checkWhiteSpace(node) {\r\n            const operator = sourceCode.getFirstToken(node),\r\n                nextToken = sourceCode.getTokenAfter(operator),\r\n                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\r\n            let type;\r\n\r\n            switch (node.type) {\r\n                case \"SpreadElement\":\r\n                    type = \"spread\";\r\n                    if (node.parent.type === \"ObjectExpression\") {\r\n                        type += \" property\";\r\n                    }\r\n                    break;\r\n                case \"RestElement\":\r\n                    type = \"rest\";\r\n                    if (node.parent.type === \"ObjectPattern\") {\r\n                        type += \" property\";\r\n                    }\r\n                    break;\r\n                case \"ExperimentalSpreadProperty\":\r\n                    type = \"spread property\";\r\n                    break;\r\n                case \"ExperimentalRestProperty\":\r\n                    type = \"rest property\";\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            if (alwaysSpace && !hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: operator.loc,\r\n                    messageId: \"expectedWhitespace\",\r\n                    data: {\r\n                        type\r\n                    },\r\n                    fix(fixer) {\r\n                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\r\n                    }\r\n                });\r\n            } else if (!alwaysSpace && hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: operator.loc.end,\r\n                        end: nextToken.loc.start\r\n                    },\r\n                    messageId: \"unexpectedWhitespace\",\r\n                    data: {\r\n                        type\r\n                    },\r\n                    fix(fixer) {\r\n                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            SpreadElement: checkWhiteSpace,\r\n            RestElement: checkWhiteSpace,\r\n            ExperimentalSpreadProperty: checkWhiteSpace,\r\n            ExperimentalRestProperty: checkWhiteSpace\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}