{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag assignment of the exception parameter\r\n * @author Stephen Murray <spmurrayzzz>\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning exceptions in `catch` clauses\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-ex-assign\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Do not assign to the exception parameter.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Finds and reports references that are non initializer and writable.\r\n     * @param {Variable} variable A variable to check.\r\n     * @returns {void}\r\n     */\n    function checkVariable(variable) {\n      astUtils.getModifyingReferences(variable.references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"unexpected\"\n        });\n      });\n    }\n\n    return {\n      CatchClause(node) {\n        context.getDeclaredVariables(node).forEach(checkVariable);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-ex-assign.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","checkVariable","variable","getModifyingReferences","references","forEach","reference","report","node","identifier","messageId","CatchClause","getDeclaredVariables"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,oDADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7BhB,MAAAA,QAAQ,CAACiB,sBAAT,CAAgCD,QAAQ,CAACE,UAAzC,EAAqDC,OAArD,CAA6DC,SAAS,IAAI;AACtEN,QAAAA,OAAO,CAACO,MAAR,CAAe;AAAEC,UAAAA,IAAI,EAAEF,SAAS,CAACG,UAAlB;AAA8BC,UAAAA,SAAS,EAAE;AAAzC,SAAf;AACH,OAFD;AAGH;;AAED,WAAO;AACHC,MAAAA,WAAW,CAACH,IAAD,EAAO;AACdR,QAAAA,OAAO,CAACY,oBAAR,CAA6BJ,IAA7B,EAAmCH,OAAnC,CAA2CJ,aAA3C;AACH;;AAHE,KAAP;AAMH;;AApCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag assignment of the exception parameter\r\n * @author Stephen Murray <spmurrayzzz>\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow reassigning exceptions in `catch` clauses\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-ex-assign\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Do not assign to the exception parameter.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Finds and reports references that are non initializer and writable.\r\n         * @param {Variable} variable A variable to check.\r\n         * @returns {void}\r\n         */\r\n        function checkVariable(variable) {\r\n            astUtils.getModifyingReferences(variable.references).forEach(reference => {\r\n                context.report({ node: reference.identifier, messageId: \"unexpected\" });\r\n            });\r\n        }\r\n\r\n        return {\r\n            CatchClause(node) {\r\n                context.getDeclaredVariables(node).forEach(checkVariable);\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}