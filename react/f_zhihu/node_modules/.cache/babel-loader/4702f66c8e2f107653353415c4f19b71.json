{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of unary increment and decrement operators.\r\n * @author Ian Christian Myers\r\n * @author Brody McKee (github.com/mrmckeb)\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Determines whether the given node is the update node of a `ForStatement`.\r\n * @param {ASTNode} node The node to check.\r\n * @returns {boolean} `true` if the node is `ForStatement` update.\r\n */\n\nfunction isForStatementUpdate(node) {\n  const parent = node.parent;\n  return parent.type === \"ForStatement\" && parent.update === node;\n}\n/**\r\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\r\n * In particular, it returns `true` if the given node is either:\r\n *   - The update node of a `ForStatement`: for (;; i++) {}\r\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\r\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\r\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\r\n * @param {ASTNode} node The node to check.\r\n * @returns {boolean} `true` if the node is a for loop afterthought.\r\n */\n\n\nfunction isForLoopAfterthought(node) {\n  const parent = node.parent;\n\n  if (parent.type === \"SequenceExpression\") {\n    return isForLoopAfterthought(parent);\n  }\n\n  return isForStatementUpdate(node);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the unary operators `++` and `--`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-plusplus\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowForLoopAfterthoughts: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0];\n    let allowForLoopAfterthoughts = false;\n\n    if (typeof config === \"object\") {\n      allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\n    }\n\n    return {\n      UpdateExpression(node) {\n        if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: \"unexpectedUnaryOp\",\n          data: {\n            operator: node.operator\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-plusplus.js"],"names":["isForStatementUpdate","node","parent","type","update","isForLoopAfterthought","module","exports","meta","docs","description","recommended","url","schema","properties","allowForLoopAfterthoughts","default","additionalProperties","messages","unexpectedUnaryOp","create","context","config","options","UpdateExpression","report","messageId","data","operator"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,QAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;AAEA,SAAOA,MAAM,CAACC,IAAP,KAAgB,cAAhB,IAAkCD,MAAM,CAACE,MAAP,KAAkBH,IAA3D;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,qBAAT,CAA+BJ,IAA/B,EAAqC;AACjC,QAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgB,oBAApB,EAA0C;AACtC,WAAOE,qBAAqB,CAACH,MAAD,CAA5B;AACH;;AAED,SAAOF,oBAAoB,CAACC,IAAD,CAA3B;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAK,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFL,IAAAA,IAAI,EAAE,YADJ;AAGFM,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,4CADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIV,MAAAA,IAAI,EAAE,QADV;AAEIW,MAAAA,UAAU,EAAE;AACRC,QAAAA,yBAAyB,EAAE;AACvBZ,UAAAA,IAAI,EAAE,SADiB;AAEvBa,UAAAA,OAAO,EAAE;AAFc;AADnB,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KADI,CATN;AAsBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,iBAAiB,EAAE;AADb;AAtBR,GADO;;AA4BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;AACA,QAAIR,yBAAyB,GAAG,KAAhC;;AAEA,QAAI,OAAOO,MAAP,KAAkB,QAAtB,EAAgC;AAC5BP,MAAAA,yBAAyB,GAAGO,MAAM,CAACP,yBAAP,KAAqC,IAAjE;AACH;;AAED,WAAO;AAEHS,MAAAA,gBAAgB,CAACvB,IAAD,EAAO;AACnB,YAAIc,yBAAyB,IAAIV,qBAAqB,CAACJ,IAAD,CAAtD,EAA8D;AAC1D;AACH;;AAEDoB,QAAAA,OAAO,CAACI,MAAR,CAAe;AACXxB,UAAAA,IADW;AAEXyB,UAAAA,SAAS,EAAE,mBAFA;AAGXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,QAAQ,EAAE3B,IAAI,CAAC2B;AADb;AAHK,SAAf;AAOH;;AAdE,KAAP;AAkBH;;AAvDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of unary increment and decrement operators.\r\n * @author Ian Christian Myers\r\n * @author Brody McKee (github.com/mrmckeb)\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Determines whether the given node is the update node of a `ForStatement`.\r\n * @param {ASTNode} node The node to check.\r\n * @returns {boolean} `true` if the node is `ForStatement` update.\r\n */\r\nfunction isForStatementUpdate(node) {\r\n    const parent = node.parent;\r\n\r\n    return parent.type === \"ForStatement\" && parent.update === node;\r\n}\r\n\r\n/**\r\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\r\n * In particular, it returns `true` if the given node is either:\r\n *   - The update node of a `ForStatement`: for (;; i++) {}\r\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\r\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\r\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\r\n * @param {ASTNode} node The node to check.\r\n * @returns {boolean} `true` if the node is a for loop afterthought.\r\n */\r\nfunction isForLoopAfterthought(node) {\r\n    const parent = node.parent;\r\n\r\n    if (parent.type === \"SequenceExpression\") {\r\n        return isForLoopAfterthought(parent);\r\n    }\r\n\r\n    return isForStatementUpdate(node);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow the unary operators `++` and `--`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-plusplus\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allowForLoopAfterthoughts: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const config = context.options[0];\r\n        let allowForLoopAfterthoughts = false;\r\n\r\n        if (typeof config === \"object\") {\r\n            allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\r\n        }\r\n\r\n        return {\r\n\r\n            UpdateExpression(node) {\r\n                if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\r\n                    return;\r\n                }\r\n\r\n                context.report({\r\n                    node,\r\n                    messageId: \"unexpectedUnaryOp\",\r\n                    data: {\r\n                        operator: node.operator\r\n                    }\r\n                });\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}