{"ast":null,"code":"/**\r\n * @fileoverview Rule to\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Gets the variable object of `arguments` which is defined implicitly.\r\n * @param {eslint-scope.Scope} scope A scope to get.\r\n * @returns {eslint-scope.Variable} The found variable object.\r\n */\n\nfunction getVariableOfArguments(scope) {\n  const variables = scope.variables;\n\n  for (let i = 0; i < variables.length; ++i) {\n    const variable = variables[i];\n\n    if (variable.name === \"arguments\") {\n      /*\r\n       * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\r\n       * So does fast return with null.\r\n       */\n      return variable.identifiers.length === 0 ? variable : null;\n    }\n  }\n  /* istanbul ignore next : unreachable */\n\n\n  return null;\n}\n/**\r\n * Checks if the given reference is not normal member access.\r\n *\r\n * - arguments         .... true    // not member access\r\n * - arguments[i]      .... true    // computed member access\r\n * - arguments[0]      .... true    // computed member access\r\n * - arguments.length  .... false   // normal member access\r\n * @param {eslint-scope.Reference} reference The reference to check.\r\n * @returns {boolean} `true` if the reference is not normal member access.\r\n */\n\n\nfunction isNotNormalMemberAccess(reference) {\n  const id = reference.identifier;\n  const parent = id.parent;\n  return !(parent.type === \"MemberExpression\" && parent.object === id && !parent.computed);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require rest parameters instead of `arguments`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-rest-params\"\n    },\n    schema: [],\n    messages: {\n      preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Reports a given reference.\r\n     * @param {eslint-scope.Reference} reference A reference to report.\r\n     * @returns {void}\r\n     */\n    function report(reference) {\n      context.report({\n        node: reference.identifier,\n        loc: reference.identifier.loc,\n        messageId: \"preferRestParams\"\n      });\n    }\n    /**\r\n     * Reports references of the implicit `arguments` variable if exist.\r\n     * @returns {void}\r\n     */\n\n\n    function checkForArguments() {\n      const argumentsVar = getVariableOfArguments(context.getScope());\n\n      if (argumentsVar) {\n        argumentsVar.references.filter(isNotNormalMemberAccess).forEach(report);\n      }\n    }\n\n    return {\n      \"FunctionDeclaration:exit\": checkForArguments,\n      \"FunctionExpression:exit\": checkForArguments\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-rest-params.js"],"names":["getVariableOfArguments","scope","variables","i","length","variable","name","identifiers","isNotNormalMemberAccess","reference","id","identifier","parent","type","object","computed","module","exports","meta","docs","description","recommended","url","schema","messages","preferRestParams","create","context","report","node","loc","messageId","checkForArguments","argumentsVar","getScope","references","filter","forEach"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,QAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AACvC,UAAME,QAAQ,GAAGH,SAAS,CAACC,CAAD,CAA1B;;AAEA,QAAIE,QAAQ,CAACC,IAAT,KAAkB,WAAtB,EAAmC;AAE/B;AACZ;AACA;AACA;AACY,aAAQD,QAAQ,CAACE,WAAT,CAAqBH,MAArB,KAAgC,CAAjC,GAAsCC,QAAtC,GAAiD,IAAxD;AACH;AACJ;AAED;;;AACA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,uBAAT,CAAiCC,SAAjC,EAA4C;AACxC,QAAMC,EAAE,GAAGD,SAAS,CAACE,UAArB;AACA,QAAMC,MAAM,GAAGF,EAAE,CAACE,MAAlB;AAEA,SAAO,EACHA,MAAM,CAACC,IAAP,KAAgB,kBAAhB,IACAD,MAAM,CAACE,MAAP,KAAkBJ,EADlB,IAEA,CAACE,MAAM,CAACG,QAHL,CAAP;AAKH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFL,IAAAA,IAAI,EAAE,YADJ;AAGFM,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE;AADZ;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,MAAT,CAAgBnB,SAAhB,EAA2B;AACvBkB,MAAAA,OAAO,CAACC,MAAR,CAAe;AACXC,QAAAA,IAAI,EAAEpB,SAAS,CAACE,UADL;AAEXmB,QAAAA,GAAG,EAAErB,SAAS,CAACE,UAAV,CAAqBmB,GAFf;AAGXC,QAAAA,SAAS,EAAE;AAHA,OAAf;AAKH;AAED;AACR;AACA;AACA;;;AACQ,aAASC,iBAAT,GAA6B;AACzB,YAAMC,YAAY,GAAGjC,sBAAsB,CAAC2B,OAAO,CAACO,QAAR,EAAD,CAA3C;;AAEA,UAAID,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CACPE,UADL,CAEKC,MAFL,CAEY5B,uBAFZ,EAGK6B,OAHL,CAGaT,MAHb;AAIH;AACJ;;AAED,WAAO;AACH,kCAA4BI,iBADzB;AAEH,iCAA2BA;AAFxB,KAAP;AAIH;;AAnDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Gets the variable object of `arguments` which is defined implicitly.\r\n * @param {eslint-scope.Scope} scope A scope to get.\r\n * @returns {eslint-scope.Variable} The found variable object.\r\n */\r\nfunction getVariableOfArguments(scope) {\r\n    const variables = scope.variables;\r\n\r\n    for (let i = 0; i < variables.length; ++i) {\r\n        const variable = variables[i];\r\n\r\n        if (variable.name === \"arguments\") {\r\n\r\n            /*\r\n             * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\r\n             * So does fast return with null.\r\n             */\r\n            return (variable.identifiers.length === 0) ? variable : null;\r\n        }\r\n    }\r\n\r\n    /* istanbul ignore next : unreachable */\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if the given reference is not normal member access.\r\n *\r\n * - arguments         .... true    // not member access\r\n * - arguments[i]      .... true    // computed member access\r\n * - arguments[0]      .... true    // computed member access\r\n * - arguments.length  .... false   // normal member access\r\n * @param {eslint-scope.Reference} reference The reference to check.\r\n * @returns {boolean} `true` if the reference is not normal member access.\r\n */\r\nfunction isNotNormalMemberAccess(reference) {\r\n    const id = reference.identifier;\r\n    const parent = id.parent;\r\n\r\n    return !(\r\n        parent.type === \"MemberExpression\" &&\r\n        parent.object === id &&\r\n        !parent.computed\r\n    );\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require rest parameters instead of `arguments`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-rest-params\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Reports a given reference.\r\n         * @param {eslint-scope.Reference} reference A reference to report.\r\n         * @returns {void}\r\n         */\r\n        function report(reference) {\r\n            context.report({\r\n                node: reference.identifier,\r\n                loc: reference.identifier.loc,\r\n                messageId: \"preferRestParams\"\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Reports references of the implicit `arguments` variable if exist.\r\n         * @returns {void}\r\n         */\r\n        function checkForArguments() {\r\n            const argumentsVar = getVariableOfArguments(context.getScope());\r\n\r\n            if (argumentsVar) {\r\n                argumentsVar\r\n                    .references\r\n                    .filter(isNotNormalMemberAccess)\r\n                    .forEach(report);\r\n            }\r\n        }\r\n\r\n        return {\r\n            \"FunctionDeclaration:exit\": checkForArguments,\r\n            \"FunctionExpression:exit\": checkForArguments\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}