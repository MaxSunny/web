{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow specified names in exports\r\n * @author Milos Djermanovic\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified names in exports\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        restrictedNamedExports: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n    }\n  },\n\n  create(context) {\n    const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n    /**\r\n     * Checks and reports given exported name.\r\n     * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\r\n     * @returns {void}\r\n     */\n\n    function checkExportedName(node) {\n      const name = astUtils.getModuleExportName(node);\n\n      if (restrictedNames.has(name)) {\n        context.report({\n          node,\n          messageId: \"restrictedNamed\",\n          data: {\n            name\n          }\n        });\n      }\n    }\n\n    return {\n      ExportAllDeclaration(node) {\n        if (node.exported) {\n          checkExportedName(node.exported);\n        }\n      },\n\n      ExportNamedDeclaration(node) {\n        const declaration = node.declaration;\n\n        if (declaration) {\n          if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n            checkExportedName(declaration.id);\n          } else if (declaration.type === \"VariableDeclaration\") {\n            context.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name) // Identifier nodes\n            .forEach(checkExportedName);\n          }\n        } else {\n          node.specifiers.map(s => s.exported).forEach(checkExportedName);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-restricted-exports.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","restrictedNamedExports","items","uniqueItems","additionalProperties","messages","restrictedNamed","create","context","restrictedNames","Set","options","checkExportedName","node","name","getModuleExportName","has","report","messageId","data","ExportAllDeclaration","exported","ExportNamedDeclaration","declaration","id","getDeclaredVariables","map","v","defs","find","d","parent","forEach","specifiers","s"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qCADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CAAC;AACLL,MAAAA,IAAI,EAAE,QADD;AAELM,MAAAA,UAAU,EAAE;AACRC,QAAAA,sBAAsB,EAAE;AACpBP,UAAAA,IAAI,EAAE,OADc;AAEpBQ,UAAAA,KAAK,EAAE;AACHR,YAAAA,IAAI,EAAE;AADH,WAFa;AAKpBS,UAAAA,WAAW,EAAE;AALO;AADhB,OAFP;AAWLC,MAAAA,oBAAoB,EAAE;AAXjB,KAAD,CATN;AAuBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAvBR,GADO;;AA6BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQF,OAAO,CAACG,OAAR,CAAgB,CAAhB,KAAsBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBV,sBAAjD,CAAxB;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASW,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,YAAMC,IAAI,GAAGzB,QAAQ,CAAC0B,mBAAT,CAA6BF,IAA7B,CAAb;;AAEA,UAAIJ,eAAe,CAACO,GAAhB,CAAoBF,IAApB,CAAJ,EAA+B;AAC3BN,QAAAA,OAAO,CAACS,MAAR,CAAe;AACXJ,UAAAA,IADW;AAEXK,UAAAA,SAAS,EAAE,iBAFA;AAGXC,UAAAA,IAAI,EAAE;AAAEL,YAAAA;AAAF;AAHK,SAAf;AAKH;AACJ;;AAED,WAAO;AACHM,MAAAA,oBAAoB,CAACP,IAAD,EAAO;AACvB,YAAIA,IAAI,CAACQ,QAAT,EAAmB;AACfT,UAAAA,iBAAiB,CAACC,IAAI,CAACQ,QAAN,CAAjB;AACH;AACJ,OALE;;AAOHC,MAAAA,sBAAsB,CAACT,IAAD,EAAO;AACzB,cAAMU,WAAW,GAAGV,IAAI,CAACU,WAAzB;;AAEA,YAAIA,WAAJ,EAAiB;AACb,cAAIA,WAAW,CAAC7B,IAAZ,KAAqB,qBAArB,IAA8C6B,WAAW,CAAC7B,IAAZ,KAAqB,kBAAvE,EAA2F;AACvFkB,YAAAA,iBAAiB,CAACW,WAAW,CAACC,EAAb,CAAjB;AACH,WAFD,MAEO,IAAID,WAAW,CAAC7B,IAAZ,KAAqB,qBAAzB,EAAgD;AACnDc,YAAAA,OAAO,CAACiB,oBAAR,CAA6BF,WAA7B,EACKG,GADL,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaR,WAA9B,CADd,EAEKG,GAFL,CAESI,CAAC,IAAIA,CAAC,CAAChB,IAFhB,EAEsB;AAFtB,aAGKkB,OAHL,CAGapB,iBAHb;AAIH;AACJ,SATD,MASO;AACHC,UAAAA,IAAI,CAACoB,UAAL,CACKP,GADL,CACSQ,CAAC,IAAIA,CAAC,CAACb,QADhB,EAEKW,OAFL,CAEapB,iBAFb;AAGH;AACJ;;AAxBE,KAAP;AA0BH;;AA5EY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow specified names in exports\r\n * @author Milos Djermanovic\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow specified names in exports\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-restricted-exports\"\r\n        },\r\n\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                restrictedNamedExports: {\r\n                    type: \"array\",\r\n                    items: {\r\n                        type: \"string\"\r\n                    },\r\n                    uniqueItems: true\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\r\n\r\n        /**\r\n         * Checks and reports given exported name.\r\n         * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\r\n         * @returns {void}\r\n         */\r\n        function checkExportedName(node) {\r\n            const name = astUtils.getModuleExportName(node);\r\n\r\n            if (restrictedNames.has(name)) {\r\n                context.report({\r\n                    node,\r\n                    messageId: \"restrictedNamed\",\r\n                    data: { name }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            ExportAllDeclaration(node) {\r\n                if (node.exported) {\r\n                    checkExportedName(node.exported);\r\n                }\r\n            },\r\n\r\n            ExportNamedDeclaration(node) {\r\n                const declaration = node.declaration;\r\n\r\n                if (declaration) {\r\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\r\n                        checkExportedName(declaration.id);\r\n                    } else if (declaration.type === \"VariableDeclaration\") {\r\n                        context.getDeclaredVariables(declaration)\r\n                            .map(v => v.defs.find(d => d.parent === declaration))\r\n                            .map(d => d.name) // Identifier nodes\r\n                            .forEach(checkExportedName);\r\n                    }\r\n                } else {\r\n                    node.specifiers\r\n                        .map(s => s.exported)\r\n                        .forEach(checkExportedName);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}