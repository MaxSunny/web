{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag bitwise identifiers\r\n * @author Nicholas C. Zakas\r\n */\n\"use strict\";\n/*\r\n *\r\n * Set of bitwise operators.\r\n *\r\n */\n\nconst BITWISE_OPERATORS = [\"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\", \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\", \"~\"]; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow bitwise operators\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-bitwise\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            enum: BITWISE_OPERATORS\n          },\n          uniqueItems: true\n        },\n        int32Hint: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected use of '{{operator}}'.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    const int32Hint = options.int32Hint === true;\n    /**\r\n     * Reports an unexpected use of a bitwise operator.\r\n     * @param {ASTNode} node Node which contains the bitwise operator.\r\n     * @returns {void}\r\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"unexpected\",\n        data: {\n          operator: node.operator\n        }\n      });\n    }\n    /**\r\n     * Checks if the given node has a bitwise operator.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} Whether or not the node has a bitwise operator.\r\n     */\n\n\n    function hasBitwiseOperator(node) {\n      return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n    }\n    /**\r\n     * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} Whether or not the node has a bitwise operator.\r\n     */\n\n\n    function allowedOperator(node) {\n      return allowed.indexOf(node.operator) !== -1;\n    }\n    /**\r\n     * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {boolean} whether the node is used in integer typecasting.\r\n     */\n\n\n    function isInt32Hint(node) {\n      return int32Hint && node.operator === \"|\" && node.right && node.right.type === \"Literal\" && node.right.value === 0;\n    }\n    /**\r\n     * Report if the given node contains a bitwise operator.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkNodeForBitwiseOperator(node) {\n      if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\n        report(node);\n      }\n    }\n\n    return {\n      AssignmentExpression: checkNodeForBitwiseOperator,\n      BinaryExpression: checkNodeForBitwiseOperator,\n      UnaryExpression: checkNodeForBitwiseOperator\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-bitwise.js"],"names":["BITWISE_OPERATORS","module","exports","meta","type","docs","description","recommended","url","schema","properties","allow","items","enum","uniqueItems","int32Hint","default","additionalProperties","messages","unexpected","create","context","options","allowed","report","node","messageId","data","operator","hasBitwiseOperator","indexOf","allowedOperator","isInt32Hint","right","value","checkNodeForBitwiseOperator","AssignmentExpression","BinaryExpression","UnaryExpression"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to flag bitwise identifiers\r\n * @author Nicholas C. Zakas\r\n */\r\n\r\n\"use strict\";\r\n\r\n/*\r\n *\r\n * Set of bitwise operators.\r\n *\r\n */\r\nconst BITWISE_OPERATORS = [\r\n    \"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\",\r\n    \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\",\r\n    \"~\"\r\n];\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow bitwise operators\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-bitwise\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allow: {\r\n                        type: \"array\",\r\n                        items: {\r\n                            enum: BITWISE_OPERATORS\r\n                        },\r\n                        uniqueItems: true\r\n                    },\r\n                    int32Hint: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            unexpected: \"Unexpected use of '{{operator}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0] || {};\r\n        const allowed = options.allow || [];\r\n        const int32Hint = options.int32Hint === true;\r\n\r\n        /**\r\n         * Reports an unexpected use of a bitwise operator.\r\n         * @param {ASTNode} node Node which contains the bitwise operator.\r\n         * @returns {void}\r\n         */\r\n        function report(node) {\r\n            context.report({ node, messageId: \"unexpected\", data: { operator: node.operator } });\r\n        }\r\n\r\n        /**\r\n         * Checks if the given node has a bitwise operator.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} Whether or not the node has a bitwise operator.\r\n         */\r\n        function hasBitwiseOperator(node) {\r\n            return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\r\n        }\r\n\r\n        /**\r\n         * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} Whether or not the node has a bitwise operator.\r\n         */\r\n        function allowedOperator(node) {\r\n            return allowed.indexOf(node.operator) !== -1;\r\n        }\r\n\r\n        /**\r\n         * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {boolean} whether the node is used in integer typecasting.\r\n         */\r\n        function isInt32Hint(node) {\r\n            return int32Hint && node.operator === \"|\" && node.right &&\r\n              node.right.type === \"Literal\" && node.right.value === 0;\r\n        }\r\n\r\n        /**\r\n         * Report if the given node contains a bitwise operator.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {void}\r\n         */\r\n        function checkNodeForBitwiseOperator(node) {\r\n            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\r\n                report(node);\r\n            }\r\n        }\r\n\r\n        return {\r\n            AssignmentExpression: checkNodeForBitwiseOperator,\r\n            BinaryExpression: checkNodeForBitwiseOperator,\r\n            UnaryExpression: checkNodeForBitwiseOperator\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}