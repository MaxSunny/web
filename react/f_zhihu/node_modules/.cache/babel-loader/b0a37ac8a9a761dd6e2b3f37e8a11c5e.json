{"ast":null,"code":"/**\r\n * @fileoverview Require or disallow Unicode BOM\r\n * @author Andrew Johnston <https://github.com/ehjay>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow Unicode byte order mark (BOM)\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/unicode-bom\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expected: \"Expected Unicode BOM (Byte Order Mark).\",\n      unexpected: \"Unexpected Unicode BOM (Byte Order Mark).\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n    return {\n      Program: function checkUnicodeBOM(node) {\n        const sourceCode = context.getSourceCode(),\n              location = {\n          column: 0,\n          line: 1\n        },\n              requireBOM = context.options[0] || \"never\";\n\n        if (!sourceCode.hasBOM && requireBOM === \"always\") {\n          context.report({\n            node,\n            loc: location,\n            messageId: \"expected\",\n\n            fix(fixer) {\n              return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");\n            }\n\n          });\n        } else if (sourceCode.hasBOM && requireBOM === \"never\") {\n          context.report({\n            node,\n            loc: location,\n            messageId: \"unexpected\",\n\n            fix(fixer) {\n              return fixer.removeRange([-1, 0]);\n            }\n\n          });\n        }\n      }\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/unicode-bom.js"],"names":["module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","expected","unexpected","create","context","Program","checkUnicodeBOM","node","sourceCode","getSourceCode","location","column","line","requireBOM","options","hasBOM","report","loc","messageId","fix","fixer","insertTextBeforeRange","removeRange"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,YATP;AAWFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX;AADV,KADI,CAXN;AAgBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,QAAQ,EAAE,yCADJ;AAENC,MAAAA,UAAU,EAAE;AAFN;AAhBR,GADO;;AAuBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;AAEA,WAAO;AAEHC,MAAAA,OAAO,EAAE,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAEpC,cAAMC,UAAU,GAAGJ,OAAO,CAACK,aAAR,EAAnB;AAAA,cACIC,QAAQ,GAAG;AAAEC,UAAAA,MAAM,EAAE,CAAV;AAAaC,UAAAA,IAAI,EAAE;AAAnB,SADf;AAAA,cAEIC,UAAU,GAAGT,OAAO,CAACU,OAAR,CAAgB,CAAhB,KAAsB,OAFvC;;AAIA,YAAI,CAACN,UAAU,CAACO,MAAZ,IAAuBF,UAAU,KAAK,QAA1C,EAAqD;AACjDT,UAAAA,OAAO,CAACY,MAAR,CAAe;AACXT,YAAAA,IADW;AAEXU,YAAAA,GAAG,EAAEP,QAFM;AAGXQ,YAAAA,SAAS,EAAE,UAHA;;AAIXC,YAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,qBAAOA,KAAK,CAACC,qBAAN,CAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B,EAAoC,QAApC,CAAP;AACH;;AANU,WAAf;AAQH,SATD,MASO,IAAIb,UAAU,CAACO,MAAX,IAAsBF,UAAU,KAAK,OAAzC,EAAmD;AACtDT,UAAAA,OAAO,CAACY,MAAR,CAAe;AACXT,YAAAA,IADW;AAEXU,YAAAA,GAAG,EAAEP,QAFM;AAGXQ,YAAAA,SAAS,EAAE,YAHA;;AAIXC,YAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,qBAAOA,KAAK,CAACE,WAAN,CAAkB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB,CAAP;AACH;;AANU,WAAf;AAQH;AACJ;AA3BE,KAAP;AA+BH;;AA5DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Require or disallow Unicode BOM\r\n * @author Andrew Johnston <https://github.com/ehjay>\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"require or disallow Unicode byte order mark (BOM)\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/unicode-bom\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"always\", \"never\"]\r\n            }\r\n        ],\r\n        messages: {\r\n            expected: \"Expected Unicode BOM (Byte Order Mark).\",\r\n            unexpected: \"Unexpected Unicode BOM (Byte Order Mark).\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            Program: function checkUnicodeBOM(node) {\r\n\r\n                const sourceCode = context.getSourceCode(),\r\n                    location = { column: 0, line: 1 },\r\n                    requireBOM = context.options[0] || \"never\";\r\n\r\n                if (!sourceCode.hasBOM && (requireBOM === \"always\")) {\r\n                    context.report({\r\n                        node,\r\n                        loc: location,\r\n                        messageId: \"expected\",\r\n                        fix(fixer) {\r\n                            return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");\r\n                        }\r\n                    });\r\n                } else if (sourceCode.hasBOM && (requireBOM === \"never\")) {\r\n                    context.report({\r\n                        node,\r\n                        loc: location,\r\n                        messageId: \"unexpected\",\r\n                        fix(fixer) {\r\n                            return fixer.removeRange([-1, 0]);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}