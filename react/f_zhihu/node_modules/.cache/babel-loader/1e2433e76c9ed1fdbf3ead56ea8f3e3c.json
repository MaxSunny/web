{"ast":null,"code":"/**\r\n * @fileoverview The rule should warn against code that tries to compare against -0.\r\n * @author Aladdin-ADD <hh_2013@foxmail.com>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow comparing against -0\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Checks a given node is -0\r\n     * @param {ASTNode} node A node to check.\r\n     * @returns {boolean} `true` if the node is -0.\r\n     */\n    function isNegZero(node) {\n      return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\n    }\n\n    const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\n    return {\n      BinaryExpression(node) {\n        if (OPERATORS_TO_CHECK.has(node.operator)) {\n          if (isNegZero(node.left) || isNegZero(node.right)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                operator: node.operator\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-compare-neg-zero.js"],"names":["module","exports","meta","type","docs","description","recommended","url","fixable","schema","messages","unexpected","create","context","isNegZero","node","operator","argument","value","OPERATORS_TO_CHECK","Set","BinaryExpression","has","left","right","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+BADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,IATP;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;AACQ,aAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,aAAOA,IAAI,CAACZ,IAAL,KAAc,iBAAd,IAAmCY,IAAI,CAACC,QAAL,KAAkB,GAArD,IAA4DD,IAAI,CAACE,QAAL,CAAcd,IAAd,KAAuB,SAAnF,IAAgGY,IAAI,CAACE,QAAL,CAAcC,KAAd,KAAwB,CAA/H;AACH;;AACD,UAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,KAA1C,CAAR,CAA3B;AAEA,WAAO;AACHC,MAAAA,gBAAgB,CAACN,IAAD,EAAO;AACnB,YAAII,kBAAkB,CAACG,GAAnB,CAAuBP,IAAI,CAACC,QAA5B,CAAJ,EAA2C;AACvC,cAAIF,SAAS,CAACC,IAAI,CAACQ,IAAN,CAAT,IAAwBT,SAAS,CAACC,IAAI,CAACS,KAAN,CAArC,EAAmD;AAC/CX,YAAAA,OAAO,CAACY,MAAR,CAAe;AACXV,cAAAA,IADW;AAEXW,cAAAA,SAAS,EAAE,YAFA;AAGXC,cAAAA,IAAI,EAAE;AAAEX,gBAAAA,QAAQ,EAAED,IAAI,CAACC;AAAjB;AAHK,aAAf;AAKH;AACJ;AACJ;;AAXE,KAAP;AAaH;;AA/CY,CAAjB","sourcesContent":["/**\r\n * @fileoverview The rule should warn against code that tries to compare against -0.\r\n * @author Aladdin-ADD <hh_2013@foxmail.com>\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow comparing against -0\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\r\n        },\r\n\r\n        fixable: null,\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Checks a given node is -0\r\n         * @param {ASTNode} node A node to check.\r\n         * @returns {boolean} `true` if the node is -0.\r\n         */\r\n        function isNegZero(node) {\r\n            return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\r\n        }\r\n        const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\r\n\r\n        return {\r\n            BinaryExpression(node) {\r\n                if (OPERATORS_TO_CHECK.has(node.operator)) {\r\n                    if (isNegZero(node.left) || isNegZero(node.right)) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"unexpected\",\r\n                            data: { operator: node.operator }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}