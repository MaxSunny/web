{"ast":null,"code":"/**\r\n * @fileoverview Define the abstract class about cursors which iterate tokens.\r\n * @author Toru Nagashima\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\r\n * The abstract class about cursors which iterate tokens.\r\n *\r\n * This class has 2 abstract methods.\r\n *\r\n * - `current: Token | Comment | null` ... The current token.\r\n * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`.\r\n *\r\n * This is similar to ES2015 Iterators.\r\n * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable.\r\n *\r\n * There are the following known sub classes.\r\n *\r\n * - ForwardTokenCursor .......... The cursor which iterates tokens only.\r\n * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse.\r\n * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments.\r\n * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse.\r\n * - DecorativeCursor\r\n *     - FilterCursor ............ The cursor which ignores the specified tokens.\r\n *     - SkipCursor .............. The cursor which ignores the first few tokens.\r\n *     - LimitCursor ............. The cursor which limits the count of tokens.\r\n *\r\n */\n\nmodule.exports = class Cursor {\n  /**\r\n   * Initializes this cursor.\r\n   */\n  constructor() {\n    this.current = null;\n  }\n  /**\r\n   * Gets the first token.\r\n   * This consumes this cursor.\r\n   * @returns {Token|Comment} The first token or null.\r\n   */\n\n\n  getOneToken() {\n    return this.moveNext() ? this.current : null;\n  }\n  /**\r\n   * Gets the first tokens.\r\n   * This consumes this cursor.\r\n   * @returns {(Token|Comment)[]} All tokens.\r\n   */\n\n\n  getAllTokens() {\n    const tokens = [];\n\n    while (this.moveNext()) {\n      tokens.push(this.current);\n    }\n\n    return tokens;\n  }\n  /**\r\n   * Moves this cursor to the next token.\r\n   * @returns {boolean} `true` if the next token exists.\r\n   * @abstract\r\n   */\n\n  /* istanbul ignore next */\n\n\n  moveNext() {\n    // eslint-disable-line class-methods-use-this -- Unused\n    throw new Error(\"Not implemented.\");\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/source-code/token-store/cursor.js"],"names":["module","exports","Cursor","constructor","current","getOneToken","moveNext","getAllTokens","tokens","push","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,CAAa;AAE1B;AACJ;AACA;AACIC,EAAAA,WAAW,GAAG;AACV,SAAKC,OAAL,GAAe,IAAf;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKC,QAAL,KAAkB,KAAKF,OAAvB,GAAiC,IAAxC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,YAAY,GAAG;AACX,UAAMC,MAAM,GAAG,EAAf;;AAEA,WAAO,KAAKF,QAAL,EAAP,EAAwB;AACpBE,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKL,OAAjB;AACH;;AAED,WAAOI,MAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AACI;;;AACAF,EAAAA,QAAQ,GAAG;AAAE;AACT,UAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAzCyB,CAA9B","sourcesContent":["/**\r\n * @fileoverview Define the abstract class about cursors which iterate tokens.\r\n * @author Toru Nagashima\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Exports\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * The abstract class about cursors which iterate tokens.\r\n *\r\n * This class has 2 abstract methods.\r\n *\r\n * - `current: Token | Comment | null` ... The current token.\r\n * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`.\r\n *\r\n * This is similar to ES2015 Iterators.\r\n * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable.\r\n *\r\n * There are the following known sub classes.\r\n *\r\n * - ForwardTokenCursor .......... The cursor which iterates tokens only.\r\n * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse.\r\n * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments.\r\n * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse.\r\n * - DecorativeCursor\r\n *     - FilterCursor ............ The cursor which ignores the specified tokens.\r\n *     - SkipCursor .............. The cursor which ignores the first few tokens.\r\n *     - LimitCursor ............. The cursor which limits the count of tokens.\r\n *\r\n */\r\nmodule.exports = class Cursor {\r\n\r\n    /**\r\n     * Initializes this cursor.\r\n     */\r\n    constructor() {\r\n        this.current = null;\r\n    }\r\n\r\n    /**\r\n     * Gets the first token.\r\n     * This consumes this cursor.\r\n     * @returns {Token|Comment} The first token or null.\r\n     */\r\n    getOneToken() {\r\n        return this.moveNext() ? this.current : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the first tokens.\r\n     * This consumes this cursor.\r\n     * @returns {(Token|Comment)[]} All tokens.\r\n     */\r\n    getAllTokens() {\r\n        const tokens = [];\r\n\r\n        while (this.moveNext()) {\r\n            tokens.push(this.current);\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * Moves this cursor to the next token.\r\n     * @returns {boolean} `true` if the next token exists.\r\n     * @abstract\r\n     */\r\n    /* istanbul ignore next */\r\n    moveNext() { // eslint-disable-line class-methods-use-this -- Unused\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}