{"ast":null,"code":"/**\r\n * @fileoverview Rule to enforce declarations in program or function body root.\r\n * @author Brandon Mills\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n/**\r\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\r\n * @param {ASTNode} node Node to search from.\r\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\r\n */\n\nfunction getAllowedBodyDescription(node) {\n  let {\n    parent\n  } = node;\n\n  while (parent) {\n    if (parent.type === \"StaticBlock\") {\n      return \"class static block body\";\n    }\n\n    if (astUtils.isFunction(parent)) {\n      return \"function body\";\n    }\n\n    ({\n      parent\n    } = parent);\n  }\n\n  return \"program\";\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow variable or `function` declarations in nested blocks\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n    },\n    schema: [{\n      enum: [\"functions\", \"both\"]\n    }],\n    messages: {\n      moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Ensure that a given node is at a program or function body's root.\r\n     * @param {ASTNode} node Declaration node to check.\r\n     * @returns {void}\r\n     */\n    function check(node) {\n      const parent = node.parent;\n\n      if (parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)) {\n        return;\n      }\n\n      if (validParent.has(parent.type)) {\n        return;\n      }\n\n      context.report({\n        node,\n        messageId: \"moveDeclToRoot\",\n        data: {\n          type: node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\",\n          body: getAllowedBodyDescription(node)\n        }\n      });\n    }\n\n    return {\n      FunctionDeclaration: check,\n\n      VariableDeclaration(node) {\n        if (context.options[0] === \"both\" && node.kind === \"var\") {\n          check(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-inner-declarations.js"],"names":["astUtils","require","validParent","Set","validBlockStatementParent","getAllowedBodyDescription","node","parent","type","isFunction","module","exports","meta","docs","description","recommended","url","schema","enum","messages","moveDeclToRoot","create","context","check","has","report","messageId","data","body","FunctionDeclaration","VariableDeclaration","options","kind"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,aAAZ,EAA2B,wBAA3B,EAAqD,0BAArD,CAAR,CAApB;AACA,MAAMC,yBAAyB,GAAG,IAAID,GAAJ,CAAQ,CAAC,qBAAD,EAAwB,oBAAxB,EAA8C,yBAA9C,CAAR,CAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASE,yBAAT,CAAmCC,IAAnC,EAAyC;AACrC,MAAI;AAAEC,IAAAA;AAAF,MAAaD,IAAjB;;AAEA,SAAOC,MAAP,EAAe;AAEX,QAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AAC/B,aAAO,yBAAP;AACH;;AAED,QAAIR,QAAQ,CAACS,UAAT,CAAoBF,MAApB,CAAJ,EAAiC;AAC7B,aAAO,eAAP;AACH;;AAED,KAAC;AAAEA,MAAAA;AAAF,QAAaA,MAAd;AACH;;AAED,SAAO,SAAP;AACH;AAED;;;AACAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFJ,IAAAA,IAAI,EAAE,SADJ;AAGFK,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+DADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,WAAD,EAAc,MAAd;AADV,KADI,CATN;AAeFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,cAAc,EAAE;AADV;AAfR,GADO;;AAqBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,KAAT,CAAejB,IAAf,EAAqB;AACjB,YAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;AAEA,UACIA,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IAAoCJ,yBAAyB,CAACoB,GAA1B,CAA8BjB,MAAM,CAACA,MAAP,CAAcC,IAA5C,CADxC,EAEE;AACE;AACH;;AAED,UAAIN,WAAW,CAACsB,GAAZ,CAAgBjB,MAAM,CAACC,IAAvB,CAAJ,EAAkC;AAC9B;AACH;;AAEDc,MAAAA,OAAO,CAACG,MAAR,CAAe;AACXnB,QAAAA,IADW;AAEXoB,QAAAA,SAAS,EAAE,gBAFA;AAGXC,QAAAA,IAAI,EAAE;AACFnB,UAAAA,IAAI,EAAGF,IAAI,CAACE,IAAL,KAAc,qBAAd,GAAsC,UAAtC,GAAmD,UADxD;AAEFoB,UAAAA,IAAI,EAAEvB,yBAAyB,CAACC,IAAD;AAF7B;AAHK,OAAf;AAQH;;AAGD,WAAO;AAEHuB,MAAAA,mBAAmB,EAAEN,KAFlB;;AAGHO,MAAAA,mBAAmB,CAACxB,IAAD,EAAO;AACtB,YAAIgB,OAAO,CAACS,OAAR,CAAgB,CAAhB,MAAuB,MAAvB,IAAiCzB,IAAI,CAAC0B,IAAL,KAAc,KAAnD,EAA0D;AACtDT,UAAAA,KAAK,CAACjB,IAAD,CAAL;AACH;AACJ;;AAPE,KAAP;AAWH;;AA/DY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to enforce declarations in program or function body root.\r\n * @author Brandon Mills\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\r\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\r\n\r\n/**\r\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\r\n * @param {ASTNode} node Node to search from.\r\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\r\n */\r\nfunction getAllowedBodyDescription(node) {\r\n    let { parent } = node;\r\n\r\n    while (parent) {\r\n\r\n        if (parent.type === \"StaticBlock\") {\r\n            return \"class static block body\";\r\n        }\r\n\r\n        if (astUtils.isFunction(parent)) {\r\n            return \"function body\";\r\n        }\r\n\r\n        ({ parent } = parent);\r\n    }\r\n\r\n    return \"program\";\r\n}\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow variable or `function` declarations in nested blocks\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-inner-declarations\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                enum: [\"functions\", \"both\"]\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Ensure that a given node is at a program or function body's root.\r\n         * @param {ASTNode} node Declaration node to check.\r\n         * @returns {void}\r\n         */\r\n        function check(node) {\r\n            const parent = node.parent;\r\n\r\n            if (\r\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (validParent.has(parent.type)) {\r\n                return;\r\n            }\r\n\r\n            context.report({\r\n                node,\r\n                messageId: \"moveDeclToRoot\",\r\n                data: {\r\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\r\n                    body: getAllowedBodyDescription(node)\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        return {\r\n\r\n            FunctionDeclaration: check,\r\n            VariableDeclaration(node) {\r\n                if (context.options[0] === \"both\" && node.kind === \"var\") {\r\n                    check(node);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}