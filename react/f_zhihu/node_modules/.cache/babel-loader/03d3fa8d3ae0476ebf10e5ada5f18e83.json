{"ast":null,"code":"/**\r\n * @fileoverview Rule to check for tabs inside a file\r\n * @author Gyandeep Singh\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow all tabs\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-tabs\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowIndentationTabs: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedTab: \"Unexpected tab character.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n    return {\n      Program(node) {\n        sourceCode.getLines().forEach((line, index) => {\n          let match;\n\n          while ((match = tabRegex.exec(line)) !== null) {\n            if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n              continue;\n            }\n\n            context.report({\n              node,\n              loc: {\n                start: {\n                  line: index + 1,\n                  column: match.index\n                },\n                end: {\n                  line: index + 1,\n                  column: match.index + match[0].length\n                }\n              },\n              messageId: \"unexpectedTab\"\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-tabs.js"],"names":["tabRegex","anyNonWhitespaceRegex","module","exports","meta","type","docs","description","recommended","url","schema","properties","allowIndentationTabs","default","additionalProperties","messages","unexpectedTab","create","context","sourceCode","getSourceCode","options","Program","node","getLines","forEach","line","index","match","exec","test","slice","report","loc","start","column","end","length","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAG,OAAjB;AACA,MAAMC,qBAAqB,GAAG,KAA9B,C,CAEA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mBADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AAQFC,IAAAA,MAAM,EAAE,CAAC;AACLL,MAAAA,IAAI,EAAE,QADD;AAELM,MAAAA,UAAU,EAAE;AACRC,QAAAA,oBAAoB,EAAE;AAClBP,UAAAA,IAAI,EAAE,SADY;AAElBQ,UAAAA,OAAO,EAAE;AAFS;AADd,OAFP;AAQLC,MAAAA,oBAAoB,EAAE;AARjB,KAAD,CARN;AAmBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,aAAa,EAAE;AADT;AAnBR,GADO;;AAyBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,UAAMR,oBAAoB,GAAGM,OAAO,CAACG,OAAR,IAAmBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAnB,IAAyCH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBT,oBAAzF;AAEA,WAAO;AACHU,MAAAA,OAAO,CAACC,IAAD,EAAO;AACVJ,QAAAA,UAAU,CAACK,QAAX,GAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,cAAIC,KAAJ;;AAEA,iBAAO,CAACA,KAAK,GAAG5B,QAAQ,CAAC6B,IAAT,CAAcH,IAAd,CAAT,MAAkC,IAAzC,EAA+C;AAC3C,gBAAId,oBAAoB,IAAI,CAACX,qBAAqB,CAAC6B,IAAtB,CAA2BJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcH,KAAK,CAACD,KAApB,CAA3B,CAA7B,EAAqF;AACjF;AACH;;AAEDT,YAAAA,OAAO,CAACc,MAAR,CAAe;AACXT,cAAAA,IADW;AAEXU,cAAAA,GAAG,EAAE;AACDC,gBAAAA,KAAK,EAAE;AACHR,kBAAAA,IAAI,EAAEC,KAAK,GAAG,CADX;AAEHQ,kBAAAA,MAAM,EAAEP,KAAK,CAACD;AAFX,iBADN;AAKDS,gBAAAA,GAAG,EAAE;AACDV,kBAAAA,IAAI,EAAEC,KAAK,GAAG,CADb;AAEDQ,kBAAAA,MAAM,EAAEP,KAAK,CAACD,KAAN,GAAcC,KAAK,CAAC,CAAD,CAAL,CAASS;AAF9B;AALJ,eAFM;AAYXC,cAAAA,SAAS,EAAE;AAZA,aAAf;AAcH;AACJ,SAvBD;AAwBH;;AA1BE,KAAP;AA4BH;;AAzDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to check for tabs inside a file\r\n * @author Gyandeep Singh\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst tabRegex = /\\t+/gu;\r\nconst anyNonWhitespaceRegex = /\\S/u;\r\n\r\n//------------------------------------------------------------------------------\r\n// Public Interface\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"disallow all tabs\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-tabs\"\r\n        },\r\n        schema: [{\r\n            type: \"object\",\r\n            properties: {\r\n                allowIndentationTabs: {\r\n                    type: \"boolean\",\r\n                    default: false\r\n                }\r\n            },\r\n            additionalProperties: false\r\n        }],\r\n\r\n        messages: {\r\n            unexpectedTab: \"Unexpected tab character.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n        const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\r\n\r\n        return {\r\n            Program(node) {\r\n                sourceCode.getLines().forEach((line, index) => {\r\n                    let match;\r\n\r\n                    while ((match = tabRegex.exec(line)) !== null) {\r\n                        if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\r\n                            continue;\r\n                        }\r\n\r\n                        context.report({\r\n                            node,\r\n                            loc: {\r\n                                start: {\r\n                                    line: index + 1,\r\n                                    column: match.index\r\n                                },\r\n                                end: {\r\n                                    line: index + 1,\r\n                                    column: match.index + match[0].length\r\n                                }\r\n                            },\r\n                            messageId: \"unexpectedTab\"\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}