{"ast":null,"code":"/**\r\n * @fileoverview Rule to control spacing within function calls\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between function identifiers and their invocations\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/func-call-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            allowNewlines: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n      unexpectedNewline: \"Unexpected newline between function name and paren.\",\n      missing: \"Missing space between function name and paren.\"\n    }\n  },\n\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n    const sourceCode = context.getSourceCode();\n    const text = sourceCode.getText();\n    /**\r\n     * Check if open space is present in a function name\r\n     * @param {ASTNode} node node to evaluate\r\n     * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\r\n     * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function checkSpacing(node, leftToken, rightToken) {\n      const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n      const hasWhitespace = /\\s/u.test(textBetweenTokens);\n      const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n      /*\r\n       * never allowNewlines hasWhitespace hasNewline message\r\n       * F     F             F             F          Missing space between function name and paren.\r\n       * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n       * F     F             T             T          Unexpected newline between function name and paren.\r\n       * F     F             T             F          (OK)\r\n       * F     T             T             F          (OK)\r\n       * F     T             T             T          (OK)\r\n       * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n       * F     T             F             F          Missing space between function name and paren.\r\n       * T     T             F             F          (Invalid `never && allowNewlines`)\r\n       * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n       * T     T             T             T          (Invalid `never && allowNewlines`)\r\n       * T     T             T             F          (Invalid `never && allowNewlines`)\r\n       * T     F             T             F          Unexpected space between function name and paren.\r\n       * T     F             T             T          Unexpected space between function name and paren.\r\n       * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n       * T     F             F             F          (OK)\r\n       *\r\n       * T                   T                        Unexpected space between function name and paren.\r\n       * F                   F                        Missing space between function name and paren.\r\n       * F     F                           T          Unexpected newline between function name and paren.\r\n       */\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: {\n              line: rightToken.loc.start.line,\n              column: rightToken.loc.start.column - 1\n            }\n          },\n          messageId: \"unexpectedWhitespace\",\n\n          fix(fixer) {\n            // Don't remove comments.\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            } // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n\n\n            if (node.optional) {\n              return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n            }\n            /*\r\n             * Only autofix if there is no newline\r\n             * https://github.com/eslint/eslint/issues/7787\r\n             */\n\n\n            if (hasNewline) {\n              return null;\n            }\n\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: {\n              line: leftToken.loc.end.line,\n              column: leftToken.loc.end.column - 1\n            },\n            end: rightToken.loc.start\n          },\n          messageId: \"missing\",\n\n          fix(fixer) {\n            if (node.optional) {\n              return null; // Not sure if inserting a space to either before/after `?.` token.\n            }\n\n            return fixer.insertTextBefore(rightToken, \" \");\n          }\n\n        });\n      } else if (!never && !allowNewlines && hasNewline) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: rightToken.loc.start\n          },\n          messageId: \"unexpectedNewline\",\n\n          fix(fixer) {\n            /*\r\n             * Only autofix if there is no newline\r\n             * https://github.com/eslint/eslint/issues/7787\r\n             * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\r\n             */\n            if (!node.optional) {\n              return null;\n            } // Don't remove comments.\n\n\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            }\n\n            const range = [leftToken.range[1], rightToken.range[0]];\n            const qdToken = sourceCode.getTokenAfter(leftToken);\n\n            if (qdToken.range[0] === leftToken.range[1]) {\n              return fixer.replaceTextRange(range, \"?. \");\n            }\n\n            if (qdToken.range[1] === rightToken.range[0]) {\n              return fixer.replaceTextRange(range, \" ?.\");\n            }\n\n            return fixer.replaceTextRange(range, \" ?. \");\n          }\n\n        });\n      }\n    }\n\n    return {\n      \"CallExpression, NewExpression\"(node) {\n        const lastToken = sourceCode.getLastToken(node);\n        const lastCalleeToken = sourceCode.getLastToken(node.callee);\n        const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n        const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken); // Parens in NewExpression are optional\n\n        if (!(parenToken && parenToken.range[1] < node.range[1])) {\n          return;\n        }\n\n        checkSpacing(node, prevToken, parenToken);\n      },\n\n      ImportExpression(node) {\n        const leftToken = sourceCode.getFirstToken(node);\n        const rightToken = sourceCode.getTokenAfter(leftToken);\n        checkSpacing(node, leftToken, rightToken);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/func-call-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","allowNewlines","additionalProperties","messages","unexpectedWhitespace","unexpectedNewline","missing","create","context","never","options","sourceCode","getSourceCode","text","getText","checkSpacing","node","leftToken","rightToken","textBetweenTokens","slice","range","replace","hasWhitespace","test","hasNewline","LINEBREAK_MATCHER","report","loc","start","end","line","column","messageId","fix","fixer","commentsExistBetween","optional","replaceTextRange","removeRange","insertTextBefore","qdToken","getTokenAfter","lastToken","getLastToken","lastCalleeToken","callee","parenToken","getFirstTokenBetween","isOpeningParenToken","prevToken","getTokenBefore","isNotQuestionDotToken","ImportExpression","getFirstToken"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to control spacing within function calls\r\n * @author Matt DuVall <http://www.mattduvall.com>\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"require or disallow spacing between function identifiers and their invocations\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/func-call-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: {\r\n            anyOf: [\r\n                {\r\n                    type: \"array\",\r\n                    items: [\r\n                        {\r\n                            enum: [\"never\"]\r\n                        }\r\n                    ],\r\n                    minItems: 0,\r\n                    maxItems: 1\r\n                },\r\n                {\r\n                    type: \"array\",\r\n                    items: [\r\n                        {\r\n                            enum: [\"always\"]\r\n                        },\r\n                        {\r\n                            type: \"object\",\r\n                            properties: {\r\n                                allowNewlines: {\r\n                                    type: \"boolean\"\r\n                                }\r\n                            },\r\n                            additionalProperties: false\r\n                        }\r\n                    ],\r\n                    minItems: 0,\r\n                    maxItems: 2\r\n                }\r\n            ]\r\n        },\r\n\r\n        messages: {\r\n            unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\r\n            unexpectedNewline: \"Unexpected newline between function name and paren.\",\r\n            missing: \"Missing space between function name and paren.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const never = context.options[0] !== \"always\";\r\n        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\r\n        const sourceCode = context.getSourceCode();\r\n        const text = sourceCode.getText();\r\n\r\n        /**\r\n         * Check if open space is present in a function name\r\n         * @param {ASTNode} node node to evaluate\r\n         * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\r\n         * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkSpacing(node, leftToken, rightToken) {\r\n            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\r\n            const hasWhitespace = /\\s/u.test(textBetweenTokens);\r\n            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\r\n\r\n            /*\r\n             * never allowNewlines hasWhitespace hasNewline message\r\n             * F     F             F             F          Missing space between function name and paren.\r\n             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n             * F     F             T             T          Unexpected newline between function name and paren.\r\n             * F     F             T             F          (OK)\r\n             * F     T             T             F          (OK)\r\n             * F     T             T             T          (OK)\r\n             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n             * F     T             F             F          Missing space between function name and paren.\r\n             * T     T             F             F          (Invalid `never && allowNewlines`)\r\n             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n             * T     T             T             T          (Invalid `never && allowNewlines`)\r\n             * T     T             T             F          (Invalid `never && allowNewlines`)\r\n             * T     F             T             F          Unexpected space between function name and paren.\r\n             * T     F             T             T          Unexpected space between function name and paren.\r\n             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\r\n             * T     F             F             F          (OK)\r\n             *\r\n             * T                   T                        Unexpected space between function name and paren.\r\n             * F                   F                        Missing space between function name and paren.\r\n             * F     F                           T          Unexpected newline between function name and paren.\r\n             */\r\n\r\n            if (never && hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: leftToken.loc.end,\r\n                        end: {\r\n                            line: rightToken.loc.start.line,\r\n                            column: rightToken.loc.start.column - 1\r\n                        }\r\n                    },\r\n                    messageId: \"unexpectedWhitespace\",\r\n                    fix(fixer) {\r\n\r\n                        // Don't remove comments.\r\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\r\n                            return null;\r\n                        }\r\n\r\n                        // If `?.` exists, it doesn't hide no-unexpected-multiline errors\r\n                        if (node.optional) {\r\n                            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\r\n                        }\r\n\r\n                        /*\r\n                         * Only autofix if there is no newline\r\n                         * https://github.com/eslint/eslint/issues/7787\r\n                         */\r\n                        if (hasNewline) {\r\n                            return null;\r\n                        }\r\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\r\n                    }\r\n                });\r\n            } else if (!never && !hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: {\r\n                            line: leftToken.loc.end.line,\r\n                            column: leftToken.loc.end.column - 1\r\n                        },\r\n                        end: rightToken.loc.start\r\n                    },\r\n                    messageId: \"missing\",\r\n                    fix(fixer) {\r\n                        if (node.optional) {\r\n                            return null; // Not sure if inserting a space to either before/after `?.` token.\r\n                        }\r\n                        return fixer.insertTextBefore(rightToken, \" \");\r\n                    }\r\n                });\r\n            } else if (!never && !allowNewlines && hasNewline) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: leftToken.loc.end,\r\n                        end: rightToken.loc.start\r\n                    },\r\n                    messageId: \"unexpectedNewline\",\r\n                    fix(fixer) {\r\n\r\n                        /*\r\n                         * Only autofix if there is no newline\r\n                         * https://github.com/eslint/eslint/issues/7787\r\n                         * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\r\n                         */\r\n                        if (!node.optional) {\r\n                            return null;\r\n                        }\r\n\r\n                        // Don't remove comments.\r\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\r\n                            return null;\r\n                        }\r\n\r\n                        const range = [leftToken.range[1], rightToken.range[0]];\r\n                        const qdToken = sourceCode.getTokenAfter(leftToken);\r\n\r\n                        if (qdToken.range[0] === leftToken.range[1]) {\r\n                            return fixer.replaceTextRange(range, \"?. \");\r\n                        }\r\n                        if (qdToken.range[1] === rightToken.range[0]) {\r\n                            return fixer.replaceTextRange(range, \" ?.\");\r\n                        }\r\n                        return fixer.replaceTextRange(range, \" ?. \");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            \"CallExpression, NewExpression\"(node) {\r\n                const lastToken = sourceCode.getLastToken(node);\r\n                const lastCalleeToken = sourceCode.getLastToken(node.callee);\r\n                const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\r\n                const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken);\r\n\r\n                // Parens in NewExpression are optional\r\n                if (!(parenToken && parenToken.range[1] < node.range[1])) {\r\n                    return;\r\n                }\r\n\r\n                checkSpacing(node, prevToken, parenToken);\r\n            },\r\n\r\n            ImportExpression(node) {\r\n                const leftToken = sourceCode.getFirstToken(node);\r\n                const rightToken = sourceCode.getTokenAfter(leftToken);\r\n\r\n                checkSpacing(node, leftToken, rightToken);\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}