{"ast":null,"code":"/**\r\n * @fileoverview Ensure handling of errors when we know they exist.\r\n * @author Jamund Ferguson\r\n * @deprecated in ESLint v7.0.0\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"require error handling in callbacks\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/handle-callback-err\"\n    },\n    schema: [{\n      type: \"string\"\n    }],\n    messages: {\n      expected: \"Expected error to be handled.\"\n    }\n  },\n\n  create(context) {\n    const errorArgument = context.options[0] || \"err\";\n    /**\r\n     * Checks if the given argument should be interpreted as a regexp pattern.\r\n     * @param {string} stringToCheck The string which should be checked.\r\n     * @returns {boolean} Whether or not the string should be interpreted as a pattern.\r\n     */\n\n    function isPattern(stringToCheck) {\n      const firstChar = stringToCheck[0];\n      return firstChar === \"^\";\n    }\n    /**\r\n     * Checks if the given name matches the configured error argument.\r\n     * @param {string} name The name which should be compared.\r\n     * @returns {boolean} Whether or not the given name matches the configured error variable name.\r\n     */\n\n\n    function matchesConfiguredErrorName(name) {\n      if (isPattern(errorArgument)) {\n        const regexp = new RegExp(errorArgument, \"u\");\n        return regexp.test(name);\n      }\n\n      return name === errorArgument;\n    }\n    /**\r\n     * Get the parameters of a given function scope.\r\n     * @param {Object} scope The function scope.\r\n     * @returns {Array} All parameters of the given scope.\r\n     */\n\n\n    function getParameters(scope) {\n      return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n    }\n    /**\r\n     * Check to see if we're handling the error object properly.\r\n     * @param {ASTNode} node The AST node to check.\r\n     * @returns {void}\r\n     */\n\n\n    function checkForError(node) {\n      const scope = context.getScope(),\n            parameters = getParameters(scope),\n            firstParameter = parameters[0];\n\n      if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n        if (firstParameter.references.length === 0) {\n          context.report({\n            node,\n            messageId: \"expected\"\n          });\n        }\n      }\n    }\n\n    return {\n      FunctionDeclaration: checkForError,\n      FunctionExpression: checkForError,\n      ArrowFunctionExpression: checkForError\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/handle-callback-err.js"],"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","schema","messages","expected","create","context","errorArgument","options","isPattern","stringToCheck","firstChar","matchesConfiguredErrorName","name","regexp","RegExp","test","getParameters","scope","variables","filter","variable","defs","checkForError","node","getScope","parameters","firstParameter","references","length","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,IADV;AAGFC,IAAAA,UAAU,EAAE,EAHV;AAKFC,IAAAA,IAAI,EAAE,YALJ;AAOFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qCADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAPJ;AAaFC,IAAAA,MAAM,EAAE,CACJ;AACIL,MAAAA,IAAI,EAAE;AADV,KADI,CAbN;AAkBFM,IAAAA,QAAQ,EAAE;AACNC,MAAAA,QAAQ,EAAE;AADJ;AAlBR,GADO;;AAwBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,aAAa,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,KAA5C;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASC,SAAT,CAAmBC,aAAnB,EAAkC;AAC9B,YAAMC,SAAS,GAAGD,aAAa,CAAC,CAAD,CAA/B;AAEA,aAAOC,SAAS,KAAK,GAArB;AACH;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASC,0BAAT,CAAoCC,IAApC,EAA0C;AACtC,UAAIJ,SAAS,CAACF,aAAD,CAAb,EAA8B;AAC1B,cAAMO,MAAM,GAAG,IAAIC,MAAJ,CAAWR,aAAX,EAA0B,GAA1B,CAAf;AAEA,eAAOO,MAAM,CAACE,IAAP,CAAYH,IAAZ,CAAP;AACH;;AACD,aAAOA,IAAI,KAAKN,aAAhB;AACH;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASU,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,aAAOA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAc,CAAd,KAAoBD,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBzB,IAAjB,KAA0B,WAAjF,CAAP;AACH;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAAS0B,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,YAAMN,KAAK,GAAGZ,OAAO,CAACmB,QAAR,EAAd;AAAA,YACIC,UAAU,GAAGT,aAAa,CAACC,KAAD,CAD9B;AAAA,YAEIS,cAAc,GAAGD,UAAU,CAAC,CAAD,CAF/B;;AAIA,UAAIC,cAAc,IAAIf,0BAA0B,CAACe,cAAc,CAACd,IAAhB,CAAhD,EAAuE;AACnE,YAAIc,cAAc,CAACC,UAAf,CAA0BC,MAA1B,KAAqC,CAAzC,EAA4C;AACxCvB,UAAAA,OAAO,CAACwB,MAAR,CAAe;AAAEN,YAAAA,IAAF;AAAQO,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH;AACJ;AACJ;;AAED,WAAO;AACHC,MAAAA,mBAAmB,EAAET,aADlB;AAEHU,MAAAA,kBAAkB,EAAEV,aAFjB;AAGHW,MAAAA,uBAAuB,EAAEX;AAHtB,KAAP;AAMH;;AArFY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Ensure handling of errors when we know they exist.\r\n * @author Jamund Ferguson\r\n * @deprecated in ESLint v7.0.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        deprecated: true,\r\n\r\n        replacedBy: [],\r\n\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require error handling in callbacks\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/handle-callback-err\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"string\"\r\n            }\r\n        ],\r\n        messages: {\r\n            expected: \"Expected error to be handled.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const errorArgument = context.options[0] || \"err\";\r\n\r\n        /**\r\n         * Checks if the given argument should be interpreted as a regexp pattern.\r\n         * @param {string} stringToCheck The string which should be checked.\r\n         * @returns {boolean} Whether or not the string should be interpreted as a pattern.\r\n         */\r\n        function isPattern(stringToCheck) {\r\n            const firstChar = stringToCheck[0];\r\n\r\n            return firstChar === \"^\";\r\n        }\r\n\r\n        /**\r\n         * Checks if the given name matches the configured error argument.\r\n         * @param {string} name The name which should be compared.\r\n         * @returns {boolean} Whether or not the given name matches the configured error variable name.\r\n         */\r\n        function matchesConfiguredErrorName(name) {\r\n            if (isPattern(errorArgument)) {\r\n                const regexp = new RegExp(errorArgument, \"u\");\r\n\r\n                return regexp.test(name);\r\n            }\r\n            return name === errorArgument;\r\n        }\r\n\r\n        /**\r\n         * Get the parameters of a given function scope.\r\n         * @param {Object} scope The function scope.\r\n         * @returns {Array} All parameters of the given scope.\r\n         */\r\n        function getParameters(scope) {\r\n            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\r\n        }\r\n\r\n        /**\r\n         * Check to see if we're handling the error object properly.\r\n         * @param {ASTNode} node The AST node to check.\r\n         * @returns {void}\r\n         */\r\n        function checkForError(node) {\r\n            const scope = context.getScope(),\r\n                parameters = getParameters(scope),\r\n                firstParameter = parameters[0];\r\n\r\n            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\r\n                if (firstParameter.references.length === 0) {\r\n                    context.report({ node, messageId: \"expected\" });\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            FunctionDeclaration: checkForError,\r\n            FunctionExpression: checkForError,\r\n            ArrowFunctionExpression: checkForError\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}