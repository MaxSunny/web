{"ast":null,"code":"/**\r\n * @fileoverview Module for loading rules from files and directories.\r\n * @author Michael Ficarra\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\"),\n      path = require(\"path\");\n\nconst rulesDirCache = {}; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\r\n * Load all rule modules from specified directory.\r\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\r\n * @param {string} cwd Current working directory\r\n * @returns {Object} Loaded rule modules.\r\n */\n\nmodule.exports = function (relativeRulesDir, cwd) {\n  const rulesDir = path.resolve(cwd, relativeRulesDir); // cache will help performance as IO operation are expensive\n\n  if (rulesDirCache[rulesDir]) {\n    return rulesDirCache[rulesDir];\n  }\n\n  const rules = Object.create(null);\n  fs.readdirSync(rulesDir).forEach(file => {\n    if (path.extname(file) !== \".js\") {\n      return;\n    }\n\n    rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\n  });\n  rulesDirCache[rulesDir] = rules;\n  return rules;\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/cli-engine/load-rules.js"],"names":["fs","require","path","rulesDirCache","module","exports","relativeRulesDir","cwd","rulesDir","resolve","rules","Object","create","readdirSync","forEach","file","extname","slice","join"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AAAA,MACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;;AAGA,MAAME,aAAa,GAAG,EAAtB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,gBAAT,EAA2BC,GAA3B,EAAgC;AAC7C,QAAMC,QAAQ,GAAGN,IAAI,CAACO,OAAL,CAAaF,GAAb,EAAkBD,gBAAlB,CAAjB,CAD6C,CAG7C;;AACA,MAAIH,aAAa,CAACK,QAAD,CAAjB,EAA6B;AACzB,WAAOL,aAAa,CAACK,QAAD,CAApB;AACH;;AAED,QAAME,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;AAEAZ,EAAAA,EAAE,CAACa,WAAH,CAAeL,QAAf,EAAyBM,OAAzB,CAAiCC,IAAI,IAAI;AACrC,QAAIb,IAAI,CAACc,OAAL,CAAaD,IAAb,MAAuB,KAA3B,EAAkC;AAC9B;AACH;;AACDL,IAAAA,KAAK,CAACK,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,CAAL,GAA2BhB,OAAO,CAACC,IAAI,CAACgB,IAAL,CAAUV,QAAV,EAAoBO,IAApB,CAAD,CAAlC;AACH,GALD;AAMAZ,EAAAA,aAAa,CAACK,QAAD,CAAb,GAA0BE,KAA1B;AAEA,SAAOA,KAAP;AACH,CAnBD","sourcesContent":["/**\r\n * @fileoverview Module for loading rules from files and directories.\r\n * @author Michael Ficarra\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst fs = require(\"fs\"),\r\n    path = require(\"path\");\r\n\r\nconst rulesDirCache = {};\r\n\r\n//------------------------------------------------------------------------------\r\n// Public Interface\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Load all rule modules from specified directory.\r\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\r\n * @param {string} cwd Current working directory\r\n * @returns {Object} Loaded rule modules.\r\n */\r\nmodule.exports = function(relativeRulesDir, cwd) {\r\n    const rulesDir = path.resolve(cwd, relativeRulesDir);\r\n\r\n    // cache will help performance as IO operation are expensive\r\n    if (rulesDirCache[rulesDir]) {\r\n        return rulesDirCache[rulesDir];\r\n    }\r\n\r\n    const rules = Object.create(null);\r\n\r\n    fs.readdirSync(rulesDir).forEach(file => {\r\n        if (path.extname(file) !== \".js\") {\r\n            return;\r\n        }\r\n        rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\r\n    });\r\n    rulesDirCache[rulesDir] = rules;\r\n\r\n    return rules;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}