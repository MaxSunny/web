{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow whitespace before properties\r\n * @author Kai Cataldo\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow whitespace before properties\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n    },\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Reports whitespace before property token\r\n     * @param {ASTNode} node the node to report in the event of an error\r\n     * @param {Token} leftToken the left token\r\n     * @param {Token} rightToken the right token\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function reportError(node, leftToken, rightToken) {\n      context.report({\n        node,\n        messageId: \"unexpectedWhitespace\",\n        data: {\n          propName: sourceCode.getText(node.property)\n        },\n\n        fix(fixer) {\n          let replacementText = \"\";\n\n          if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n            /*\r\n             * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\r\n             * Don't fix this case.\r\n             */\n            return null;\n          } // Don't fix if comments exist.\n\n\n          if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n            return null;\n          }\n\n          if (node.optional) {\n            replacementText = \"?.\";\n          } else if (!node.computed) {\n            replacementText = \".\";\n          }\n\n          return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n        }\n\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        let rightToken;\n        let leftToken;\n\n        if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n          return;\n        }\n\n        if (node.computed) {\n          rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n          leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n        } else {\n          rightToken = sourceCode.getFirstToken(node.property);\n          leftToken = sourceCode.getTokenBefore(rightToken, 1);\n        }\n\n        if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n          reportError(node, leftToken, rightToken);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-whitespace-before-property.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","messages","unexpectedWhitespace","create","context","sourceCode","getSourceCode","reportError","node","leftToken","rightToken","report","messageId","data","propName","getText","property","fix","fixer","replacementText","computed","optional","isDecimalInteger","object","commentsExistBetween","replaceTextRange","range","MemberExpression","isTokenOnSameLine","getTokenBefore","isOpeningBracketToken","getFirstToken","isSpaceBetweenTokens"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow whitespace before properties\r\n * @author Kai Cataldo\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"disallow whitespace before properties\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Reports whitespace before property token\r\n         * @param {ASTNode} node the node to report in the event of an error\r\n         * @param {Token} leftToken the left token\r\n         * @param {Token} rightToken the right token\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function reportError(node, leftToken, rightToken) {\r\n            context.report({\r\n                node,\r\n                messageId: \"unexpectedWhitespace\",\r\n                data: {\r\n                    propName: sourceCode.getText(node.property)\r\n                },\r\n                fix(fixer) {\r\n                    let replacementText = \"\";\r\n\r\n                    if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\r\n\r\n                        /*\r\n                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\r\n                         * Don't fix this case.\r\n                         */\r\n                        return null;\r\n                    }\r\n\r\n                    // Don't fix if comments exist.\r\n                    if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (node.optional) {\r\n                        replacementText = \"?.\";\r\n                    } else if (!node.computed) {\r\n                        replacementText = \".\";\r\n                    }\r\n\r\n                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\r\n                }\r\n            });\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            MemberExpression(node) {\r\n                let rightToken;\r\n                let leftToken;\r\n\r\n                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\r\n                    return;\r\n                }\r\n\r\n                if (node.computed) {\r\n                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\r\n                    leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\r\n                } else {\r\n                    rightToken = sourceCode.getFirstToken(node.property);\r\n                    leftToken = sourceCode.getTokenBefore(rightToken, 1);\r\n                }\r\n\r\n                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\r\n                    reportError(node, leftToken, rightToken);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}