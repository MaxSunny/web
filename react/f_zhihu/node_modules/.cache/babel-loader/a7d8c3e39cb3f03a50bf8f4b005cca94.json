{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag duplicate arguments\r\n * @author Jamund Ferguson\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate arguments in `function` definitions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-args\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate param '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\r\n     * Checks whether or not a given definition is a parameter's.\r\n     * @param {eslint-scope.DefEntry} def A definition to check.\r\n     * @returns {boolean} `true` if the definition is a parameter's.\r\n     */\n    function isParameter(def) {\n      return def.type === \"Parameter\";\n    }\n    /**\r\n     * Determines if a given node has duplicate parameters.\r\n     * @param {ASTNode} node The node to check.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n\n    function checkParams(node) {\n      const variables = context.getDeclaredVariables(node);\n\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i]; // Checks and reports duplications.\n\n        const defs = variable.defs.filter(isParameter);\n\n        if (defs.length >= 2) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name: variable.name\n            }\n          });\n        }\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: checkParams,\n      FunctionExpression: checkParams\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-dupe-args.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","isParameter","def","checkParams","node","variables","getDeclaredVariables","i","length","variable","defs","filter","report","messageId","data","name","FunctionDeclaration","FunctionExpression"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wDADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;AACQ,aAASC,WAAT,CAAqBC,GAArB,EAA0B;AACtB,aAAOA,GAAG,CAACX,IAAJ,KAAa,WAApB;AACH;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAASY,WAAT,CAAqBC,IAArB,EAA2B;AACvB,YAAMC,SAAS,GAAGL,OAAO,CAACM,oBAAR,CAA6BF,IAA7B,CAAlB;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AACvC,cAAME,QAAQ,GAAGJ,SAAS,CAACE,CAAD,CAA1B,CADuC,CAGvC;;AACA,cAAMG,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBV,WAArB,CAAb;;AAEA,YAAIS,IAAI,CAACF,MAAL,IAAe,CAAnB,EAAsB;AAClBR,UAAAA,OAAO,CAACY,MAAR,CAAe;AACXR,YAAAA,IADW;AAEXS,YAAAA,SAAS,EAAE,YAFA;AAGXC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,IAAI,EAAEN,QAAQ,CAACM;AAAjB;AAHK,WAAf;AAKH;AACJ;AACJ,KAtCW,CAwCZ;AACA;AACA;;;AAEA,WAAO;AACHC,MAAAA,mBAAmB,EAAEb,WADlB;AAEHc,MAAAA,kBAAkB,EAAEd;AAFjB,KAAP;AAKH;;AAlEY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag duplicate arguments\r\n * @author Jamund Ferguson\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow duplicate arguments in `function` definitions\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-dupe-args\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Duplicate param '{{name}}'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Helpers\r\n        //--------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Checks whether or not a given definition is a parameter's.\r\n         * @param {eslint-scope.DefEntry} def A definition to check.\r\n         * @returns {boolean} `true` if the definition is a parameter's.\r\n         */\r\n        function isParameter(def) {\r\n            return def.type === \"Parameter\";\r\n        }\r\n\r\n        /**\r\n         * Determines if a given node has duplicate parameters.\r\n         * @param {ASTNode} node The node to check.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkParams(node) {\r\n            const variables = context.getDeclaredVariables(node);\r\n\r\n            for (let i = 0; i < variables.length; ++i) {\r\n                const variable = variables[i];\r\n\r\n                // Checks and reports duplications.\r\n                const defs = variable.defs.filter(isParameter);\r\n\r\n                if (defs.length >= 2) {\r\n                    context.report({\r\n                        node,\r\n                        messageId: \"unexpected\",\r\n                        data: { name: variable.name }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            FunctionDeclaration: checkParams,\r\n            FunctionExpression: checkParams\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}