{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow returning values from setters\r\n * @author Milos Djermanovic\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  findVariable\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Determines whether the given identifier node is a reference to a global variable.\r\n * @param {ASTNode} node `Identifier` node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} True if the identifier is a reference to a global variable.\r\n */\n\n\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n/**\r\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\r\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @param {string} objectName Name of the global object.\r\n * @param {string} methodName Name of the method.\r\n * @param {number} index The given position.\r\n * @returns {boolean} `true` if the node is argument at the given position.\r\n */\n\n\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n  const callNode = node.parent;\n  return callNode.type === \"CallExpression\" && callNode.arguments[index] === node && astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) && isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n/**\r\n * Determines whether the given node is used as a property descriptor.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} `true` if the node is a property descriptor.\r\n */\n\n\nfunction isPropertyDescriptor(node, scope) {\n  if (isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) || isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)) {\n    return true;\n  }\n\n  const parent = node.parent;\n\n  if (parent.type === \"Property\" && parent.value === node) {\n    const grandparent = parent.parent;\n\n    if (grandparent.type === \"ObjectExpression\" && (isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) || isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Determines whether the given function node is used as a setter function.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} `true` if the node is a setter.\r\n */\n\n\nfunction isSetter(node, scope) {\n  const parent = node.parent;\n\n  if ((parent.type === \"Property\" || parent.type === \"MethodDefinition\") && parent.kind === \"set\" && parent.value === node) {\n    // Setter in an object literal or in a class\n    return true;\n  }\n\n  if (parent.type === \"Property\" && parent.value === node && astUtils.getStaticPropertyName(parent) === \"set\" && parent.parent.type === \"ObjectExpression\" && isPropertyDescriptor(parent.parent, scope)) {\n    // Setter in a property descriptor\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Finds function's outer scope.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {Scope} Function's outer scope.\r\n */\n\n\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n\n  return upper;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from setters\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-setter-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Setter cannot return a value.\"\n    }\n  },\n\n  create(context) {\n    let funcInfo = null;\n    /**\r\n     * Creates and pushes to the stack a function info object for the given function node.\r\n     * @param {ASTNode} node The function node.\r\n     * @returns {void}\r\n     */\n\n    function enterFunction(node) {\n      const outerScope = getOuterScope(context.getScope());\n      funcInfo = {\n        upper: funcInfo,\n        isSetter: isSetter(node, outerScope)\n      };\n    }\n    /**\r\n     * Pops the current function info object from the stack.\r\n     * @returns {void}\r\n     */\n\n\n    function exitFunction() {\n      funcInfo = funcInfo.upper;\n    }\n    /**\r\n     * Reports the given node.\r\n     * @param {ASTNode} node Node to report.\r\n     * @returns {void}\r\n     */\n\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n\n    return {\n      /*\r\n       * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\r\n       * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\r\n       *\r\n       * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\r\n       * but that's out of scope for this rule.\r\n       */\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n\n      ArrowFunctionExpression(node) {\n        enterFunction(node);\n\n        if (funcInfo.isSetter && node.expression) {\n          // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n          report(node.body);\n        }\n      },\n\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n\n      ReturnStatement(node) {\n        // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n        if (funcInfo && funcInfo.isSetter && node.argument) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-setter-return.js"],"names":["astUtils","require","findVariable","isGlobalReference","node","scope","variable","type","defs","length","isArgumentOfGlobalMethodCall","objectName","methodName","index","callNode","parent","arguments","isSpecificMemberAccess","callee","skipChainExpression","object","isPropertyDescriptor","value","grandparent","isSetter","kind","getStaticPropertyName","getOuterScope","upper","module","exports","meta","docs","description","recommended","url","schema","messages","returnsValue","create","context","funcInfo","enterFunction","outerScope","getScope","exitFunction","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","expression","body","ReturnStatement","argument"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to disallow returning values from setters\r\n * @author Milos Djermanovic\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\nconst { findVariable } = require(\"eslint-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Determines whether the given identifier node is a reference to a global variable.\r\n * @param {ASTNode} node `Identifier` node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} True if the identifier is a reference to a global variable.\r\n */\r\nfunction isGlobalReference(node, scope) {\r\n    const variable = findVariable(scope, node);\r\n\r\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\r\n}\r\n\r\n/**\r\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\r\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @param {string} objectName Name of the global object.\r\n * @param {string} methodName Name of the method.\r\n * @param {number} index The given position.\r\n * @returns {boolean} `true` if the node is argument at the given position.\r\n */\r\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\r\n    const callNode = node.parent;\r\n\r\n    return callNode.type === \"CallExpression\" &&\r\n        callNode.arguments[index] === node &&\r\n        astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) &&\r\n        isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\r\n}\r\n\r\n/**\r\n * Determines whether the given node is used as a property descriptor.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} `true` if the node is a property descriptor.\r\n */\r\nfunction isPropertyDescriptor(node, scope) {\r\n    if (\r\n        isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) ||\r\n        isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    const parent = node.parent;\r\n\r\n    if (\r\n        parent.type === \"Property\" &&\r\n        parent.value === node\r\n    ) {\r\n        const grandparent = parent.parent;\r\n\r\n        if (\r\n            grandparent.type === \"ObjectExpression\" &&\r\n            (\r\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) ||\r\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1)\r\n            )\r\n        ) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Determines whether the given function node is used as a setter function.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} `true` if the node is a setter.\r\n */\r\nfunction isSetter(node, scope) {\r\n    const parent = node.parent;\r\n\r\n    if (\r\n        (parent.type === \"Property\" || parent.type === \"MethodDefinition\") &&\r\n        parent.kind === \"set\" &&\r\n        parent.value === node\r\n    ) {\r\n\r\n        // Setter in an object literal or in a class\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        parent.type === \"Property\" &&\r\n        parent.value === node &&\r\n        astUtils.getStaticPropertyName(parent) === \"set\" &&\r\n        parent.parent.type === \"ObjectExpression\" &&\r\n        isPropertyDescriptor(parent.parent, scope)\r\n    ) {\r\n\r\n        // Setter in a property descriptor\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Finds function's outer scope.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {Scope} Function's outer scope.\r\n */\r\nfunction getOuterScope(scope) {\r\n    const upper = scope.upper;\r\n\r\n    if (upper.type === \"function-expression-name\") {\r\n        return upper.upper;\r\n    }\r\n\r\n    return upper;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow returning values from setters\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-setter-return\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            returnsValue: \"Setter cannot return a value.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        let funcInfo = null;\r\n\r\n        /**\r\n         * Creates and pushes to the stack a function info object for the given function node.\r\n         * @param {ASTNode} node The function node.\r\n         * @returns {void}\r\n         */\r\n        function enterFunction(node) {\r\n            const outerScope = getOuterScope(context.getScope());\r\n\r\n            funcInfo = {\r\n                upper: funcInfo,\r\n                isSetter: isSetter(node, outerScope)\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Pops the current function info object from the stack.\r\n         * @returns {void}\r\n         */\r\n        function exitFunction() {\r\n            funcInfo = funcInfo.upper;\r\n        }\r\n\r\n        /**\r\n         * Reports the given node.\r\n         * @param {ASTNode} node Node to report.\r\n         * @returns {void}\r\n         */\r\n        function report(node) {\r\n            context.report({ node, messageId: \"returnsValue\" });\r\n        }\r\n\r\n        return {\r\n\r\n            /*\r\n             * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\r\n             * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\r\n             *\r\n             * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\r\n             * but that's out of scope for this rule.\r\n             */\r\n            FunctionDeclaration: enterFunction,\r\n            FunctionExpression: enterFunction,\r\n            ArrowFunctionExpression(node) {\r\n                enterFunction(node);\r\n\r\n                if (funcInfo.isSetter && node.expression) {\r\n\r\n                    // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\r\n                    report(node.body);\r\n                }\r\n            },\r\n\r\n            \"FunctionDeclaration:exit\": exitFunction,\r\n            \"FunctionExpression:exit\": exitFunction,\r\n            \"ArrowFunctionExpression:exit\": exitFunction,\r\n\r\n            ReturnStatement(node) {\r\n\r\n                // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\r\n                if (funcInfo && funcInfo.isSetter && node.argument) {\r\n                    report(node);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}