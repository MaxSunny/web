{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag references to undeclared variables.\r\n * @author Mark Macdonald\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks if the given node is the argument of a typeof operator.\r\n * @param {ASTNode} node The AST node being checked.\r\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\r\n */\n\nfunction hasTypeOfOperator(node) {\n  const parent = node.parent;\n  return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-undef\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        typeof: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      undef: \"'{{name}}' is not defined.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    const considerTypeOf = options && options.typeof === true || false;\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        globalScope.through.forEach(ref => {\n          const identifier = ref.identifier;\n\n          if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n            return;\n          }\n\n          context.report({\n            node: identifier,\n            messageId: \"undef\",\n            data: identifier\n          });\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-undef.js"],"names":["hasTypeOfOperator","node","parent","type","operator","module","exports","meta","docs","description","recommended","url","schema","properties","typeof","default","additionalProperties","messages","undef","create","context","options","considerTypeOf","globalScope","getScope","through","forEach","ref","identifier","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,QAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;AAEA,SAAOA,MAAM,CAACC,IAAP,KAAgB,iBAAhB,IAAqCD,MAAM,CAACE,QAAP,KAAoB,QAAhE;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFJ,IAAAA,IAAI,EAAE,SADJ;AAGFK,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qFADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CACJ;AACIT,MAAAA,IAAI,EAAE,QADV;AAEIU,MAAAA,UAAU,EAAE;AACRC,QAAAA,MAAM,EAAE;AACJX,UAAAA,IAAI,EAAE,SADF;AAEJY,UAAAA,OAAO,EAAE;AAFL;AADA,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KADI,CATN;AAqBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD;AArBR,GADO;;AA2BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,CAAhB;AACA,UAAMC,cAAc,GAAGD,OAAO,IAAIA,OAAO,CAACP,MAAR,KAAmB,IAA9B,IAAsC,KAA7D;AAEA,WAAO;AACH,uBAA2B;AACvB,cAAMS,WAAW,GAAGH,OAAO,CAACI,QAAR,EAApB;AAEAD,QAAAA,WAAW,CAACE,OAAZ,CAAoBC,OAApB,CAA4BC,GAAG,IAAI;AAC/B,gBAAMC,UAAU,GAAGD,GAAG,CAACC,UAAvB;;AAEA,cAAI,CAACN,cAAD,IAAmBtB,iBAAiB,CAAC4B,UAAD,CAAxC,EAAsD;AAClD;AACH;;AAEDR,UAAAA,OAAO,CAACS,MAAR,CAAe;AACX5B,YAAAA,IAAI,EAAE2B,UADK;AAEXE,YAAAA,SAAS,EAAE,OAFA;AAGXC,YAAAA,IAAI,EAAEH;AAHK,WAAf;AAKH,SAZD;AAaH;;AAjBE,KAAP;AAmBH;;AAlDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag references to undeclared variables.\r\n * @author Mark Macdonald\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if the given node is the argument of a typeof operator.\r\n * @param {ASTNode} node The AST node being checked.\r\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\r\n */\r\nfunction hasTypeOfOperator(node) {\r\n    const parent = node.parent;\r\n\r\n    return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-undef\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    typeof: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n        messages: {\r\n            undef: \"'{{name}}' is not defined.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const options = context.options[0];\r\n        const considerTypeOf = options && options.typeof === true || false;\r\n\r\n        return {\r\n            \"Program:exit\"(/* node */) {\r\n                const globalScope = context.getScope();\r\n\r\n                globalScope.through.forEach(ref => {\r\n                    const identifier = ref.identifier;\r\n\r\n                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {\r\n                        return;\r\n                    }\r\n\r\n                    context.report({\r\n                        node: identifier,\r\n                        messageId: \"undef\",\r\n                        data: identifier\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}