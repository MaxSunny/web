{"ast":null,"code":"/**\r\n * @fileoverview restrict values that can be used as Promise rejection reasons\r\n * @author Teddy Katz\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require using Error objects as Promise rejection reasons\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-promise-reject-errors\"\n    },\n    fixable: null,\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowEmptyReject: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      rejectAnError: \"Expected the Promise rejection reason to be an Error.\"\n    }\n  },\n\n  create(context) {\n    const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject; //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\r\n     * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error\r\n     * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise\r\n     * @returns {void}\r\n     */\n\n    function checkRejectCall(callExpression) {\n      if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {\n        return;\n      }\n\n      if (!callExpression.arguments.length || !astUtils.couldBeError(callExpression.arguments[0]) || callExpression.arguments[0].type === \"Identifier\" && callExpression.arguments[0].name === \"undefined\") {\n        context.report({\n          node: callExpression,\n          messageId: \"rejectAnError\"\n        });\n      }\n    }\n    /**\r\n     * Determines whether a function call is a Promise.reject() call\r\n     * @param {ASTNode} node A CallExpression node\r\n     * @returns {boolean} `true` if the call is a Promise.reject() call\r\n     */\n\n\n    function isPromiseRejectCall(node) {\n      return astUtils.isSpecificMemberAccess(node.callee, \"Promise\", \"reject\");\n    } //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n\n    return {\n      // Check `Promise.reject(value)` calls.\n      CallExpression(node) {\n        if (isPromiseRejectCall(node)) {\n          checkRejectCall(node);\n        }\n      },\n\n      /*\r\n       * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.\r\n       * This function is run on \"NewExpression:exit\" instead of \"NewExpression\" to ensure that\r\n       * the nodes in the expression already have the `parent` property.\r\n       */\n      \"NewExpression:exit\"(node) {\n        if (node.callee.type === \"Identifier\" && node.callee.name === \"Promise\" && node.arguments.length && astUtils.isFunction(node.arguments[0]) && node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === \"Identifier\") {\n          context.getDeclaredVariables(node.arguments[0])\n          /*\r\n           * Find the first variable that matches the second parameter's name.\r\n           * If the first parameter has the same name as the second parameter, then the variable will actually\r\n           * be \"declared\" when the first parameter is evaluated, but then it will be immediately overwritten\r\n           * by the second parameter. It's not possible for an expression with the variable to be evaluated before\r\n           * the variable is overwritten, because functions with duplicate parameters cannot have destructuring or\r\n           * default assignments in their parameter lists. Therefore, it's not necessary to explicitly account for\r\n           * this case.\r\n           */\n          .find(variable => variable.name === node.arguments[0].params[1].name) // Get the references to that variable.\n          .references // Only check the references that read the parameter's value.\n          .filter(ref => ref.isRead()) // Only check the references that are used as the callee in a function call, e.g. `reject(foo)`.\n          .filter(ref => ref.identifier.parent.type === \"CallExpression\" && ref.identifier === ref.identifier.parent.callee) // Check the argument of the function call to determine whether it's an Error.\n          .forEach(ref => checkRejectCall(ref.identifier.parent));\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/prefer-promise-reject-errors.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","allowEmptyReject","default","additionalProperties","messages","rejectAnError","create","context","ALLOW_EMPTY_REJECT","options","length","checkRejectCall","callExpression","arguments","couldBeError","name","report","node","messageId","isPromiseRejectCall","isSpecificMemberAccess","callee","CallExpression","isFunction","params","getDeclaredVariables","find","variable","references","filter","ref","isRead","identifier","parent","forEach"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,0DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,OAAO,EAAE,IATP;AAWFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,QADV;AAEIO,MAAAA,UAAU,EAAE;AACRC,QAAAA,gBAAgB,EAAE;AAAER,UAAAA,IAAI,EAAE,SAAR;AAAmBS,UAAAA,OAAO,EAAE;AAA5B;AADV,OAFhB;AAKIC,MAAAA,oBAAoB,EAAE;AAL1B,KADI,CAXN;AAqBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,aAAa,EAAE;AADT;AArBR,GADO;;AA2BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,IAA0BH,OAAO,CAACE,OAAR,CAAgB,CAAhB,EAAmBR,gBAAxE,CAFY,CAIZ;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASU,eAAT,CAAyBC,cAAzB,EAAyC;AACrC,UAAI,CAACA,cAAc,CAACC,SAAf,CAAyBH,MAA1B,IAAoCF,kBAAxC,EAA4D;AACxD;AACH;;AACD,UACI,CAACI,cAAc,CAACC,SAAf,CAAyBH,MAA1B,IACA,CAACtB,QAAQ,CAAC0B,YAAT,CAAsBF,cAAc,CAACC,SAAf,CAAyB,CAAzB,CAAtB,CADD,IAEAD,cAAc,CAACC,SAAf,CAAyB,CAAzB,EAA4BpB,IAA5B,KAAqC,YAArC,IAAqDmB,cAAc,CAACC,SAAf,CAAyB,CAAzB,EAA4BE,IAA5B,KAAqC,WAH9F,EAIE;AACER,QAAAA,OAAO,CAACS,MAAR,CAAe;AACXC,UAAAA,IAAI,EAAEL,cADK;AAEXM,UAAAA,SAAS,EAAE;AAFA,SAAf;AAIH;AACJ;AAED;AACR;AACA;AACA;AACA;;;AACQ,aAASC,mBAAT,CAA6BF,IAA7B,EAAmC;AAC/B,aAAO7B,QAAQ,CAACgC,sBAAT,CAAgCH,IAAI,CAACI,MAArC,EAA6C,SAA7C,EAAwD,QAAxD,CAAP;AACH,KApCW,CAsCZ;AACA;AACA;;;AAEA,WAAO;AAEH;AACAC,MAAAA,cAAc,CAACL,IAAD,EAAO;AACjB,YAAIE,mBAAmB,CAACF,IAAD,CAAvB,EAA+B;AAC3BN,UAAAA,eAAe,CAACM,IAAD,CAAf;AACH;AACJ,OAPE;;AASH;AACZ;AACA;AACA;AACA;AACY,2BAAqBA,IAArB,EAA2B;AACvB,YACIA,IAAI,CAACI,MAAL,CAAY5B,IAAZ,KAAqB,YAArB,IAAqCwB,IAAI,CAACI,MAAL,CAAYN,IAAZ,KAAqB,SAA1D,IACAE,IAAI,CAACJ,SAAL,CAAeH,MADf,IACyBtB,QAAQ,CAACmC,UAAT,CAAoBN,IAAI,CAACJ,SAAL,CAAe,CAAf,CAApB,CADzB,IAEAI,IAAI,CAACJ,SAAL,CAAe,CAAf,EAAkBW,MAAlB,CAAyBd,MAAzB,GAAkC,CAFlC,IAEuCO,IAAI,CAACJ,SAAL,CAAe,CAAf,EAAkBW,MAAlB,CAAyB,CAAzB,EAA4B/B,IAA5B,KAAqC,YAHhF,EAIE;AACEc,UAAAA,OAAO,CAACkB,oBAAR,CAA6BR,IAAI,CAACJ,SAAL,CAAe,CAAf,CAA7B;AAEI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVoB,WAWKa,IAXL,CAWUC,QAAQ,IAAIA,QAAQ,CAACZ,IAAT,KAAkBE,IAAI,CAACJ,SAAL,CAAe,CAAf,EAAkBW,MAAlB,CAAyB,CAAzB,EAA4BT,IAXpE,EAaI;AAbJ,WAcKa,UAdL,CAgBI;AAhBJ,WAiBKC,MAjBL,CAiBYC,GAAG,IAAIA,GAAG,CAACC,MAAJ,EAjBnB,EAmBI;AAnBJ,WAoBKF,MApBL,CAoBYC,GAAG,IAAIA,GAAG,CAACE,UAAJ,CAAeC,MAAf,CAAsBxC,IAAtB,KAA+B,gBAA/B,IAAmDqC,GAAG,CAACE,UAAJ,KAAmBF,GAAG,CAACE,UAAJ,CAAeC,MAAf,CAAsBZ,MApB/G,EAsBI;AAtBJ,WAuBKa,OAvBL,CAuBaJ,GAAG,IAAInB,eAAe,CAACmB,GAAG,CAACE,UAAJ,CAAeC,MAAhB,CAvBnC;AAwBH;AACJ;;AA7CE,KAAP;AA+CH;;AApHY,CAAjB","sourcesContent":["/**\r\n * @fileoverview restrict values that can be used as Promise rejection reasons\r\n * @author Teddy Katz\r\n */\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"require using Error objects as Promise rejection reasons\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/prefer-promise-reject-errors\"\r\n        },\r\n\r\n        fixable: null,\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allowEmptyReject: { type: \"boolean\", default: false }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ],\r\n\r\n        messages: {\r\n            rejectAnError: \"Expected the Promise rejection reason to be an Error.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject;\r\n\r\n        //----------------------------------------------------------------------\r\n        // Helpers\r\n        //----------------------------------------------------------------------\r\n\r\n        /**\r\n         * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error\r\n         * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise\r\n         * @returns {void}\r\n         */\r\n        function checkRejectCall(callExpression) {\r\n            if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {\r\n                return;\r\n            }\r\n            if (\r\n                !callExpression.arguments.length ||\r\n                !astUtils.couldBeError(callExpression.arguments[0]) ||\r\n                callExpression.arguments[0].type === \"Identifier\" && callExpression.arguments[0].name === \"undefined\"\r\n            ) {\r\n                context.report({\r\n                    node: callExpression,\r\n                    messageId: \"rejectAnError\"\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Determines whether a function call is a Promise.reject() call\r\n         * @param {ASTNode} node A CallExpression node\r\n         * @returns {boolean} `true` if the call is a Promise.reject() call\r\n         */\r\n        function isPromiseRejectCall(node) {\r\n            return astUtils.isSpecificMemberAccess(node.callee, \"Promise\", \"reject\");\r\n        }\r\n\r\n        //----------------------------------------------------------------------\r\n        // Public\r\n        //----------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            // Check `Promise.reject(value)` calls.\r\n            CallExpression(node) {\r\n                if (isPromiseRejectCall(node)) {\r\n                    checkRejectCall(node);\r\n                }\r\n            },\r\n\r\n            /*\r\n             * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.\r\n             * This function is run on \"NewExpression:exit\" instead of \"NewExpression\" to ensure that\r\n             * the nodes in the expression already have the `parent` property.\r\n             */\r\n            \"NewExpression:exit\"(node) {\r\n                if (\r\n                    node.callee.type === \"Identifier\" && node.callee.name === \"Promise\" &&\r\n                    node.arguments.length && astUtils.isFunction(node.arguments[0]) &&\r\n                    node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === \"Identifier\"\r\n                ) {\r\n                    context.getDeclaredVariables(node.arguments[0])\r\n\r\n                        /*\r\n                         * Find the first variable that matches the second parameter's name.\r\n                         * If the first parameter has the same name as the second parameter, then the variable will actually\r\n                         * be \"declared\" when the first parameter is evaluated, but then it will be immediately overwritten\r\n                         * by the second parameter. It's not possible for an expression with the variable to be evaluated before\r\n                         * the variable is overwritten, because functions with duplicate parameters cannot have destructuring or\r\n                         * default assignments in their parameter lists. Therefore, it's not necessary to explicitly account for\r\n                         * this case.\r\n                         */\r\n                        .find(variable => variable.name === node.arguments[0].params[1].name)\r\n\r\n                        // Get the references to that variable.\r\n                        .references\r\n\r\n                        // Only check the references that read the parameter's value.\r\n                        .filter(ref => ref.isRead())\r\n\r\n                        // Only check the references that are used as the callee in a function call, e.g. `reject(foo)`.\r\n                        .filter(ref => ref.identifier.parent.type === \"CallExpression\" && ref.identifier === ref.identifier.parent.callee)\r\n\r\n                        // Check the argument of the function call to determine whether it's an Error.\r\n                        .forEach(ref => checkRejectCall(ref.identifier.parent));\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}