{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow returning values from Promise executor functions\r\n * @author Milos Djermanovic\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  findVariable\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\n/**\r\n * Determines whether the given identifier node is a reference to a global variable.\r\n * @param {ASTNode} node `Identifier` node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} True if the identifier is a reference to a global variable.\r\n */\n\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n/**\r\n * Finds function's outer scope.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {Scope} Function's outer scope.\r\n */\n\n\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n\n  return upper;\n}\n/**\r\n * Determines whether the given function node is used as a Promise executor.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {boolean} `true` if the node is a Promise executor.\r\n */\n\n\nfunction isPromiseExecutor(node, scope) {\n  const parent = node.parent;\n  return parent.type === \"NewExpression\" && parent.arguments[0] === node && parent.callee.type === \"Identifier\" && parent.callee.name === \"Promise\" && isGlobalReference(parent.callee, getOuterScope(scope));\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from Promise executor functions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Return values from promise executor functions cannot be read.\"\n    }\n  },\n\n  create(context) {\n    let funcInfo = null;\n    /**\r\n     * Reports the given node.\r\n     * @param {ASTNode} node Node to report.\r\n     * @returns {void}\r\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n\n    return {\n      onCodePathStart(_, node) {\n        funcInfo = {\n          upper: funcInfo,\n          shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\n        };\n\n        if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\n          report(node.body);\n        }\n      },\n\n      onCodePathEnd() {\n        funcInfo = funcInfo.upper;\n      },\n\n      ReturnStatement(node) {\n        if (funcInfo.shouldCheck && node.argument) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-promise-executor-return.js"],"names":["findVariable","require","functionTypesToCheck","Set","isGlobalReference","node","scope","variable","type","defs","length","getOuterScope","upper","isPromiseExecutor","parent","arguments","callee","name","module","exports","meta","docs","description","recommended","url","schema","messages","returnsValue","create","context","funcInfo","report","messageId","onCodePathStart","_","shouldCheck","has","getScope","expression","body","onCodePathEnd","ReturnStatement","argument"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,cAAD,CAAhC,C,CAEA;AACA;AACA;;;AAEA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,yBAAD,EAA4B,oBAA5B,CAAR,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AACpC,QAAMC,QAAQ,GAAGP,YAAY,CAACM,KAAD,EAAQD,IAAR,CAA7B;AAEA,SAAOE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACD,KAAT,CAAeE,IAAf,KAAwB,QAA7C,IAAyDD,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,CAAzF;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBL,KAAvB,EAA8B;AAC1B,QAAMM,KAAK,GAAGN,KAAK,CAACM,KAApB;;AAEA,MAAIA,KAAK,CAACJ,IAAN,KAAe,0BAAnB,EAA+C;AAC3C,WAAOI,KAAK,CAACA,KAAb;AACH;;AACD,SAAOA,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BR,IAA3B,EAAiCC,KAAjC,EAAwC;AACpC,QAAMQ,MAAM,GAAGT,IAAI,CAACS,MAApB;AAEA,SAAOA,MAAM,CAACN,IAAP,KAAgB,eAAhB,IACHM,MAAM,CAACC,SAAP,CAAiB,CAAjB,MAAwBV,IADrB,IAEHS,MAAM,CAACE,MAAP,CAAcR,IAAd,KAAuB,YAFpB,IAGHM,MAAM,CAACE,MAAP,CAAcC,IAAd,KAAuB,SAHpB,IAIHb,iBAAiB,CAACU,MAAM,CAACE,MAAR,EAAgBL,aAAa,CAACL,KAAD,CAA7B,CAJrB;AAKH,C,CAED;AACA;AACA;;AAEA;;;AACAY,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFZ,IAAAA,IAAI,EAAE,SADJ;AAGFa,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2DADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,QAAIC,QAAQ,GAAG,IAAf;AAEA;AACR;AACA;AACA;AACA;;AACQ,aAASC,MAAT,CAAgB1B,IAAhB,EAAsB;AAClBwB,MAAAA,OAAO,CAACE,MAAR,CAAe;AAAE1B,QAAAA,IAAF;AAAQ2B,QAAAA,SAAS,EAAE;AAAnB,OAAf;AACH;;AAED,WAAO;AAEHC,MAAAA,eAAe,CAACC,CAAD,EAAI7B,IAAJ,EAAU;AACrByB,QAAAA,QAAQ,GAAG;AACPlB,UAAAA,KAAK,EAAEkB,QADA;AAEPK,UAAAA,WAAW,EAAEjC,oBAAoB,CAACkC,GAArB,CAAyB/B,IAAI,CAACG,IAA9B,KAAuCK,iBAAiB,CAACR,IAAD,EAAOwB,OAAO,CAACQ,QAAR,EAAP;AAF9D,SAAX;;AAKA,YAAIP,QAAQ,CAACK,WAAT,IAAwB9B,IAAI,CAACG,IAAL,KAAc,yBAAtC,IAAmEH,IAAI,CAACiC,UAA5E,EAAwF;AACpFP,UAAAA,MAAM,CAAC1B,IAAI,CAACkC,IAAN,CAAN;AACH;AACJ,OAXE;;AAaHC,MAAAA,aAAa,GAAG;AACZV,QAAAA,QAAQ,GAAGA,QAAQ,CAAClB,KAApB;AACH,OAfE;;AAiBH6B,MAAAA,eAAe,CAACpC,IAAD,EAAO;AAClB,YAAIyB,QAAQ,CAACK,WAAT,IAAwB9B,IAAI,CAACqC,QAAjC,EAA2C;AACvCX,UAAAA,MAAM,CAAC1B,IAAD,CAAN;AACH;AACJ;;AArBE,KAAP;AAuBH;;AArDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow returning values from Promise executor functions\r\n * @author Milos Djermanovic\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst { findVariable } = require(\"eslint-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\r\n\r\n/**\r\n * Determines whether the given identifier node is a reference to a global variable.\r\n * @param {ASTNode} node `Identifier` node to check.\r\n * @param {Scope} scope Scope to which the node belongs.\r\n * @returns {boolean} True if the identifier is a reference to a global variable.\r\n */\r\nfunction isGlobalReference(node, scope) {\r\n    const variable = findVariable(scope, node);\r\n\r\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\r\n}\r\n\r\n/**\r\n * Finds function's outer scope.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {Scope} Function's outer scope.\r\n */\r\nfunction getOuterScope(scope) {\r\n    const upper = scope.upper;\r\n\r\n    if (upper.type === \"function-expression-name\") {\r\n        return upper.upper;\r\n    }\r\n    return upper;\r\n}\r\n\r\n/**\r\n * Determines whether the given function node is used as a Promise executor.\r\n * @param {ASTNode} node The node to check.\r\n * @param {Scope} scope Function's own scope.\r\n * @returns {boolean} `true` if the node is a Promise executor.\r\n */\r\nfunction isPromiseExecutor(node, scope) {\r\n    const parent = node.parent;\r\n\r\n    return parent.type === \"NewExpression\" &&\r\n        parent.arguments[0] === node &&\r\n        parent.callee.type === \"Identifier\" &&\r\n        parent.callee.name === \"Promise\" &&\r\n        isGlobalReference(parent.callee, getOuterScope(scope));\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow returning values from Promise executor functions\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            returnsValue: \"Return values from promise executor functions cannot be read.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        let funcInfo = null;\r\n\r\n        /**\r\n         * Reports the given node.\r\n         * @param {ASTNode} node Node to report.\r\n         * @returns {void}\r\n         */\r\n        function report(node) {\r\n            context.report({ node, messageId: \"returnsValue\" });\r\n        }\r\n\r\n        return {\r\n\r\n            onCodePathStart(_, node) {\r\n                funcInfo = {\r\n                    upper: funcInfo,\r\n                    shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\r\n                };\r\n\r\n                if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\r\n                    report(node.body);\r\n                }\r\n            },\r\n\r\n            onCodePathEnd() {\r\n                funcInfo = funcInfo.upper;\r\n            },\r\n\r\n            ReturnStatement(node) {\r\n                if (funcInfo.shouldCheck && node.argument) {\r\n                    report(node);\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}