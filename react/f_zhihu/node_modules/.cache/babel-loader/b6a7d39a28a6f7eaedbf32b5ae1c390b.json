{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow a duplicate case label.\r\n * @author Dieter Oberkofler\r\n * @author Burak Yigit Kaya\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate case labels\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-duplicate-case\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate case label.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Determines whether the two given nodes are considered to be equal.\r\n     * @param {ASTNode} a First node.\r\n     * @param {ASTNode} b Second node.\r\n     * @returns {boolean} `true` if the nodes are considered to be equal.\r\n     */\n\n    function equal(a, b) {\n      if (a.type !== b.type) {\n        return false;\n      }\n\n      return astUtils.equalTokens(a, b, sourceCode);\n    }\n\n    return {\n      SwitchStatement(node) {\n        const previousTests = [];\n\n        for (const switchCase of node.cases) {\n          if (switchCase.test) {\n            const test = switchCase.test;\n\n            if (previousTests.some(previousTest => equal(previousTest, test))) {\n              context.report({\n                node: switchCase,\n                messageId: \"unexpected\"\n              });\n            } else {\n              previousTests.push(test);\n            }\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-duplicate-case.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","sourceCode","getSourceCode","equal","a","b","equalTokens","SwitchStatement","node","previousTests","switchCase","cases","test","some","previousTest","report","messageId","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gCADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,aAASC,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACjB,UAAID,CAAC,CAACb,IAAF,KAAWc,CAAC,CAACd,IAAjB,EAAuB;AACnB,eAAO,KAAP;AACH;;AAED,aAAOL,QAAQ,CAACoB,WAAT,CAAqBF,CAArB,EAAwBC,CAAxB,EAA2BJ,UAA3B,CAAP;AACH;;AACD,WAAO;AACHM,MAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,cAAMC,aAAa,GAAG,EAAtB;;AAEA,aAAK,MAAMC,UAAX,IAAyBF,IAAI,CAACG,KAA9B,EAAqC;AACjC,cAAID,UAAU,CAACE,IAAf,EAAqB;AACjB,kBAAMA,IAAI,GAAGF,UAAU,CAACE,IAAxB;;AAEA,gBAAIH,aAAa,CAACI,IAAd,CAAmBC,YAAY,IAAIX,KAAK,CAACW,YAAD,EAAeF,IAAf,CAAxC,CAAJ,EAAmE;AAC/DZ,cAAAA,OAAO,CAACe,MAAR,CAAe;AAAEP,gBAAAA,IAAI,EAAEE,UAAR;AAAoBM,gBAAAA,SAAS,EAAE;AAA/B,eAAf;AACH,aAFD,MAEO;AACHP,cAAAA,aAAa,CAACQ,IAAd,CAAmBL,IAAnB;AACH;AACJ;AACJ;AACJ;;AAfE,KAAP;AAiBH;;AAlDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow a duplicate case label.\r\n * @author Dieter Oberkofler\r\n * @author Burak Yigit Kaya\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow duplicate case labels\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-duplicate-case\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Duplicate case label.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Determines whether the two given nodes are considered to be equal.\r\n         * @param {ASTNode} a First node.\r\n         * @param {ASTNode} b Second node.\r\n         * @returns {boolean} `true` if the nodes are considered to be equal.\r\n         */\r\n        function equal(a, b) {\r\n            if (a.type !== b.type) {\r\n                return false;\r\n            }\r\n\r\n            return astUtils.equalTokens(a, b, sourceCode);\r\n        }\r\n        return {\r\n            SwitchStatement(node) {\r\n                const previousTests = [];\r\n\r\n                for (const switchCase of node.cases) {\r\n                    if (switchCase.test) {\r\n                        const test = switchCase.test;\r\n\r\n                        if (previousTests.some(previousTest => equal(previousTest, test))) {\r\n                            context.report({ node: switchCase, messageId: \"unexpected\" });\r\n                        } else {\r\n                            previousTests.push(test);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}