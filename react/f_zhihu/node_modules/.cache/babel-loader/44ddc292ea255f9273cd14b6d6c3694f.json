{"ast":null,"code":"/**\r\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\r\n * @author Toru Nagashima\r\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\r\n * Checks whether or not a node is a `.call()`/`.apply()`.\r\n * @param {ASTNode} node A CallExpression node to check.\r\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\r\n */\n\n\nfunction isCallOrNonVariadicApply(node) {\n  const callee = astUtils.skipChainExpression(node.callee);\n  return callee.type === \"MemberExpression\" && callee.property.type === \"Identifier\" && callee.computed === false && (callee.property.name === \"call\" && node.arguments.length >= 1 || callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\");\n}\n/**\r\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\r\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\r\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\r\n * @param {SourceCode} sourceCode The ESLint source code object.\r\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\r\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-call\"\n    },\n    schema: [],\n    messages: {\n      unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isCallOrNonVariadicApply(node)) {\n          return;\n        }\n\n        const callee = astUtils.skipChainExpression(node.callee);\n        const applied = astUtils.skipChainExpression(callee.object);\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            messageId: \"unnecessaryCall\",\n            data: {\n              name: callee.property.name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-useless-call.js"],"names":["astUtils","require","isCallOrNonVariadicApply","node","callee","skipChainExpression","type","property","computed","name","arguments","length","isValidThisArg","expectedThis","thisArg","sourceCode","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","recommended","url","schema","messages","unnecessaryCall","create","context","getSourceCode","CallExpression","applied","object","report","messageId","data"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;AAEA,SACIA,MAAM,CAACE,IAAP,KAAgB,kBAAhB,IACAF,MAAM,CAACG,QAAP,CAAgBD,IAAhB,KAAyB,YADzB,IAEAF,MAAM,CAACI,QAAP,KAAoB,KAFpB,KAIKJ,MAAM,CAACG,QAAP,CAAgBE,IAAhB,KAAyB,MAAzB,IAAmCN,IAAI,CAACO,SAAL,CAAeC,MAAf,IAAyB,CAA7D,IACCP,MAAM,CAACG,QAAP,CAAgBE,IAAhB,KAAyB,OAAzB,IAAoCN,IAAI,CAACO,SAAL,CAAeC,MAAf,KAA0B,CAA9D,IAAmER,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBJ,IAAlB,KAA2B,iBALnG,CADJ;AASH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2D;AACvD,MAAI,CAACF,YAAL,EAAmB;AACf,WAAOb,QAAQ,CAACgB,iBAAT,CAA2BF,OAA3B,CAAP;AACH;;AACD,SAAOd,QAAQ,CAACiB,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,UAA5C,CAAP;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFd,IAAAA,IAAI,EAAE,YADJ;AAGFe,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wDADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMd,UAAU,GAAGc,OAAO,CAACC,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,cAAc,CAAC5B,IAAD,EAAO;AACjB,YAAI,CAACD,wBAAwB,CAACC,IAAD,CAA7B,EAAqC;AACjC;AACH;;AAED,cAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;AACA,cAAM4B,OAAO,GAAGhC,QAAQ,CAACK,mBAAT,CAA6BD,MAAM,CAAC6B,MAApC,CAAhB;AACA,cAAMpB,YAAY,GAAImB,OAAO,CAAC1B,IAAR,KAAiB,kBAAlB,GAAwC0B,OAAO,CAACC,MAAhD,GAAyD,IAA9E;AACA,cAAMnB,OAAO,GAAGX,IAAI,CAACO,SAAL,CAAe,CAAf,CAAhB;;AAEA,YAAIE,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBC,UAAxB,CAAlB,EAAuD;AACnDc,UAAAA,OAAO,CAACK,MAAR,CAAe;AAAE/B,YAAAA,IAAF;AAAQgC,YAAAA,SAAS,EAAE,iBAAnB;AAAsCC,YAAAA,IAAI,EAAE;AAAE3B,cAAAA,IAAI,EAAEL,MAAM,CAACG,QAAP,CAAgBE;AAAxB;AAA5C,WAAf;AACH;AACJ;;AAdE,KAAP;AAgBH;;AApCY,CAAjB","sourcesContent":["/**\r\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\r\n * @author Toru Nagashima\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Helpers\r\n//------------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks whether or not a node is a `.call()`/`.apply()`.\r\n * @param {ASTNode} node A CallExpression node to check.\r\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\r\n */\r\nfunction isCallOrNonVariadicApply(node) {\r\n    const callee = astUtils.skipChainExpression(node.callee);\r\n\r\n    return (\r\n        callee.type === \"MemberExpression\" &&\r\n        callee.property.type === \"Identifier\" &&\r\n        callee.computed === false &&\r\n        (\r\n            (callee.property.name === \"call\" && node.arguments.length >= 1) ||\r\n            (callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\")\r\n        )\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\r\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\r\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\r\n * @param {SourceCode} sourceCode The ESLint source code object.\r\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\r\n */\r\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\r\n    if (!expectedThis) {\r\n        return astUtils.isNullOrUndefined(thisArg);\r\n    }\r\n    return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-useless-call\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n            CallExpression(node) {\r\n                if (!isCallOrNonVariadicApply(node)) {\r\n                    return;\r\n                }\r\n\r\n                const callee = astUtils.skipChainExpression(node.callee);\r\n                const applied = astUtils.skipChainExpression(callee.object);\r\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\r\n                const thisArg = node.arguments[0];\r\n\r\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\r\n                    context.report({ node, messageId: \"unnecessaryCall\", data: { name: callee.property.name } });\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}