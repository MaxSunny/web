{"ast":null,"code":"/**\r\n * @fileoverview Rule to disallow use of void operator.\r\n * @author Mike Sidorov\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `void` operators\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-void\"\n    },\n    messages: {\n      noVoid: \"Expected 'undefined' and instead saw 'void'.\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowAsStatement: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const allowAsStatement = context.options[0] && context.options[0].allowAsStatement; //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      'UnaryExpression[operator=\"void\"]'(node) {\n        if (allowAsStatement && node.parent && node.parent.type === \"ExpressionStatement\") {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: \"noVoid\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-void.js"],"names":["module","exports","meta","type","docs","description","recommended","url","messages","noVoid","schema","properties","allowAsStatement","default","additionalProperties","create","context","options","node","parent","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2BADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF,KATR;AAaFC,IAAAA,MAAM,EAAE,CACJ;AACIP,MAAAA,IAAI,EAAE,QADV;AAEIQ,MAAAA,UAAU,EAAE;AACRC,QAAAA,gBAAgB,EAAE;AACdT,UAAAA,IAAI,EAAE,SADQ;AAEdU,UAAAA,OAAO,EAAE;AAFK;AADV,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KADI;AAbN,GADO;;AA4BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMJ,gBAAgB,GAClBI,OAAO,CAACC,OAAR,CAAgB,CAAhB,KAAsBD,OAAO,CAACC,OAAR,CAAgB,CAAhB,EAAmBL,gBAD7C,CADY,CAIZ;AACA;AACA;;AAEA,WAAO;AACH,yCAAmCM,IAAnC,EAAyC;AACrC,YACIN,gBAAgB,IAChBM,IAAI,CAACC,MADL,IAEAD,IAAI,CAACC,MAAL,CAAYhB,IAAZ,KAAqB,qBAHzB,EAIE;AACE;AACH;;AACDa,QAAAA,OAAO,CAACI,MAAR,CAAe;AACXF,UAAAA,IADW;AAEXG,UAAAA,SAAS,EAAE;AAFA,SAAf;AAIH;;AAbE,KAAP;AAeH;;AAnDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to disallow use of void operator.\r\n * @author Mike Sidorov\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow `void` operators\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-void\"\r\n        },\r\n\r\n        messages: {\r\n            noVoid: \"Expected 'undefined' and instead saw 'void'.\"\r\n        },\r\n\r\n        schema: [\r\n            {\r\n                type: \"object\",\r\n                properties: {\r\n                    allowAsStatement: {\r\n                        type: \"boolean\",\r\n                        default: false\r\n                    }\r\n                },\r\n                additionalProperties: false\r\n            }\r\n        ]\r\n    },\r\n\r\n    create(context) {\r\n        const allowAsStatement =\r\n            context.options[0] && context.options[0].allowAsStatement;\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n            'UnaryExpression[operator=\"void\"]'(node) {\r\n                if (\r\n                    allowAsStatement &&\r\n                    node.parent &&\r\n                    node.parent.type === \"ExpressionStatement\"\r\n                ) {\r\n                    return;\r\n                }\r\n                context.report({\r\n                    node,\r\n                    messageId: \"noVoid\"\r\n                });\r\n            }\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}