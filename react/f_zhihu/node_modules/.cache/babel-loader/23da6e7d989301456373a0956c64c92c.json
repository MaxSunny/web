{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\r\n * @author Erik Arvidsson\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow lexical declarations in case clauses\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-case-declarations\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected lexical declaration in case block.\"\n    }\n  },\n\n  create(context) {\n    /**\r\n     * Checks whether or not a node is a lexical declaration.\r\n     * @param {ASTNode} node A direct child statement of a switch case.\r\n     * @returns {boolean} Whether or not the node is a lexical declaration.\r\n     */\n    function isLexicalDeclaration(node) {\n      switch (node.type) {\n        case \"FunctionDeclaration\":\n        case \"ClassDeclaration\":\n          return true;\n\n        case \"VariableDeclaration\":\n          return node.kind !== \"var\";\n\n        default:\n          return false;\n      }\n    }\n\n    return {\n      SwitchCase(node) {\n        for (let i = 0; i < node.consequent.length; i++) {\n          const statement = node.consequent[i];\n\n          if (isLexicalDeclaration(statement)) {\n            context.report({\n              node: statement,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-case-declarations.js"],"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","isLexicalDeclaration","node","kind","SwitchCase","i","consequent","length","statement","report","messageId"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+CADX;AAEFC,MAAAA,WAAW,EAAE,IAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACR;AACA;AACA;AACA;AACQ,aAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,cAAQA,IAAI,CAACX,IAAb;AACI,aAAK,qBAAL;AACA,aAAK,kBAAL;AACI,iBAAO,IAAP;;AACJ,aAAK,qBAAL;AACI,iBAAOW,IAAI,CAACC,IAAL,KAAc,KAArB;;AACJ;AACI,iBAAO,KAAP;AAPR;AASH;;AAED,WAAO;AACHC,MAAAA,UAAU,CAACF,IAAD,EAAO;AACb,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,UAAL,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;AAC7C,gBAAMG,SAAS,GAAGN,IAAI,CAACI,UAAL,CAAgBD,CAAhB,CAAlB;;AAEA,cAAIJ,oBAAoB,CAACO,SAAD,CAAxB,EAAqC;AACjCR,YAAAA,OAAO,CAACS,MAAR,CAAe;AACXP,cAAAA,IAAI,EAAEM,SADK;AAEXE,cAAAA,SAAS,EAAE;AAFA,aAAf;AAIH;AACJ;AACJ;;AAZE,KAAP;AAeH;;AAnDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\r\n * @author Erik Arvidsson\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow lexical declarations in case clauses\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-case-declarations\"\r\n        },\r\n\r\n        schema: [],\r\n\r\n        messages: {\r\n            unexpected: \"Unexpected lexical declaration in case block.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        /**\r\n         * Checks whether or not a node is a lexical declaration.\r\n         * @param {ASTNode} node A direct child statement of a switch case.\r\n         * @returns {boolean} Whether or not the node is a lexical declaration.\r\n         */\r\n        function isLexicalDeclaration(node) {\r\n            switch (node.type) {\r\n                case \"FunctionDeclaration\":\r\n                case \"ClassDeclaration\":\r\n                    return true;\r\n                case \"VariableDeclaration\":\r\n                    return node.kind !== \"var\";\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        return {\r\n            SwitchCase(node) {\r\n                for (let i = 0; i < node.consequent.length; i++) {\r\n                    const statement = node.consequent[i];\r\n\r\n                    if (isLexicalDeclaration(statement)) {\r\n                        context.report({\r\n                            node: statement,\r\n                            messageId: \"unexpected\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}