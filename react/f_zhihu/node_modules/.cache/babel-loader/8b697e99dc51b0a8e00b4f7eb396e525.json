{"ast":null,"code":"/**\r\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\r\n * @author Glen Mailer\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow confusing multiline expressions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n    },\n    schema: [],\n    messages: {\n      function: \"Unexpected newline between function and ( of function call.\",\n      property: \"Unexpected newline between object and [ of property access.\",\n      taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n      division: \"Unexpected newline between numerator and division operator.\"\n    }\n  },\n\n  create(context) {\n    const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Check to see if there is a newline between the node and the following open bracket\r\n     * line's expression\r\n     * @param {ASTNode} node The node to check.\r\n     * @param {string} messageId The error messageId to use.\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function checkForBreakAfter(node, messageId) {\n      const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n      const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n      if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n        context.report({\n          node,\n          loc: openParen.loc,\n          messageId\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        if (!node.computed || node.optional) {\n          return;\n        }\n\n        checkForBreakAfter(node.object, \"property\");\n      },\n\n      TaggedTemplateExpression(node) {\n        const {\n          quasi\n        } = node; // handles common tags, parenthesized tags, and typescript's generic type arguments\n\n        const tokenBefore = sourceCode.getTokenBefore(quasi);\n\n        if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\n          context.report({\n            node,\n            loc: {\n              start: quasi.loc.start,\n              end: {\n                line: quasi.loc.start.line,\n                column: quasi.loc.start.column + 1\n              }\n            },\n            messageId: \"taggedTemplate\"\n          });\n        }\n      },\n\n      CallExpression(node) {\n        if (node.arguments.length === 0 || node.optional) {\n          return;\n        }\n\n        checkForBreakAfter(node.callee, \"function\");\n      },\n\n      \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n        const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n        const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n        if (tokenAfterOperator.type === \"Identifier\" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {\n          checkForBreakAfter(node.left, \"division\");\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-unexpected-multiline.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","function","property","taggedTemplate","division","create","context","REGEX_FLAG_MATCHER","sourceCode","getSourceCode","checkForBreakAfter","node","messageId","openParen","getTokenAfter","isNotClosingParenToken","nodeExpressionEnd","getTokenBefore","loc","start","line","end","report","MemberExpression","computed","optional","object","TaggedTemplateExpression","quasi","tokenBefore","column","CallExpression","arguments","length","callee","secondSlash","token","value","tokenAfterOperator","test","range","left"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\r\n * @author Glen Mailer\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"problem\",\r\n\r\n        docs: {\r\n            description: \"disallow confusing multiline expressions\",\r\n            recommended: true,\r\n            url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\r\n        },\r\n\r\n        schema: [],\r\n        messages: {\r\n            function: \"Unexpected newline between function and ( of function call.\",\r\n            property: \"Unexpected newline between object and [ of property access.\",\r\n            taggedTemplate: \"Unexpected newline between template tag and template literal.\",\r\n            division: \"Unexpected newline between numerator and division operator.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n\r\n        const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\r\n\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Check to see if there is a newline between the node and the following open bracket\r\n         * line's expression\r\n         * @param {ASTNode} node The node to check.\r\n         * @param {string} messageId The error messageId to use.\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkForBreakAfter(node, messageId) {\r\n            const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\r\n            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\r\n\r\n            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\r\n                context.report({\r\n                    node,\r\n                    loc: openParen.loc,\r\n                    messageId\r\n                });\r\n            }\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // Public API\r\n        //--------------------------------------------------------------------------\r\n\r\n        return {\r\n\r\n            MemberExpression(node) {\r\n                if (!node.computed || node.optional) {\r\n                    return;\r\n                }\r\n                checkForBreakAfter(node.object, \"property\");\r\n            },\r\n\r\n            TaggedTemplateExpression(node) {\r\n                const { quasi } = node;\r\n\r\n                // handles common tags, parenthesized tags, and typescript's generic type arguments\r\n                const tokenBefore = sourceCode.getTokenBefore(quasi);\r\n\r\n                if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\r\n                    context.report({\r\n                        node,\r\n                        loc: {\r\n                            start: quasi.loc.start,\r\n                            end: {\r\n                                line: quasi.loc.start.line,\r\n                                column: quasi.loc.start.column + 1\r\n                            }\r\n                        },\r\n                        messageId: \"taggedTemplate\"\r\n                    });\r\n                }\r\n            },\r\n\r\n            CallExpression(node) {\r\n                if (node.arguments.length === 0 || node.optional) {\r\n                    return;\r\n                }\r\n                checkForBreakAfter(node.callee, \"function\");\r\n            },\r\n\r\n            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\r\n                const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\r\n                const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\r\n\r\n                if (\r\n                    tokenAfterOperator.type === \"Identifier\" &&\r\n                    REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) &&\r\n                    secondSlash.range[1] === tokenAfterOperator.range[0]\r\n                ) {\r\n                    checkForBreakAfter(node.left, \"division\");\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}