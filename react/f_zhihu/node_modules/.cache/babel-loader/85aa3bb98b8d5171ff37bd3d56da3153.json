{"ast":null,"code":"/**\r\n * @fileoverview Rule to flag use of a leading/trailing decimal point in a numeric literal\r\n * @author James Allardice\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow leading or trailing decimal points in numeric literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-floating-decimal\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      leading: \"A leading decimal point can be confused with a dot.\",\n      trailing: \"A trailing decimal point can be confused with a dot.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        if (typeof node.value === \"number\") {\n          if (node.raw.startsWith(\".\")) {\n            context.report({\n              node,\n              messageId: \"leading\",\n\n              fix(fixer) {\n                const tokenBefore = sourceCode.getTokenBefore(node);\n                const needsSpaceBefore = tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils.canTokensBeAdjacent(tokenBefore, `0${node.raw}`);\n                return fixer.insertTextBefore(node, needsSpaceBefore ? \" 0\" : \"0\");\n              }\n\n            });\n          }\n\n          if (node.raw.indexOf(\".\") === node.raw.length - 1) {\n            context.report({\n              node,\n              messageId: \"trailing\",\n              fix: fixer => fixer.insertTextAfter(node, \"0\")\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/no-floating-decimal.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","fixable","messages","leading","trailing","create","context","sourceCode","getSourceCode","Literal","node","value","raw","startsWith","report","messageId","fix","fixer","tokenBefore","getTokenBefore","needsSpaceBefore","range","canTokensBeAdjacent","insertTextBefore","indexOf","length","insertTextAfter"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,iEADX;AAEFC,MAAAA,WAAW,EAAE,KAFX;AAGFC,MAAAA,GAAG,EAAE;AAHH,KAHJ;AASFC,IAAAA,MAAM,EAAE,EATN;AAUFC,IAAAA,OAAO,EAAE,MAVP;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,OAAO,EAAE,qDADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ;AAXR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AAEV,YAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAChC,cAAID,IAAI,CAACE,GAAL,CAASC,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AAC1BP,YAAAA,OAAO,CAACQ,MAAR,CAAe;AACXJ,cAAAA,IADW;AAEXK,cAAAA,SAAS,EAAE,SAFA;;AAGXC,cAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,sBAAMC,WAAW,GAAGX,UAAU,CAACY,cAAX,CAA0BT,IAA1B,CAApB;AACA,sBAAMU,gBAAgB,GAAGF,WAAW,IAChCA,WAAW,CAACG,KAAZ,CAAkB,CAAlB,MAAyBX,IAAI,CAACW,KAAL,CAAW,CAAX,CADJ,IAErB,CAAC/B,QAAQ,CAACgC,mBAAT,CAA6BJ,WAA7B,EAA2C,IAAGR,IAAI,CAACE,GAAI,EAAvD,CAFL;AAIA,uBAAOK,KAAK,CAACM,gBAAN,CAAuBb,IAAvB,EAA6BU,gBAAgB,GAAG,IAAH,GAAU,GAAvD,CAAP;AACH;;AAVU,aAAf;AAYH;;AACD,cAAIV,IAAI,CAACE,GAAL,CAASY,OAAT,CAAiB,GAAjB,MAA0Bd,IAAI,CAACE,GAAL,CAASa,MAAT,GAAkB,CAAhD,EAAmD;AAC/CnB,YAAAA,OAAO,CAACQ,MAAR,CAAe;AACXJ,cAAAA,IADW;AAEXK,cAAAA,SAAS,EAAE,UAFA;AAGXC,cAAAA,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACS,eAAN,CAAsBhB,IAAtB,EAA4B,GAA5B;AAHH,aAAf;AAKH;AACJ;AACJ;;AA1BE,KAAP;AA6BH;;AAlDY,CAAjB","sourcesContent":["/**\r\n * @fileoverview Rule to flag use of a leading/trailing decimal point in a numeric literal\r\n * @author James Allardice\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst astUtils = require(\"./utils/ast-utils\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"suggestion\",\r\n\r\n        docs: {\r\n            description: \"disallow leading or trailing decimal points in numeric literals\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/no-floating-decimal\"\r\n        },\r\n\r\n        schema: [],\r\n        fixable: \"code\",\r\n        messages: {\r\n            leading: \"A leading decimal point can be confused with a dot.\",\r\n            trailing: \"A trailing decimal point can be confused with a dot.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        return {\r\n            Literal(node) {\r\n\r\n                if (typeof node.value === \"number\") {\r\n                    if (node.raw.startsWith(\".\")) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"leading\",\r\n                            fix(fixer) {\r\n                                const tokenBefore = sourceCode.getTokenBefore(node);\r\n                                const needsSpaceBefore = tokenBefore &&\r\n                                    tokenBefore.range[1] === node.range[0] &&\r\n                                    !astUtils.canTokensBeAdjacent(tokenBefore, `0${node.raw}`);\r\n\r\n                                return fixer.insertTextBefore(node, needsSpaceBefore ? \" 0\" : \"0\");\r\n                            }\r\n                        });\r\n                    }\r\n                    if (node.raw.indexOf(\".\") === node.raw.length - 1) {\r\n                        context.report({\r\n                            node,\r\n                            messageId: \"trailing\",\r\n                            fix: fixer => fixer.insertTextAfter(node, \"0\")\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}