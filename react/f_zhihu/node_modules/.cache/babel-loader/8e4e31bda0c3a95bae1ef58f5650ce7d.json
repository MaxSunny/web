{"ast":null,"code":"/**\r\n * @fileoverview Provide the function that emits deprecation warnings.\r\n * @author Toru Nagashima <http://github.com/mysticatea>\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\"); //------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n// Definitions for deprecation warnings.\n\n\nconst deprecationWarningMessages = {\n  ESLINT_LEGACY_ECMAFEATURES: \"The 'ecmaFeatures' config file property is deprecated and has no effect.\",\n  ESLINT_PERSONAL_CONFIG_LOAD: \"'~/.eslintrc.*' config files have been deprecated. \" + \"Please use a config file per project or the '--config' option.\",\n  ESLINT_PERSONAL_CONFIG_SUPPRESS: \"'~/.eslintrc.*' config files have been deprecated. \" + \"Please remove it or add 'root:true' to the config files in your \" + \"projects in order to avoid loading '~/.eslintrc.*' accidentally.\"\n};\nconst sourceFileErrorCache = new Set();\n/**\r\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\r\n * for each unique file path, but repeated invocations with the same file path have no effect.\r\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\r\n * @param {string} source The name of the configuration source to report the warning for.\r\n * @param {string} errorCode The warning message to show.\r\n * @returns {void}\r\n */\n\nfunction emitDeprecationWarning(source, errorCode) {\n  const cacheKey = JSON.stringify({\n    source,\n    errorCode\n  });\n\n  if (sourceFileErrorCache.has(cacheKey)) {\n    return;\n  }\n\n  sourceFileErrorCache.add(cacheKey);\n  const rel = path.relative(process.cwd(), source);\n  const message = deprecationWarningMessages[errorCode];\n  process.emitWarning(`${message} (found in \"${rel}\")`, \"DeprecationWarning\", errorCode);\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  emitDeprecationWarning\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/shared/deprecation-warnings.js"],"names":["path","require","deprecationWarningMessages","ESLINT_LEGACY_ECMAFEATURES","ESLINT_PERSONAL_CONFIG_LOAD","ESLINT_PERSONAL_CONFIG_SUPPRESS","sourceFileErrorCache","Set","emitDeprecationWarning","source","errorCode","cacheKey","JSON","stringify","has","add","rel","relative","process","cwd","message","emitWarning","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;AACA;AACA;AAEA;;;AACA,MAAMC,0BAA0B,GAAG;AAC/BC,EAAAA,0BAA0B,EACtB,0EAF2B;AAG/BC,EAAAA,2BAA2B,EACvB,wDACA,gEAL2B;AAM/BC,EAAAA,+BAA+B,EAC3B,wDACA,kEADA,GAEA;AAT2B,CAAnC;AAYA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,SAAxC,EAAmD;AAC/C,QAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEJ,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAf,CAAjB;;AAEA,MAAIJ,oBAAoB,CAACQ,GAArB,CAAyBH,QAAzB,CAAJ,EAAwC;AACpC;AACH;;AAEDL,EAAAA,oBAAoB,CAACS,GAArB,CAAyBJ,QAAzB;AAEA,QAAMK,GAAG,GAAGhB,IAAI,CAACiB,QAAL,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA6BV,MAA7B,CAAZ;AACA,QAAMW,OAAO,GAAGlB,0BAA0B,CAACQ,SAAD,CAA1C;AAEAQ,EAAAA,OAAO,CAACG,WAAR,CACK,GAAED,OAAQ,eAAcJ,GAAI,IADjC,EAEI,oBAFJ,EAGIN,SAHJ;AAKH,C,CAED;AACA;AACA;;;AAEAY,MAAM,CAACC,OAAP,GAAiB;AACbf,EAAAA;AADa,CAAjB","sourcesContent":["/**\r\n * @fileoverview Provide the function that emits deprecation warnings.\r\n * @author Toru Nagashima <http://github.com/mysticatea>\r\n */\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Requirements\r\n//------------------------------------------------------------------------------\r\n\r\nconst path = require(\"path\");\r\n\r\n//------------------------------------------------------------------------------\r\n// Private\r\n//------------------------------------------------------------------------------\r\n\r\n// Definitions for deprecation warnings.\r\nconst deprecationWarningMessages = {\r\n    ESLINT_LEGACY_ECMAFEATURES:\r\n        \"The 'ecmaFeatures' config file property is deprecated and has no effect.\",\r\n    ESLINT_PERSONAL_CONFIG_LOAD:\r\n        \"'~/.eslintrc.*' config files have been deprecated. \" +\r\n        \"Please use a config file per project or the '--config' option.\",\r\n    ESLINT_PERSONAL_CONFIG_SUPPRESS:\r\n        \"'~/.eslintrc.*' config files have been deprecated. \" +\r\n        \"Please remove it or add 'root:true' to the config files in your \" +\r\n        \"projects in order to avoid loading '~/.eslintrc.*' accidentally.\"\r\n};\r\n\r\nconst sourceFileErrorCache = new Set();\r\n\r\n/**\r\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\r\n * for each unique file path, but repeated invocations with the same file path have no effect.\r\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\r\n * @param {string} source The name of the configuration source to report the warning for.\r\n * @param {string} errorCode The warning message to show.\r\n * @returns {void}\r\n */\r\nfunction emitDeprecationWarning(source, errorCode) {\r\n    const cacheKey = JSON.stringify({ source, errorCode });\r\n\r\n    if (sourceFileErrorCache.has(cacheKey)) {\r\n        return;\r\n    }\r\n\r\n    sourceFileErrorCache.add(cacheKey);\r\n\r\n    const rel = path.relative(process.cwd(), source);\r\n    const message = deprecationWarningMessages[errorCode];\r\n\r\n    process.emitWarning(\r\n        `${message} (found in \"${rel}\")`,\r\n        \"DeprecationWarning\",\r\n        errorCode\r\n    );\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Public Interface\r\n//------------------------------------------------------------------------------\r\n\r\nmodule.exports = {\r\n    emitDeprecationWarning\r\n};\r\n"]},"metadata":{},"sourceType":"script"}