{"ast":null,"code":"/**\r\n * @fileoverview Rule to check spacing between template tags and their literals\r\n * @author Jonathan Wilsson\r\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between template tags and their literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-tag-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected space between template tag and template literal.\",\n      missing: \"Missing space between template tag and template literal.\"\n    }\n  },\n\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const sourceCode = context.getSourceCode();\n    /**\r\n     * Check if a space is present between a template tag and its literal\r\n     * @param {ASTNode} node node to evaluate\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    function checkSpacing(node) {\n      const tagToken = sourceCode.getTokenBefore(node.quasi);\n      const literalToken = sourceCode.getFirstToken(node.quasi);\n      const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: tagToken.loc.end,\n            end: literalToken.loc.start\n          },\n          messageId: \"unexpected\",\n\n          fix(fixer) {\n            const comments = sourceCode.getCommentsBefore(node.quasi); // Don't fix anything if there's a single line comment after the template tag\n\n            if (comments.some(comment => comment.type === \"Line\")) {\n              return null;\n            }\n\n            return fixer.replaceTextRange([tagToken.range[1], literalToken.range[0]], comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\"));\n          }\n\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: node.loc.start,\n            end: literalToken.loc.start\n          },\n          messageId: \"missing\",\n\n          fix(fixer) {\n            return fixer.insertTextAfter(tagToken, \" \");\n          }\n\n        });\n      }\n    }\n\n    return {\n      TaggedTemplateExpression: checkSpacing\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/2928/Desktop/zhuawa/notes/project_demo/react_project/node_modules/eslint/lib/rules/template-tag-spacing.js"],"names":["module","exports","meta","type","docs","description","recommended","url","fixable","schema","enum","messages","unexpected","missing","create","context","never","options","sourceCode","getSourceCode","checkSpacing","node","tagToken","getTokenBefore","quasi","literalToken","getFirstToken","hasWhitespace","isSpaceBetweenTokens","report","loc","start","end","messageId","fix","fixer","comments","getCommentsBefore","some","comment","replaceTextRange","range","reduce","text","getText","insertTextAfter","TaggedTemplateExpression"],"mappings":"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","sourcesContent":["/**\r\n * @fileoverview Rule to check spacing between template tags and their literals\r\n * @author Jonathan Wilsson\r\n */\r\n\r\n\"use strict\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Rule Definition\r\n//------------------------------------------------------------------------------\r\n\r\n/** @type {import('../shared/types').Rule} */\r\nmodule.exports = {\r\n    meta: {\r\n        type: \"layout\",\r\n\r\n        docs: {\r\n            description: \"require or disallow spacing between template tags and their literals\",\r\n            recommended: false,\r\n            url: \"https://eslint.org/docs/rules/template-tag-spacing\"\r\n        },\r\n\r\n        fixable: \"whitespace\",\r\n\r\n        schema: [\r\n            { enum: [\"always\", \"never\"] }\r\n        ],\r\n        messages: {\r\n            unexpected: \"Unexpected space between template tag and template literal.\",\r\n            missing: \"Missing space between template tag and template literal.\"\r\n        }\r\n    },\r\n\r\n    create(context) {\r\n        const never = context.options[0] !== \"always\";\r\n        const sourceCode = context.getSourceCode();\r\n\r\n        /**\r\n         * Check if a space is present between a template tag and its literal\r\n         * @param {ASTNode} node node to evaluate\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        function checkSpacing(node) {\r\n            const tagToken = sourceCode.getTokenBefore(node.quasi);\r\n            const literalToken = sourceCode.getFirstToken(node.quasi);\r\n            const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\r\n\r\n            if (never && hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: tagToken.loc.end,\r\n                        end: literalToken.loc.start\r\n                    },\r\n                    messageId: \"unexpected\",\r\n                    fix(fixer) {\r\n                        const comments = sourceCode.getCommentsBefore(node.quasi);\r\n\r\n                        // Don't fix anything if there's a single line comment after the template tag\r\n                        if (comments.some(comment => comment.type === \"Line\")) {\r\n                            return null;\r\n                        }\r\n\r\n                        return fixer.replaceTextRange(\r\n                            [tagToken.range[1], literalToken.range[0]],\r\n                            comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\")\r\n                        );\r\n                    }\r\n                });\r\n            } else if (!never && !hasWhitespace) {\r\n                context.report({\r\n                    node,\r\n                    loc: {\r\n                        start: node.loc.start,\r\n                        end: literalToken.loc.start\r\n                    },\r\n                    messageId: \"missing\",\r\n                    fix(fixer) {\r\n                        return fixer.insertTextAfter(tagToken, \" \");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            TaggedTemplateExpression: checkSpacing\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}