{"ast":null,"code":"import { mount } from \"./mount\";\n\nfunction pathChildren(prev, next, parent) {\n  //因为整个diff，还是很耗性能的，所以我们先做一些优化\n  if (!prev) {\n    if (next) {\n      next = next instanceof Array ? next : [next];\n\n      for (let i of next) {\n        mount(i, parent);\n      }\n    } else {}\n  } else {\n    if (prev instanceof Array) {\n      diff(prev, next, parent);\n    } else {\n      //prev is a single，has only one node\n      if (!next) parent.removeChild(prev.staticNode);else if (next && next instanceof Array) {\n        //prev is one ,next is Array\n        parent.removeChild(prev.staticNode);\n\n        for (let i of next) {\n          mount(i, parent);\n        }\n      } else {\n        update(prev, next, parent);\n      }\n    }\n  }\n}\n\nexport const update = function (prev, next, container) {\n  //if type is different\n  if (prev.type !== next.type) {\n    container.removeChild(prev.staticNode);\n    mount(next, container);\n    return;\n  } //if type is same\n  //take props first,take children\n\n\n  const {\n    props: {\n      children: prevChildren,\n      ...prevProps\n    }\n  } = prev;\n  const {\n    props: {\n      children: nextChildren,\n      ...nextProps\n    }\n  } = prev; //patch props\n\n  const staticNode = next.staticNode = prev.staticNode;\n\n  for (let key of Object.keys(prevProps)) {\n    let prev = prevProps[key];\n    next = nextProps[key];\n    patchProps(key, prev, next, staticNode);\n  } //<div className='main'></div>\n  //<div style={{color:'red'}}></div>\n\n\n  for (let key of Object.keys(prevProps)) {\n    let prev = prevProps[key];\n    patchProps(key, prev, null, staticNode);\n  } //patch children\n\n\n  pathChildren(prevChildren, nextChildren, staticNode);\n};\nexport const patchProps = function (key, prev, next, staticNode) {\n  if (key === 'style') {\n    if (next) {\n      for (let k in next) {\n        staticNode.style[k] = next[k];\n      }\n    }\n\n    if (prev) {\n      for (let k in prev) {\n        if (!next.hasOwnProperty(k)) {\n          staticNode.style[k] = '';\n        }\n      }\n    }\n  } else if (key === 'className') {\n    if (!staticNode.classList.contains(next)) {\n      staticNode.classList.add(next);\n    }\n  } else if (key[0] === 'o' && key[1] === 'n') {\n    prev && staticNode.removeEventListener(key.slice(2).toLowerCase(), prev);\n    next && staticNode.addEventListener(key.slice(2).toLowerCase(), prev);\n  }\n};","map":{"version":3,"sources":["/Users/only/Desktop/文件/web0930  1210-1211/react-17/src/react/update.js"],"names":["mount","pathChildren","prev","next","parent","Array","i","diff","removeChild","staticNode","update","container","type","props","children","prevChildren","prevProps","nextChildren","nextProps","key","Object","keys","patchProps","k","style","hasOwnProperty","classList","contains","add","removeEventListener","slice","toLowerCase","addEventListener"],"mappings":"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","sourcesContent":["import { mount } from \"./mount\";\n\nfunction pathChildren(prev,next,parent){\n    //因为整个diff，还是很耗性能的，所以我们先做一些优化\n    if(!prev){\n        if(next){\n            next = next instanceof Array?next : [next];\n            for(let i of next){\n                mount(i,parent);\n            }\n        }else{}\n    }else{\n        if(prev instanceof Array){\n            diff(prev,next,parent)\n        }else{\n            //prev is a single，has only one node\n            if(!next) parent.removeChild(prev.staticNode)\n            else if(next && (next instanceof Array)){\n                //prev is one ,next is Array\n                parent.removeChild(prev.staticNode);\n                for(let i of next){\n                    mount(i,parent);\n                }\n            }else{\n                update(prev,next,parent)\n            }\n        }\n    }\n}\n\nexport const update = function(prev,next,container){\n    //if type is different\n    if(prev.type !== next.type){\n        container.removeChild(prev.staticNode);\n        mount(next,container);\n        return;\n    }\n    //if type is same\n    //take props first,take children\n    const {props:{children:prevChildren,...prevProps}} = prev;\n    const {props:{children:nextChildren,...nextProps}} = prev;\n    //patch props\n    const staticNode = (next.staticNode = prev.staticNode);\n    for(let key of Object.keys(prevProps)){\n        let prev = prevProps[key];\n        next = nextProps[key];\n        patchProps(key,prev,next,staticNode);\n    }\n    //<div className='main'></div>\n    //<div style={{color:'red'}}></div>\n    for(let key of Object.keys(prevProps)){\n        let prev = prevProps[key];\n        patchProps(key,prev,null,staticNode);\n    }\n\n    //patch children\n    pathChildren(\n        prevChildren,nextChildren,staticNode\n    )\n\n}\n\nexport const patchProps = function(key,prev,next,staticNode){\n    if(key === 'style'){\n        if(next){\n            for(let k in next){\n                staticNode.style[k] = next[k];\n            }\n        }\n        if(prev){\n            for(let k in prev){\n                if(!next.hasOwnProperty(k)){\n                    staticNode.style[k] = ''\n                }\n            }\n        }\n    }\n    else if(key === 'className'){\n        if(!staticNode.classList.contains(next)){\n            staticNode.classList.add(next);\n        }\n    }\n    else if(key[0] === 'o' && key[1] === 'n'){\n        prev && staticNode.removeEventListener(key.slice(2).toLowerCase(),prev);\n        next && staticNode.addEventListener(key.slice(2).toLowerCase(),prev);\n    }\n}"]},"metadata":{},"sourceType":"module"}